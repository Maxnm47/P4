//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UCM.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UCMLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, TEMPLATE_KEYWORD=8, 
		IN=9, HIDDEN_=10, OBJECT_KEYWORD=11, FUNCTIONS_KEYWORD=12, EXTENDS_KEYWORD=13, 
		NULL=14, MULT=15, DIV=16, PLUS=17, MINUS=18, MOD=19, AND=20, OR=21, EQ=22, 
		NEQ=23, GT=24, LT=25, GTE=26, LTE=27, NOT=28, QUESTION=29, LPAREN=30, 
		RPAREN=31, LCURLY=32, RCURLY=33, LBRACKET=34, RBRACKET=35, SEMI=36, DOT=37, 
		COMMA=38, COLON=39, NEWLINE=40, ASSIGN=41, PLUSASSIGN=42, MULTASSIGN=43, 
		DIVASSIGN=44, MODASSIGN=45, MINUSASSIGN=46, QUOTE=47, DOLLAR=48, INT_T=49, 
		FLOAT_T=50, STRING_T=51, BOOL_T=52, VOID_T=53, BOOL=54, INT=55, FLOAT=56, 
		SIMPLE_STRING=57, STRING_START=58, STRING_MIDDLE=59, STRING_END=60, SPACES=61, 
		ID=62;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WS", "COMMENT", "LINE_COMMENT", "BLOCK_COMMENT", "IF", "ELSE", "WHILE", 
		"FOR", "RETURN", "TEMPLATE_KEYWORD", "IN", "HIDDEN_", "OBJECT_KEYWORD", 
		"FUNCTIONS_KEYWORD", "EXTENDS_KEYWORD", "NULL", "MULT", "DIV", "PLUS", 
		"MINUS", "MOD", "AND", "OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", 
		"QUESTION", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRACKET", "RBRACKET", 
		"SEMI", "DOT", "COMMA", "COLON", "NEWLINE", "ASSIGN", "PLUSASSIGN", "MULTASSIGN", 
		"DIVASSIGN", "MODASSIGN", "MINUSASSIGN", "QUOTE", "DOLLAR", "INT_T", "FLOAT_T", 
		"STRING_T", "BOOL_T", "VOID_T", "BOOL", "INT", "FLOAT", "SIMPLE_STRING", 
		"STRING_START", "STRING_MIDDLE", "STRING_END", "SPACES", "ID"
	};


	public UCMLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public UCMLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'if'", "'else'", "'while'", "'for'", "'return'", "'template'", 
		"'in'", "'hidden'", "'object'", "'methods'", "'extends'", "'null'", "'*'", 
		"'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", "'!='", "'>'", "'<'", 
		"'>='", "'<='", "'!'", "'?'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "'.'", "','", "':'", "'\\n'", "'='", "'+='", "'*='", "'/='", "'%='", 
		"'-='", "'\"'", "'$'", "'int'", "'float'", "'string'", "'bool'", "'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "IF", "ELSE", "WHILE", "FOR", "RETURN", "TEMPLATE_KEYWORD", 
		"IN", "HIDDEN_", "OBJECT_KEYWORD", "FUNCTIONS_KEYWORD", "EXTENDS_KEYWORD", 
		"NULL", "MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", "OR", "EQ", "NEQ", 
		"GT", "LT", "GTE", "LTE", "NOT", "QUESTION", "LPAREN", "RPAREN", "LCURLY", 
		"RCURLY", "LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", "COLON", "NEWLINE", 
		"ASSIGN", "PLUSASSIGN", "MULTASSIGN", "DIVASSIGN", "MODASSIGN", "MINUSASSIGN", 
		"QUOTE", "DOLLAR", "INT_T", "FLOAT_T", "STRING_T", "BOOL_T", "VOID_T", 
		"BOOL", "INT", "FLOAT", "SIMPLE_STRING", "STRING_START", "STRING_MIDDLE", 
		"STRING_END", "SPACES", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UCM.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UCMLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,62,444,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,1,0,4,0,131,8,0,11,0,12,0,132,1,0,1,0,1,1,1,1,3,1,139,8,1,1,1,1,1,
		1,2,1,2,5,2,145,8,2,10,2,12,2,148,9,2,1,3,1,3,1,3,1,3,5,3,154,8,3,10,3,
		12,3,157,9,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
		6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
		1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,
		1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
		1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
		1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
		1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,
		1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,1,51,
		1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,
		1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,
		1,55,1,55,1,55,3,55,349,8,55,1,56,4,56,352,8,56,11,56,12,56,353,1,57,5,
		57,357,8,57,10,57,12,57,360,9,57,1,57,1,57,4,57,364,8,57,11,57,12,57,365,
		1,57,4,57,369,8,57,11,57,12,57,370,1,57,1,57,5,57,375,8,57,10,57,12,57,
		378,9,57,3,57,380,8,57,1,58,1,58,5,58,384,8,58,10,58,12,58,387,9,58,1,
		58,1,58,1,58,1,58,1,58,5,58,394,8,58,10,58,12,58,397,9,58,1,58,3,58,400,
		8,58,1,59,1,59,1,59,1,59,5,59,406,8,59,10,59,12,59,409,9,59,1,59,1,59,
		1,60,1,60,5,60,415,8,60,10,60,12,60,418,9,60,1,60,1,60,1,61,1,61,5,61,
		424,8,61,10,61,12,61,427,9,61,1,61,1,61,1,62,4,62,432,8,62,11,62,12,62,
		433,1,62,1,62,1,63,1,63,5,63,440,8,63,10,63,12,63,443,9,63,1,155,0,64,
		1,1,3,2,5,0,7,0,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,
		13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,
		25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,
		37,79,38,81,39,83,40,85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,101,
		49,103,50,105,51,107,52,109,53,111,54,113,55,115,56,117,57,119,58,121,
		59,123,60,125,61,127,62,1,0,8,3,0,9,10,13,13,32,32,2,0,10,10,13,13,1,0,
		48,57,3,0,10,10,13,13,34,34,4,0,10,10,13,13,34,34,96,96,2,0,34,34,96,96,
		3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,460,0,1,1,0,0,0,0,
		3,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
		0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
		29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
		0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
		0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
		0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
		105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
		115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,
		125,1,0,0,0,0,127,1,0,0,0,1,130,1,0,0,0,3,138,1,0,0,0,5,142,1,0,0,0,7,
		149,1,0,0,0,9,161,1,0,0,0,11,164,1,0,0,0,13,169,1,0,0,0,15,175,1,0,0,0,
		17,179,1,0,0,0,19,186,1,0,0,0,21,195,1,0,0,0,23,198,1,0,0,0,25,205,1,0,
		0,0,27,212,1,0,0,0,29,220,1,0,0,0,31,228,1,0,0,0,33,233,1,0,0,0,35,235,
		1,0,0,0,37,237,1,0,0,0,39,239,1,0,0,0,41,241,1,0,0,0,43,243,1,0,0,0,45,
		246,1,0,0,0,47,249,1,0,0,0,49,252,1,0,0,0,51,255,1,0,0,0,53,257,1,0,0,
		0,55,259,1,0,0,0,57,262,1,0,0,0,59,265,1,0,0,0,61,267,1,0,0,0,63,269,1,
		0,0,0,65,271,1,0,0,0,67,273,1,0,0,0,69,275,1,0,0,0,71,277,1,0,0,0,73,279,
		1,0,0,0,75,281,1,0,0,0,77,283,1,0,0,0,79,285,1,0,0,0,81,287,1,0,0,0,83,
		289,1,0,0,0,85,291,1,0,0,0,87,293,1,0,0,0,89,296,1,0,0,0,91,299,1,0,0,
		0,93,302,1,0,0,0,95,305,1,0,0,0,97,308,1,0,0,0,99,310,1,0,0,0,101,312,
		1,0,0,0,103,316,1,0,0,0,105,322,1,0,0,0,107,329,1,0,0,0,109,334,1,0,0,
		0,111,348,1,0,0,0,113,351,1,0,0,0,115,379,1,0,0,0,117,399,1,0,0,0,119,
		401,1,0,0,0,121,412,1,0,0,0,123,421,1,0,0,0,125,431,1,0,0,0,127,437,1,
		0,0,0,129,131,7,0,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,
		132,133,1,0,0,0,133,134,1,0,0,0,134,135,6,0,0,0,135,2,1,0,0,0,136,139,
		3,7,3,0,137,139,3,5,2,0,138,136,1,0,0,0,138,137,1,0,0,0,139,140,1,0,0,
		0,140,141,6,1,0,0,141,4,1,0,0,0,142,146,5,35,0,0,143,145,8,1,0,0,144,143,
		1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,6,1,0,0,0,
		148,146,1,0,0,0,149,150,5,35,0,0,150,151,5,35,0,0,151,155,1,0,0,0,152,
		154,9,0,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,156,1,0,0,0,155,153,1,
		0,0,0,156,158,1,0,0,0,157,155,1,0,0,0,158,159,5,35,0,0,159,160,5,35,0,
		0,160,8,1,0,0,0,161,162,5,105,0,0,162,163,5,102,0,0,163,10,1,0,0,0,164,
		165,5,101,0,0,165,166,5,108,0,0,166,167,5,115,0,0,167,168,5,101,0,0,168,
		12,1,0,0,0,169,170,5,119,0,0,170,171,5,104,0,0,171,172,5,105,0,0,172,173,
		5,108,0,0,173,174,5,101,0,0,174,14,1,0,0,0,175,176,5,102,0,0,176,177,5,
		111,0,0,177,178,5,114,0,0,178,16,1,0,0,0,179,180,5,114,0,0,180,181,5,101,
		0,0,181,182,5,116,0,0,182,183,5,117,0,0,183,184,5,114,0,0,184,185,5,110,
		0,0,185,18,1,0,0,0,186,187,5,116,0,0,187,188,5,101,0,0,188,189,5,109,0,
		0,189,190,5,112,0,0,190,191,5,108,0,0,191,192,5,97,0,0,192,193,5,116,0,
		0,193,194,5,101,0,0,194,20,1,0,0,0,195,196,5,105,0,0,196,197,5,110,0,0,
		197,22,1,0,0,0,198,199,5,104,0,0,199,200,5,105,0,0,200,201,5,100,0,0,201,
		202,5,100,0,0,202,203,5,101,0,0,203,204,5,110,0,0,204,24,1,0,0,0,205,206,
		5,111,0,0,206,207,5,98,0,0,207,208,5,106,0,0,208,209,5,101,0,0,209,210,
		5,99,0,0,210,211,5,116,0,0,211,26,1,0,0,0,212,213,5,109,0,0,213,214,5,
		101,0,0,214,215,5,116,0,0,215,216,5,104,0,0,216,217,5,111,0,0,217,218,
		5,100,0,0,218,219,5,115,0,0,219,28,1,0,0,0,220,221,5,101,0,0,221,222,5,
		120,0,0,222,223,5,116,0,0,223,224,5,101,0,0,224,225,5,110,0,0,225,226,
		5,100,0,0,226,227,5,115,0,0,227,30,1,0,0,0,228,229,5,110,0,0,229,230,5,
		117,0,0,230,231,5,108,0,0,231,232,5,108,0,0,232,32,1,0,0,0,233,234,5,42,
		0,0,234,34,1,0,0,0,235,236,5,47,0,0,236,36,1,0,0,0,237,238,5,43,0,0,238,
		38,1,0,0,0,239,240,5,45,0,0,240,40,1,0,0,0,241,242,5,37,0,0,242,42,1,0,
		0,0,243,244,5,38,0,0,244,245,5,38,0,0,245,44,1,0,0,0,246,247,5,124,0,0,
		247,248,5,124,0,0,248,46,1,0,0,0,249,250,5,61,0,0,250,251,5,61,0,0,251,
		48,1,0,0,0,252,253,5,33,0,0,253,254,5,61,0,0,254,50,1,0,0,0,255,256,5,
		62,0,0,256,52,1,0,0,0,257,258,5,60,0,0,258,54,1,0,0,0,259,260,5,62,0,0,
		260,261,5,61,0,0,261,56,1,0,0,0,262,263,5,60,0,0,263,264,5,61,0,0,264,
		58,1,0,0,0,265,266,5,33,0,0,266,60,1,0,0,0,267,268,5,63,0,0,268,62,1,0,
		0,0,269,270,5,40,0,0,270,64,1,0,0,0,271,272,5,41,0,0,272,66,1,0,0,0,273,
		274,5,123,0,0,274,68,1,0,0,0,275,276,5,125,0,0,276,70,1,0,0,0,277,278,
		5,91,0,0,278,72,1,0,0,0,279,280,5,93,0,0,280,74,1,0,0,0,281,282,5,59,0,
		0,282,76,1,0,0,0,283,284,5,46,0,0,284,78,1,0,0,0,285,286,5,44,0,0,286,
		80,1,0,0,0,287,288,5,58,0,0,288,82,1,0,0,0,289,290,5,10,0,0,290,84,1,0,
		0,0,291,292,5,61,0,0,292,86,1,0,0,0,293,294,5,43,0,0,294,295,5,61,0,0,
		295,88,1,0,0,0,296,297,5,42,0,0,297,298,5,61,0,0,298,90,1,0,0,0,299,300,
		5,47,0,0,300,301,5,61,0,0,301,92,1,0,0,0,302,303,5,37,0,0,303,304,5,61,
		0,0,304,94,1,0,0,0,305,306,5,45,0,0,306,307,5,61,0,0,307,96,1,0,0,0,308,
		309,5,34,0,0,309,98,1,0,0,0,310,311,5,36,0,0,311,100,1,0,0,0,312,313,5,
		105,0,0,313,314,5,110,0,0,314,315,5,116,0,0,315,102,1,0,0,0,316,317,5,
		102,0,0,317,318,5,108,0,0,318,319,5,111,0,0,319,320,5,97,0,0,320,321,5,
		116,0,0,321,104,1,0,0,0,322,323,5,115,0,0,323,324,5,116,0,0,324,325,5,
		114,0,0,325,326,5,105,0,0,326,327,5,110,0,0,327,328,5,103,0,0,328,106,
		1,0,0,0,329,330,5,98,0,0,330,331,5,111,0,0,331,332,5,111,0,0,332,333,5,
		108,0,0,333,108,1,0,0,0,334,335,5,118,0,0,335,336,5,111,0,0,336,337,5,
		105,0,0,337,338,5,100,0,0,338,110,1,0,0,0,339,340,5,116,0,0,340,341,5,
		114,0,0,341,342,5,117,0,0,342,349,5,101,0,0,343,344,5,102,0,0,344,345,
		5,97,0,0,345,346,5,108,0,0,346,347,5,115,0,0,347,349,5,101,0,0,348,339,
		1,0,0,0,348,343,1,0,0,0,349,112,1,0,0,0,350,352,7,2,0,0,351,350,1,0,0,
		0,352,353,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,114,1,0,0,0,355,
		357,7,2,0,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,
		0,0,0,359,361,1,0,0,0,360,358,1,0,0,0,361,363,5,46,0,0,362,364,7,2,0,0,
		363,362,1,0,0,0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,380,
		1,0,0,0,367,369,7,2,0,0,368,367,1,0,0,0,369,370,1,0,0,0,370,368,1,0,0,
		0,370,371,1,0,0,0,371,372,1,0,0,0,372,376,5,46,0,0,373,375,7,2,0,0,374,
		373,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,380,1,
		0,0,0,378,376,1,0,0,0,379,358,1,0,0,0,379,368,1,0,0,0,380,116,1,0,0,0,
		381,385,5,34,0,0,382,384,8,3,0,0,383,382,1,0,0,0,384,387,1,0,0,0,385,383,
		1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,385,1,0,0,0,388,400,5,34,0,
		0,389,390,5,36,0,0,390,391,5,34,0,0,391,395,1,0,0,0,392,394,8,4,0,0,393,
		392,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,398,1,
		0,0,0,397,395,1,0,0,0,398,400,5,34,0,0,399,381,1,0,0,0,399,389,1,0,0,0,
		400,118,1,0,0,0,401,402,5,36,0,0,402,403,5,34,0,0,403,407,1,0,0,0,404,
		406,8,5,0,0,405,404,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,
		0,0,0,408,410,1,0,0,0,409,407,1,0,0,0,410,411,5,96,0,0,411,120,1,0,0,0,
		412,416,5,180,0,0,413,415,8,5,0,0,414,413,1,0,0,0,415,418,1,0,0,0,416,
		414,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,416,1,0,0,0,419,420,5,
		96,0,0,420,122,1,0,0,0,421,425,5,180,0,0,422,424,8,5,0,0,423,422,1,0,0,
		0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,
		425,1,0,0,0,428,429,5,34,0,0,429,124,1,0,0,0,430,432,7,0,0,0,431,430,1,
		0,0,0,432,433,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,
		435,436,6,62,0,0,436,126,1,0,0,0,437,441,7,6,0,0,438,440,7,7,0,0,439,438,
		1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,128,1,0,0,
		0,443,441,1,0,0,0,20,0,132,138,146,155,348,353,358,365,370,376,379,385,
		395,399,407,416,425,433,441,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
