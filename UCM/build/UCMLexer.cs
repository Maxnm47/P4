//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UCM.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UCMLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, TEMPLATE_KEYWORD=8, 
		IN=9, HIDDEN_=10, OBJECT_KEYWORD=11, FUNCTIONS_KEYWORD=12, EXTENDS_KEYWORD=13, 
		THIS_KEYWORD=14, NULL=15, MULT=16, DIV=17, PLUS=18, MINUS=19, MOD=20, 
		AND=21, OR=22, EQ=23, NEQ=24, GT=25, LT=26, GTE=27, LTE=28, NOT=29, QUESTION=30, 
		LPAREN=31, RPAREN=32, LCURLY=33, RCURLY=34, LBRACKET=35, RBRACKET=36, 
		SEMI=37, DOT=38, COMMA=39, COLON=40, NEWLINE=41, ASSIGN=42, PLUSASSIGN=43, 
		MULTASSIGN=44, DIVASSIGN=45, MODASSIGN=46, MINUSASSIGN=47, QUOTE=48, DOLLAR=49, 
		INT_T=50, FLOAT_T=51, STRING_T=52, BOOL_T=53, VOID_T=54, BOOL=55, INT=56, 
		FLOAT=57, SIMPLE_STRING=58, STRING_START=59, STRING_MIDDLE=60, STRING_END=61, 
		SPACES=62, ID=63;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WS", "COMMENT", "LINE_COMMENT", "BLOCK_COMMENT", "IF", "ELSE", "WHILE", 
		"FOR", "RETURN", "TEMPLATE_KEYWORD", "IN", "HIDDEN_", "OBJECT_KEYWORD", 
		"FUNCTIONS_KEYWORD", "EXTENDS_KEYWORD", "THIS_KEYWORD", "NULL", "MULT", 
		"DIV", "PLUS", "MINUS", "MOD", "AND", "OR", "EQ", "NEQ", "GT", "LT", "GTE", 
		"LTE", "NOT", "QUESTION", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRACKET", 
		"RBRACKET", "SEMI", "DOT", "COMMA", "COLON", "NEWLINE", "ASSIGN", "PLUSASSIGN", 
		"MULTASSIGN", "DIVASSIGN", "MODASSIGN", "MINUSASSIGN", "QUOTE", "DOLLAR", 
		"INT_T", "FLOAT_T", "STRING_T", "BOOL_T", "VOID_T", "BOOL", "INT", "FLOAT", 
		"SIMPLE_STRING", "STRING_START", "STRING_MIDDLE", "STRING_END", "SPACES", 
		"ID"
	};


	public UCMLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public UCMLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'if'", "'else'", "'while'", "'for'", "'return'", "'template'", 
		"'in'", "'hidden'", "'object'", "'methods'", "'extends'", "'this'", "'null'", 
		"'*'", "'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'!'", "'?'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "';'", "'.'", "','", "':'", "'\\n'", "'='", "'+='", "'*='", "'/='", 
		"'%='", "'-='", "'\"'", "'$'", "'int'", "'float'", "'string'", "'bool'", 
		"'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "IF", "ELSE", "WHILE", "FOR", "RETURN", "TEMPLATE_KEYWORD", 
		"IN", "HIDDEN_", "OBJECT_KEYWORD", "FUNCTIONS_KEYWORD", "EXTENDS_KEYWORD", 
		"THIS_KEYWORD", "NULL", "MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", 
		"OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", "QUESTION", "LPAREN", 
		"RPAREN", "LCURLY", "RCURLY", "LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", 
		"COLON", "NEWLINE", "ASSIGN", "PLUSASSIGN", "MULTASSIGN", "DIVASSIGN", 
		"MODASSIGN", "MINUSASSIGN", "QUOTE", "DOLLAR", "INT_T", "FLOAT_T", "STRING_T", 
		"BOOL_T", "VOID_T", "BOOL", "INT", "FLOAT", "SIMPLE_STRING", "STRING_START", 
		"STRING_MIDDLE", "STRING_END", "SPACES", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UCM.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UCMLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,63,451,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,1,0,4,0,133,8,0,11,0,12,0,134,1,0,1,0,1,1,1,1,3,1,141,8,
		1,1,1,1,1,1,2,1,2,5,2,147,8,2,10,2,12,2,150,9,2,1,3,1,3,1,3,1,3,5,3,156,
		8,3,10,3,12,3,159,9,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,
		1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
		1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
		1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
		1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,
		1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
		1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,
		1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,
		1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,
		1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,
		1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,356,8,56,1,57,4,
		57,359,8,57,11,57,12,57,360,1,58,5,58,364,8,58,10,58,12,58,367,9,58,1,
		58,1,58,4,58,371,8,58,11,58,12,58,372,1,58,4,58,376,8,58,11,58,12,58,377,
		1,58,1,58,5,58,382,8,58,10,58,12,58,385,9,58,3,58,387,8,58,1,59,1,59,5,
		59,391,8,59,10,59,12,59,394,9,59,1,59,1,59,1,59,1,59,1,59,5,59,401,8,59,
		10,59,12,59,404,9,59,1,59,3,59,407,8,59,1,60,1,60,1,60,1,60,5,60,413,8,
		60,10,60,12,60,416,9,60,1,60,1,60,1,61,1,61,5,61,422,8,61,10,61,12,61,
		425,9,61,1,61,1,61,1,62,1,62,5,62,431,8,62,10,62,12,62,434,9,62,1,62,1,
		62,1,63,4,63,439,8,63,11,63,12,63,440,1,63,1,63,1,64,1,64,5,64,447,8,64,
		10,64,12,64,450,9,64,1,157,0,65,1,1,3,2,5,0,7,0,9,3,11,4,13,5,15,6,17,
		7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,
		43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,
		67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,40,85,41,87,42,89,43,
		91,44,93,45,95,46,97,47,99,48,101,49,103,50,105,51,107,52,109,53,111,54,
		113,55,115,56,117,57,119,58,121,59,123,60,125,61,127,62,129,63,1,0,8,3,
		0,9,10,13,13,32,32,2,0,10,10,13,13,1,0,48,57,3,0,10,10,13,13,34,34,4,0,
		10,10,13,13,34,34,96,96,2,0,34,34,96,96,3,0,65,90,95,95,97,122,4,0,48,
		57,65,90,95,95,97,122,467,0,1,1,0,0,0,0,3,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
		0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
		23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
		0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
		0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
		0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
		1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
		1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,
		1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,
		1,0,0,0,1,132,1,0,0,0,3,140,1,0,0,0,5,144,1,0,0,0,7,151,1,0,0,0,9,163,
		1,0,0,0,11,166,1,0,0,0,13,171,1,0,0,0,15,177,1,0,0,0,17,181,1,0,0,0,19,
		188,1,0,0,0,21,197,1,0,0,0,23,200,1,0,0,0,25,207,1,0,0,0,27,214,1,0,0,
		0,29,222,1,0,0,0,31,230,1,0,0,0,33,235,1,0,0,0,35,240,1,0,0,0,37,242,1,
		0,0,0,39,244,1,0,0,0,41,246,1,0,0,0,43,248,1,0,0,0,45,250,1,0,0,0,47,253,
		1,0,0,0,49,256,1,0,0,0,51,259,1,0,0,0,53,262,1,0,0,0,55,264,1,0,0,0,57,
		266,1,0,0,0,59,269,1,0,0,0,61,272,1,0,0,0,63,274,1,0,0,0,65,276,1,0,0,
		0,67,278,1,0,0,0,69,280,1,0,0,0,71,282,1,0,0,0,73,284,1,0,0,0,75,286,1,
		0,0,0,77,288,1,0,0,0,79,290,1,0,0,0,81,292,1,0,0,0,83,294,1,0,0,0,85,296,
		1,0,0,0,87,298,1,0,0,0,89,300,1,0,0,0,91,303,1,0,0,0,93,306,1,0,0,0,95,
		309,1,0,0,0,97,312,1,0,0,0,99,315,1,0,0,0,101,317,1,0,0,0,103,319,1,0,
		0,0,105,323,1,0,0,0,107,329,1,0,0,0,109,336,1,0,0,0,111,341,1,0,0,0,113,
		355,1,0,0,0,115,358,1,0,0,0,117,386,1,0,0,0,119,406,1,0,0,0,121,408,1,
		0,0,0,123,419,1,0,0,0,125,428,1,0,0,0,127,438,1,0,0,0,129,444,1,0,0,0,
		131,133,7,0,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,
		1,0,0,0,135,136,1,0,0,0,136,137,6,0,0,0,137,2,1,0,0,0,138,141,3,7,3,0,
		139,141,3,5,2,0,140,138,1,0,0,0,140,139,1,0,0,0,141,142,1,0,0,0,142,143,
		6,1,0,0,143,4,1,0,0,0,144,148,5,35,0,0,145,147,8,1,0,0,146,145,1,0,0,0,
		147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,6,1,0,0,0,150,148,
		1,0,0,0,151,152,5,35,0,0,152,153,5,35,0,0,153,157,1,0,0,0,154,156,9,0,
		0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,158,1,0,0,0,157,155,1,0,0,0,158,
		160,1,0,0,0,159,157,1,0,0,0,160,161,5,35,0,0,161,162,5,35,0,0,162,8,1,
		0,0,0,163,164,5,105,0,0,164,165,5,102,0,0,165,10,1,0,0,0,166,167,5,101,
		0,0,167,168,5,108,0,0,168,169,5,115,0,0,169,170,5,101,0,0,170,12,1,0,0,
		0,171,172,5,119,0,0,172,173,5,104,0,0,173,174,5,105,0,0,174,175,5,108,
		0,0,175,176,5,101,0,0,176,14,1,0,0,0,177,178,5,102,0,0,178,179,5,111,0,
		0,179,180,5,114,0,0,180,16,1,0,0,0,181,182,5,114,0,0,182,183,5,101,0,0,
		183,184,5,116,0,0,184,185,5,117,0,0,185,186,5,114,0,0,186,187,5,110,0,
		0,187,18,1,0,0,0,188,189,5,116,0,0,189,190,5,101,0,0,190,191,5,109,0,0,
		191,192,5,112,0,0,192,193,5,108,0,0,193,194,5,97,0,0,194,195,5,116,0,0,
		195,196,5,101,0,0,196,20,1,0,0,0,197,198,5,105,0,0,198,199,5,110,0,0,199,
		22,1,0,0,0,200,201,5,104,0,0,201,202,5,105,0,0,202,203,5,100,0,0,203,204,
		5,100,0,0,204,205,5,101,0,0,205,206,5,110,0,0,206,24,1,0,0,0,207,208,5,
		111,0,0,208,209,5,98,0,0,209,210,5,106,0,0,210,211,5,101,0,0,211,212,5,
		99,0,0,212,213,5,116,0,0,213,26,1,0,0,0,214,215,5,109,0,0,215,216,5,101,
		0,0,216,217,5,116,0,0,217,218,5,104,0,0,218,219,5,111,0,0,219,220,5,100,
		0,0,220,221,5,115,0,0,221,28,1,0,0,0,222,223,5,101,0,0,223,224,5,120,0,
		0,224,225,5,116,0,0,225,226,5,101,0,0,226,227,5,110,0,0,227,228,5,100,
		0,0,228,229,5,115,0,0,229,30,1,0,0,0,230,231,5,116,0,0,231,232,5,104,0,
		0,232,233,5,105,0,0,233,234,5,115,0,0,234,32,1,0,0,0,235,236,5,110,0,0,
		236,237,5,117,0,0,237,238,5,108,0,0,238,239,5,108,0,0,239,34,1,0,0,0,240,
		241,5,42,0,0,241,36,1,0,0,0,242,243,5,47,0,0,243,38,1,0,0,0,244,245,5,
		43,0,0,245,40,1,0,0,0,246,247,5,45,0,0,247,42,1,0,0,0,248,249,5,37,0,0,
		249,44,1,0,0,0,250,251,5,38,0,0,251,252,5,38,0,0,252,46,1,0,0,0,253,254,
		5,124,0,0,254,255,5,124,0,0,255,48,1,0,0,0,256,257,5,61,0,0,257,258,5,
		61,0,0,258,50,1,0,0,0,259,260,5,33,0,0,260,261,5,61,0,0,261,52,1,0,0,0,
		262,263,5,62,0,0,263,54,1,0,0,0,264,265,5,60,0,0,265,56,1,0,0,0,266,267,
		5,62,0,0,267,268,5,61,0,0,268,58,1,0,0,0,269,270,5,60,0,0,270,271,5,61,
		0,0,271,60,1,0,0,0,272,273,5,33,0,0,273,62,1,0,0,0,274,275,5,63,0,0,275,
		64,1,0,0,0,276,277,5,40,0,0,277,66,1,0,0,0,278,279,5,41,0,0,279,68,1,0,
		0,0,280,281,5,123,0,0,281,70,1,0,0,0,282,283,5,125,0,0,283,72,1,0,0,0,
		284,285,5,91,0,0,285,74,1,0,0,0,286,287,5,93,0,0,287,76,1,0,0,0,288,289,
		5,59,0,0,289,78,1,0,0,0,290,291,5,46,0,0,291,80,1,0,0,0,292,293,5,44,0,
		0,293,82,1,0,0,0,294,295,5,58,0,0,295,84,1,0,0,0,296,297,5,10,0,0,297,
		86,1,0,0,0,298,299,5,61,0,0,299,88,1,0,0,0,300,301,5,43,0,0,301,302,5,
		61,0,0,302,90,1,0,0,0,303,304,5,42,0,0,304,305,5,61,0,0,305,92,1,0,0,0,
		306,307,5,47,0,0,307,308,5,61,0,0,308,94,1,0,0,0,309,310,5,37,0,0,310,
		311,5,61,0,0,311,96,1,0,0,0,312,313,5,45,0,0,313,314,5,61,0,0,314,98,1,
		0,0,0,315,316,5,34,0,0,316,100,1,0,0,0,317,318,5,36,0,0,318,102,1,0,0,
		0,319,320,5,105,0,0,320,321,5,110,0,0,321,322,5,116,0,0,322,104,1,0,0,
		0,323,324,5,102,0,0,324,325,5,108,0,0,325,326,5,111,0,0,326,327,5,97,0,
		0,327,328,5,116,0,0,328,106,1,0,0,0,329,330,5,115,0,0,330,331,5,116,0,
		0,331,332,5,114,0,0,332,333,5,105,0,0,333,334,5,110,0,0,334,335,5,103,
		0,0,335,108,1,0,0,0,336,337,5,98,0,0,337,338,5,111,0,0,338,339,5,111,0,
		0,339,340,5,108,0,0,340,110,1,0,0,0,341,342,5,118,0,0,342,343,5,111,0,
		0,343,344,5,105,0,0,344,345,5,100,0,0,345,112,1,0,0,0,346,347,5,116,0,
		0,347,348,5,114,0,0,348,349,5,117,0,0,349,356,5,101,0,0,350,351,5,102,
		0,0,351,352,5,97,0,0,352,353,5,108,0,0,353,354,5,115,0,0,354,356,5,101,
		0,0,355,346,1,0,0,0,355,350,1,0,0,0,356,114,1,0,0,0,357,359,7,2,0,0,358,
		357,1,0,0,0,359,360,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,116,1,
		0,0,0,362,364,7,2,0,0,363,362,1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,
		365,366,1,0,0,0,366,368,1,0,0,0,367,365,1,0,0,0,368,370,5,46,0,0,369,371,
		7,2,0,0,370,369,1,0,0,0,371,372,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,
		0,373,387,1,0,0,0,374,376,7,2,0,0,375,374,1,0,0,0,376,377,1,0,0,0,377,
		375,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,383,5,46,0,0,380,382,7,
		2,0,0,381,380,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,
		384,387,1,0,0,0,385,383,1,0,0,0,386,365,1,0,0,0,386,375,1,0,0,0,387,118,
		1,0,0,0,388,392,5,34,0,0,389,391,8,3,0,0,390,389,1,0,0,0,391,394,1,0,0,
		0,392,390,1,0,0,0,392,393,1,0,0,0,393,395,1,0,0,0,394,392,1,0,0,0,395,
		407,5,34,0,0,396,397,5,36,0,0,397,398,5,34,0,0,398,402,1,0,0,0,399,401,
		8,4,0,0,400,399,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,
		0,403,405,1,0,0,0,404,402,1,0,0,0,405,407,5,34,0,0,406,388,1,0,0,0,406,
		396,1,0,0,0,407,120,1,0,0,0,408,409,5,36,0,0,409,410,5,34,0,0,410,414,
		1,0,0,0,411,413,8,5,0,0,412,411,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,
		0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,418,5,96,0,0,418,
		122,1,0,0,0,419,423,5,180,0,0,420,422,8,5,0,0,421,420,1,0,0,0,422,425,
		1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,423,1,0,0,
		0,426,427,5,96,0,0,427,124,1,0,0,0,428,432,5,180,0,0,429,431,8,5,0,0,430,
		429,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,435,1,
		0,0,0,434,432,1,0,0,0,435,436,5,34,0,0,436,126,1,0,0,0,437,439,7,0,0,0,
		438,437,1,0,0,0,439,440,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,442,
		1,0,0,0,442,443,6,63,0,0,443,128,1,0,0,0,444,448,7,6,0,0,445,447,7,7,0,
		0,446,445,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,
		130,1,0,0,0,450,448,1,0,0,0,20,0,134,140,148,157,355,360,365,372,377,383,
		386,392,402,406,414,423,432,440,448,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
