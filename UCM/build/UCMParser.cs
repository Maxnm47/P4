//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UCM.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UCMParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, TEMPLATE_KEYWORD=8, 
		IN=9, HIDDEN_=10, OBJECT_KEYWORD=11, FUNCTIONS_KEYWORD=12, EXTENDS_KEYWORD=13, 
		THIS_KEYWORD=14, NULL=15, MULT=16, DIV=17, PLUS=18, MINUS=19, MOD=20, 
		AND=21, OR=22, EQ=23, NEQ=24, GT=25, LT=26, GTE=27, LTE=28, NOT=29, QUESTION=30, 
		LPAREN=31, RPAREN=32, LCURLY=33, RCURLY=34, LBRACKET=35, RBRACKET=36, 
		SEMI=37, DOT=38, COMMA=39, COLON=40, NEWLINE=41, ASSIGN=42, QUOTE=43, 
		DOLLAR=44, INT_T=45, FLOAT_T=46, STRING_T=47, BOOL_T=48, VOID_T=49, BOOL=50, 
		INT=51, FLOAT=52, ESCAPE_SEQUENCE=53, ID=54;
	public const int
		RULE_object_t = 0, RULE_array_t = 1, RULE_primitiveType = 2, RULE_complexType = 3, 
		RULE_type = 4, RULE_int = 5, RULE_float = 6, RULE_num = 7, RULE_value = 8, 
		RULE_augmentedString = 9, RULE_concatanatedString = 10, RULE_string = 11, 
		RULE_id = 12, RULE_typedId = 13, RULE_adapting = 14, RULE_object = 15, 
		RULE_field = 16, RULE_array = 17, RULE_evaluaterArray = 18, RULE_templateField = 19, 
		RULE_templateExtention = 20, RULE_templateDefenition = 21, RULE_functionCollection = 22, 
		RULE_method = 23, RULE_functionCollectionCall = 24, RULE_methodCall = 25, 
		RULE_expr = 26, RULE_numExpr = 27, RULE_boolExpr = 28, RULE_compExpr = 29, 
		RULE_ifStatement = 30, RULE_conditional = 31, RULE_whileLoop = 32, RULE_forLoop = 33, 
		RULE_listConstruction = 34, RULE_statementList = 35, RULE_statement = 36, 
		RULE_assignment = 37, RULE_objectDefenition = 38, RULE_arrayDefenition = 39, 
		RULE_declaration = 40, RULE_root = 41, RULE_start = 42;
	public static readonly string[] ruleNames = {
		"object_t", "array_t", "primitiveType", "complexType", "type", "int", 
		"float", "num", "value", "augmentedString", "concatanatedString", "string", 
		"id", "typedId", "adapting", "object", "field", "array", "evaluaterArray", 
		"templateField", "templateExtention", "templateDefenition", "functionCollection", 
		"method", "functionCollectionCall", "methodCall", "expr", "numExpr", "boolExpr", 
		"compExpr", "ifStatement", "conditional", "whileLoop", "forLoop", "listConstruction", 
		"statementList", "statement", "assignment", "objectDefenition", "arrayDefenition", 
		"declaration", "root", "start"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'if'", "'else'", "'while'", "'for'", "'return'", "'template'", 
		"'in'", "'hidden'", "'object'", "'methods'", "'extends'", "'this'", "'null'", 
		"'*'", "'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'!'", "'?'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "';'", "'.'", "','", "':'", "'\\n'", "'='", "'\"'", "'$'", "'int'", 
		"'float'", "'string'", "'bool'", "'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "IF", "ELSE", "WHILE", "FOR", "RETURN", "TEMPLATE_KEYWORD", 
		"IN", "HIDDEN_", "OBJECT_KEYWORD", "FUNCTIONS_KEYWORD", "EXTENDS_KEYWORD", 
		"THIS_KEYWORD", "NULL", "MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", 
		"OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", "QUESTION", "LPAREN", 
		"RPAREN", "LCURLY", "RCURLY", "LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", 
		"COLON", "NEWLINE", "ASSIGN", "QUOTE", "DOLLAR", "INT_T", "FLOAT_T", "STRING_T", 
		"BOOL_T", "VOID_T", "BOOL", "INT", "FLOAT", "ESCAPE_SEQUENCE", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UCM.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UCMParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UCMParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UCMParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Object_tContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_KEYWORD() { return GetToken(UCMParser.OBJECT_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UCMParser.ID, 0); }
		public Object_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_t(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_tContext object_t() {
		Object_tContext _localctx = new Object_tContext(Context, State);
		EnterRule(_localctx, 0, RULE_object_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( !(_la==OBJECT_KEYWORD || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_tContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(UCMParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(UCMParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(UCMParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(UCMParser.RBRACKET, i);
		}
		public Array_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_t(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_tContext array_t() {
		Array_tContext _localctx = new Array_tContext(Context, State);
		EnterRule(_localctx, 2, RULE_array_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_T:
			case FLOAT_T:
			case BOOL_T:
			case VOID_T:
				{
				State = 88;
				primitiveType();
				}
				break;
			case OBJECT_KEYWORD:
			case ID:
				{
				State = 89;
				object_t();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 92;
				Match(LBRACKET);
				State = 93;
				Match(RBRACKET);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LBRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_T() { return GetToken(UCMParser.INT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_T() { return GetToken(UCMParser.FLOAT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_T() { return GetToken(UCMParser.BOOL_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_T() { return GetToken(UCMParser.VOID_T, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 949978046398464L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_tContext array_t() {
			return GetRuleContext<Array_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_T() { return GetToken(UCMParser.STRING_T, 0); }
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_complexType);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				object_t();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				array_t();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				Match(STRING_T);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				complexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(UCMParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 10, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(UCMParser.FLOAT, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 12, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 14, RULE_num);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				@int();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				@float();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugmentedStringContext augmentedString() {
			return GetRuleContext<AugmentedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatanatedStringContext concatanatedString() {
			return GetRuleContext<ConcatanatedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UCMParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(UCMParser.NULL, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_value);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				augmentedString();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				concatanatedString();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 120;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 121;
				Match(BOOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 122;
				@object();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 123;
				array();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 124;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AugmentedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(UCMParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(UCMParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(UCMParser.QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LCURLY() { return GetTokens(UCMParser.LCURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY(int i) {
			return GetToken(UCMParser.LCURLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RCURLY() { return GetTokens(UCMParser.RCURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY(int i) {
			return GetToken(UCMParser.RCURLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_SEQUENCE() { return GetTokens(UCMParser.ESCAPE_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SEQUENCE(int i) {
			return GetToken(UCMParser.ESCAPE_SEQUENCE, i);
		}
		public AugmentedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_augmentedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAugmentedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AugmentedStringContext augmentedString() {
		AugmentedStringContext _localctx = new AugmentedStringContext(Context, State);
		EnterRule(_localctx, 18, RULE_augmentedString);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(DOLLAR);
			State = 128;
			Match(QUOTE);
			State = 149;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 147;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 131;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
						case 1:
							{
							State = 129;
							Match(ESCAPE_SEQUENCE);
							}
							break;
						case 2:
							{
							State = 130;
							MatchWildcard();
							}
							break;
						}
						{
						State = 133;
						Match(LCURLY);
						State = 134;
						expr(0);
						State = 135;
						Match(RCURLY);
						}
						}
						break;
					case 2:
						{
						State = 139;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
						case 1:
							{
							State = 137;
							Match(ESCAPE_SEQUENCE);
							}
							break;
						case 2:
							{
							State = 138;
							MatchWildcard();
							}
							break;
						}
						State = 145;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
						case 1:
							{
							State = 141;
							Match(LCURLY);
							State = 142;
							expr(0);
							State = 143;
							Match(RCURLY);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 152;
			Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatanatedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(UCMParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(UCMParser.PLUS, i);
		}
		public ConcatanatedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatanatedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatanatedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatanatedStringContext concatanatedString() {
		ConcatanatedStringContext _localctx = new ConcatanatedStringContext(Context, State);
		EnterRule(_localctx, 20, RULE_concatanatedString);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			@string();
			State = 159;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 155;
					Match(PLUS);
					State = 156;
					@string();
					}
					} 
				}
				State = 161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(UCMParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(UCMParser.QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_SEQUENCE() { return GetTokens(UCMParser.ESCAPE_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SEQUENCE(int i) {
			return GetToken(UCMParser.ESCAPE_SEQUENCE, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 22, RULE_string);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(QUOTE);
			State = 167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					State = 165;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						State = 163;
						Match(ESCAPE_SEQUENCE);
						}
						break;
					case 2:
						{
						State = 164;
						MatchWildcard();
						}
						break;
					}
					} 
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 170;
			Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UCMParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 24, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public TypedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedIdContext typedId() {
		TypedIdContext _localctx = new TypedIdContext(Context, State);
		EnterRule(_localctx, 26, RULE_typedId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			type();
			State = 175;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdaptingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AdaptingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adapting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdapting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdaptingContext adapting() {
		AdaptingContext _localctx = new AdaptingContext(Context, State);
		EnterRule(_localctx, 28, RULE_adapting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AdaptingContext adapting() {
			return GetRuleContext<AdaptingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 30, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 179;
				adapting();
				}
			}

			State = 182;
			Match(LCURLY);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19105114044238848L) != 0)) {
				{
				{
				State = 183;
				field();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 189;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDDEN_() { return GetToken(UCMParser.HIDDEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 32, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HIDDEN_) {
				{
				State = 191;
				Match(HIDDEN_);
				}
			}

			State = 195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 194;
				type();
				}
				break;
			}
			State = 197;
			id();
			State = 198;
			Match(ASSIGN);
			State = 199;
			expr(0);
			State = 200;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListConstructionContext listConstruction() {
			return GetRuleContext<ListConstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 34, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(LBRACKET);
			State = 213;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case QUOTE:
			case DOLLAR:
			case BOOL:
			case INT:
			case FLOAT:
			case ID:
				{
				State = 203;
				expr(0);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 204;
					Match(COMMA);
					State = 205;
					expr(0);
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FOR:
				{
				State = 211;
				listConstruction();
				}
				break;
			case RBRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 215;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluaterArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext[] boolExpr() {
			return GetRuleContexts<BoolExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr(int i) {
			return GetRuleContext<BoolExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public EvaluaterArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluaterArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluaterArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluaterArrayContext evaluaterArray() {
		EvaluaterArrayContext _localctx = new EvaluaterArrayContext(Context, State);
		EnterRule(_localctx, 36, RULE_evaluaterArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(LBRACKET);
			State = 233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case MINUS:
			case NOT:
			case LPAREN:
			case BOOL:
			case INT:
			case FLOAT:
			case ID:
				{
				State = 220;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 218;
					boolExpr(0);
					}
					break;
				case 2:
					{
					State = 219;
					id();
					}
					break;
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 222;
					Match(COMMA);
					State = 225;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						State = 223;
						boolExpr(0);
						}
						break;
					case 2:
						{
						State = 224;
						id();
						}
						break;
					}
					}
					}
					State = 231;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 235;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdContext typedId() {
			return GetRuleContext<TypedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UCMParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluaterArrayContext evaluaterArray() {
			return GetRuleContext<EvaluaterArrayContext>(0);
		}
		public TemplateFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateFieldContext templateField() {
		TemplateFieldContext _localctx = new TemplateFieldContext(Context, State);
		EnterRule(_localctx, 38, RULE_templateField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			typedId();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 238;
				Match(ASSIGN);
				State = 239;
				value();
				}
			}

			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 242;
				Match(COLON);
				State = 243;
				evaluaterArray();
				}
			}

			State = 246;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateExtentionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS_KEYWORD() { return GetToken(UCMParser.EXTENDS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public TemplateExtentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateExtention; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateExtention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateExtentionContext templateExtention() {
		TemplateExtentionContext _localctx = new TemplateExtentionContext(Context, State);
		EnterRule(_localctx, 40, RULE_templateExtention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(EXTENDS_KEYWORD);
			State = 249;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefenitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE_KEYWORD() { return GetToken(UCMParser.TEMPLATE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateExtentionContext templateExtention() {
			return GetRuleContext<TemplateExtentionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateFieldContext[] templateField() {
			return GetRuleContexts<TemplateFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateFieldContext templateField(int i) {
			return GetRuleContext<TemplateFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public TemplateDefenitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefenition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefenition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefenitionContext templateDefenition() {
		TemplateDefenitionContext _localctx = new TemplateDefenitionContext(Context, State);
		EnterRule(_localctx, 42, RULE_templateDefenition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(TEMPLATE_KEYWORD);
			State = 252;
			id();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS_KEYWORD) {
				{
				State = 253;
				templateExtention();
				}
			}

			State = 256;
			Match(LCURLY);
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19105114044237824L) != 0)) {
				{
				State = 259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 257;
					templateField();
					}
					break;
				case 2:
					{
					State = 258;
					method();
					}
					break;
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 264;
			Match(RCURLY);
			State = 265;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS_KEYWORD() { return GetToken(UCMParser.FUNCTIONS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public FunctionCollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCollectionContext functionCollection() {
		FunctionCollectionContext _localctx = new FunctionCollectionContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionCollection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(FUNCTIONS_KEYWORD);
			State = 268;
			id();
			State = 269;
			Match(LCURLY);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19105114044237824L) != 0)) {
				{
				{
				State = 270;
				method();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 276;
			Match(RCURLY);
			State = 277;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdContext[] typedId() {
			return GetRuleContexts<TypedIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdContext typedId(int i) {
			return GetRuleContext<TypedIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 46, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			typedId();
			State = 280;
			Match(LPAREN);
			State = 290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBJECT_KEYWORD:
			case INT_T:
			case FLOAT_T:
			case STRING_T:
			case BOOL_T:
			case VOID_T:
			case ID:
				{
				State = 281;
				typedId();
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 282;
					Match(COMMA);
					State = 283;
					typedId();
					}
					}
					State = 288;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 292;
			Match(RPAREN);
			State = 293;
			Match(LCURLY);
			State = 294;
			statementList();
			State = 295;
			Match(RCURLY);
			State = 296;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCollectionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(UCMParser.DOT, 0); }
		public FunctionCollectionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCollectionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCollectionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCollectionCallContext functionCollectionCall() {
		FunctionCollectionCallContext _localctx = new FunctionCollectionCallContext(Context, State);
		EnterRule(_localctx, 48, RULE_functionCollectionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			id();
			State = 299;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionCallContext functionCollectionCall() {
			return GetRuleContext<FunctionCollectionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 301;
				functionCollectionCall();
				}
				break;
			}
			State = 304;
			id();
			State = 305;
			Match(LPAREN);
			State = 315;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case QUOTE:
			case DOLLAR:
			case BOOL:
			case INT:
			case FLOAT:
			case ID:
				{
				State = 306;
				expr(0);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 307;
					Match(COMMA);
					State = 308;
					expr(0);
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 317;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr() {
			return GetRuleContext<NumExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 320;
				value();
				}
				break;
			case 2:
				{
				State = 321;
				id();
				}
				break;
			case 3:
				{
				State = 322;
				methodCall();
				}
				break;
			case 4:
				{
				State = 323;
				boolExpr(0);
				}
				break;
			case 5:
				{
				State = 324;
				numExpr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 327;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 328;
					Match(EQ);
					State = 329;
					expr(3);
					}
					} 
				}
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_KEYWORD() { return GetToken(UCMParser.THIS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(UCMParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext[] numExpr() {
			return GetRuleContexts<NumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr(int i) {
			return GetRuleContext<NumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(UCMParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(UCMParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(UCMParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(UCMParser.PLUS, 0); }
		public NumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumExprContext numExpr() {
		return numExpr(0);
	}

	private NumExprContext numExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumExprContext _localctx = new NumExprContext(Context, _parentState);
		NumExprContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_numExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 336;
				num();
				}
				break;
			case 2:
				{
				State = 337;
				Match(THIS_KEYWORD);
				}
				break;
			case 3:
				{
				State = 338;
				id();
				}
				break;
			case 4:
				{
				State = 339;
				methodCall();
				}
				break;
			case 5:
				{
				State = 340;
				Match(MINUS);
				State = 341;
				numExpr(4);
				}
				break;
			case 6:
				{
				State = 342;
				Match(LPAREN);
				State = 343;
				numExpr(0);
				State = 344;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 356;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 354;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						_localctx = new NumExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numExpr);
						State = 348;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 349;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1245184L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 350;
						numExpr(4);
						}
						break;
					case 2:
						{
						_localctx = new NumExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numExpr);
						State = 351;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 352;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 353;
						numExpr(3);
						}
						break;
					}
					} 
				}
				State = 358;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UCMParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_KEYWORD() { return GetToken(UCMParser.THIS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(UCMParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext[] numExpr() {
			return GetRuleContexts<NumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr(int i) {
			return GetRuleContext<NumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompExprContext compExpr() {
			return GetRuleContext<CompExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext[] boolExpr() {
			return GetRuleContexts<BoolExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr(int i) {
			return GetRuleContext<BoolExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(UCMParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(UCMParser.OR, 0); }
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		return boolExpr(0);
	}

	private BoolExprContext boolExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExprContext _localctx = new BoolExprContext(Context, _parentState);
		BoolExprContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_boolExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 360;
				Match(BOOL);
				}
				break;
			case 2:
				{
				State = 361;
				Match(THIS_KEYWORD);
				}
				break;
			case 3:
				{
				State = 362;
				id();
				}
				break;
			case 4:
				{
				State = 363;
				methodCall();
				}
				break;
			case 5:
				{
				State = 364;
				Match(NOT);
				State = 365;
				expr(0);
				}
				break;
			case 6:
				{
				State = 366;
				numExpr(0);
				State = 367;
				compExpr();
				State = 368;
				numExpr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 383;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 381;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
					case 1:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 372;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 373;
						Match(EQ);
						State = 374;
						boolExpr(4);
						}
						break;
					case 2:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 375;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 376;
						Match(AND);
						State = 377;
						boolExpr(3);
						}
						break;
					case 3:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 378;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 379;
						Match(OR);
						State = 380;
						boolExpr(2);
						}
						break;
					}
					} 
				}
				State = 385;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UCMParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UCMParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(UCMParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(UCMParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(UCMParser.NEQ, 0); }
		public CompExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompExprContext compExpr() {
		CompExprContext _localctx = new CompExprContext(Context, State);
		EnterRule(_localctx, 58, RULE_compExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(UCMParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			Match(IF);
			State = 389;
			Match(LPAREN);
			State = 390;
			boolExpr(0);
			State = 391;
			Match(RPAREN);
			State = 392;
			Match(LCURLY);
			State = 393;
			statement();
			State = 394;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext[] ifStatement() {
			return GetRuleContexts<IfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement(int i) {
			return GetRuleContext<IfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(UCMParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(UCMParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 62, RULE_conditional);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			ifStatement();
			State = 401;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 397;
					Match(ELSE);
					State = 398;
					ifStatement();
					}
					} 
				}
				State = 403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 404;
				Match(ELSE);
				State = 405;
				statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(UCMParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 64, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			Match(WHILE);
			State = 409;
			Match(LPAREN);
			State = 410;
			boolExpr(0);
			State = 411;
			Match(RPAREN);
			State = 412;
			Match(LCURLY);
			State = 413;
			statement();
			State = 414;
			Match(RCURLY);
			State = 415;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UCMParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(UCMParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 66, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(FOR);
			State = 418;
			Match(LPAREN);
			State = 419;
			id();
			State = 420;
			Match(IN);
			State = 423;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				{
				State = 421;
				array();
				}
				break;
			case ID:
				{
				State = 422;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 425;
			Match(RPAREN);
			State = 426;
			Match(LCURLY);
			State = 427;
			statement();
			State = 428;
			Match(RCURLY);
			State = 429;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListConstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UCMParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(UCMParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ListConstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listConstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListConstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListConstructionContext listConstruction() {
		ListConstructionContext _localctx = new ListConstructionContext(Context, State);
		EnterRule(_localctx, 68, RULE_listConstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(FOR);
			State = 432;
			Match(LPAREN);
			State = 433;
			id();
			State = 434;
			Match(IN);
			State = 437;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				{
				State = 435;
				array();
				}
				break;
			case ID:
				{
				State = 436;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 439;
			Match(RPAREN);
			State = 440;
			Match(LCURLY);
			State = 441;
			value();
			State = 442;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 70, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19105114044239080L) != 0)) {
				{
				{
				State = 444;
				statement();
				}
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(UCMParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_statement);
		try {
			State = 463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 450;
				conditional();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 451;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 452;
				whileLoop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 453;
				forLoop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 454;
				methodCall();
				State = 455;
				Match(SEMI);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 457;
				method();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 458;
				field();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 459;
				Match(RETURN);
				State = 460;
				expr(0);
				State = 461;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 74, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 465;
				type();
				}
				break;
			}
			State = 468;
			id();
			State = 469;
			Match(ASSIGN);
			State = 470;
			expr(0);
			State = 471;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDefenitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDDEN_() { return GetToken(UCMParser.HIDDEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		public ObjectDefenitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDefenition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDefenition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDefenitionContext objectDefenition() {
		ObjectDefenitionContext _localctx = new ObjectDefenitionContext(Context, State);
		EnterRule(_localctx, 76, RULE_objectDefenition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HIDDEN_) {
				{
				State = 473;
				Match(HIDDEN_);
				}
			}

			State = 477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 476;
				object_t();
				}
				break;
			}
			State = 479;
			id();
			State = 480;
			Match(ASSIGN);
			State = 481;
			@object();
			State = 482;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDefenitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDDEN_() { return GetToken(UCMParser.HIDDEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_tContext array_t() {
			return GetRuleContext<Array_tContext>(0);
		}
		public ArrayDefenitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDefenition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDefenition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDefenitionContext arrayDefenition() {
		ArrayDefenitionContext _localctx = new ArrayDefenitionContext(Context, State);
		EnterRule(_localctx, 78, RULE_arrayDefenition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HIDDEN_) {
				{
				State = 484;
				Match(HIDDEN_);
				}
			}

			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 487;
				array_t();
				}
				break;
			}
			State = 490;
			id();
			State = 491;
			Match(ASSIGN);
			State = 492;
			array();
			State = 493;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedIdContext typedId() {
			return GetRuleContext<TypedIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			typedId();
			State = 496;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDefenitionContext[] templateDefenition() {
			return GetRuleContexts<TemplateDefenitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDefenitionContext templateDefenition(int i) {
			return GetRuleContext<TemplateDefenitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDefenitionContext[] objectDefenition() {
			return GetRuleContexts<ObjectDefenitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDefenitionContext objectDefenition(int i) {
			return GetRuleContext<ObjectDefenitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDefenitionContext[] arrayDefenition() {
			return GetRuleContexts<ArrayDefenitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDefenitionContext arrayDefenition(int i) {
			return GetRuleContext<ArrayDefenitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionContext[] functionCollection() {
			return GetRuleContexts<FunctionCollectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionContext functionCollection(int i) {
			return GetRuleContext<FunctionCollectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 82, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19105114044243200L) != 0)) {
				{
				State = 503;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 498;
					templateDefenition();
					}
					break;
				case 2:
					{
					State = 499;
					objectDefenition();
					}
					break;
				case 3:
					{
					State = 500;
					arrayDefenition();
					}
					break;
				case 4:
					{
					State = 501;
					functionCollection();
					}
					break;
				case 5:
					{
					State = 502;
					field();
					}
					break;
				}
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RootContext root() {
			return GetRuleContext<RootContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 84, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			root();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return expr_sempred((ExprContext)_localctx, predIndex);
		case 27: return numExpr_sempred((NumExprContext)_localctx, predIndex);
		case 28: return boolExpr_sempred((BoolExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool numExpr_sempred(NumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool boolExpr_sempred(BoolExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,54,511,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,1,0,1,1,1,1,3,1,91,8,1,1,1,1,1,4,1,95,8,1,11,1,12,1,96,1,2,1,2,1,3,
		1,3,1,3,3,3,104,8,3,1,4,1,4,3,4,108,8,4,1,5,1,5,1,6,1,6,1,7,1,7,3,7,116,
		8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,126,8,8,1,9,1,9,1,9,1,9,3,9,132,
		8,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,140,8,9,1,9,1,9,1,9,1,9,3,9,146,8,9,5,
		9,148,8,9,10,9,12,9,151,9,9,1,9,1,9,1,10,1,10,1,10,5,10,158,8,10,10,10,
		12,10,161,9,10,1,11,1,11,1,11,5,11,166,8,11,10,11,12,11,169,9,11,1,11,
		1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,3,15,181,8,15,1,15,1,15,5,
		15,185,8,15,10,15,12,15,188,9,15,1,15,1,15,1,16,3,16,193,8,16,1,16,3,16,
		196,8,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,207,8,17,10,
		17,12,17,210,9,17,1,17,1,17,3,17,214,8,17,1,17,1,17,1,18,1,18,1,18,3,18,
		221,8,18,1,18,1,18,1,18,3,18,226,8,18,5,18,228,8,18,10,18,12,18,231,9,
		18,1,18,3,18,234,8,18,1,18,1,18,1,19,1,19,1,19,3,19,241,8,19,1,19,1,19,
		3,19,245,8,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,3,21,255,8,21,1,
		21,1,21,1,21,5,21,260,8,21,10,21,12,21,263,9,21,1,21,1,21,1,21,1,22,1,
		22,1,22,1,22,5,22,272,8,22,10,22,12,22,275,9,22,1,22,1,22,1,22,1,23,1,
		23,1,23,1,23,1,23,5,23,285,8,23,10,23,12,23,288,9,23,1,23,3,23,291,8,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,3,25,303,8,25,1,25,1,
		25,1,25,1,25,1,25,5,25,310,8,25,10,25,12,25,313,9,25,1,25,3,25,316,8,25,
		1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,326,8,26,1,26,1,26,1,26,5,
		26,331,8,26,10,26,12,26,334,9,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,3,27,347,8,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,355,
		8,27,10,27,12,27,358,9,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,3,28,371,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,
		28,382,8,28,10,28,12,28,385,9,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,31,1,31,1,31,5,31,400,8,31,10,31,12,31,403,9,31,1,31,1,
		31,3,31,407,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,
		1,33,1,33,1,33,1,33,3,33,424,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,
		34,1,34,1,34,1,34,1,34,3,34,438,8,34,1,34,1,34,1,34,1,34,1,34,1,35,5,35,
		446,8,35,10,35,12,35,449,9,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,1,36,1,36,3,36,464,8,36,1,37,3,37,467,8,37,1,37,1,37,1,
		37,1,37,1,37,1,38,3,38,475,8,38,1,38,3,38,478,8,38,1,38,1,38,1,38,1,38,
		1,38,1,39,3,39,486,8,39,1,39,3,39,489,8,39,1,39,1,39,1,39,1,39,1,39,1,
		40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,5,41,504,8,41,10,41,12,41,507,9,
		41,1,42,1,42,1,42,1,167,3,52,54,56,43,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,0,5,2,0,11,11,54,54,2,0,45,46,48,49,2,0,16,17,20,20,
		1,0,18,19,1,0,23,28,553,0,86,1,0,0,0,2,90,1,0,0,0,4,98,1,0,0,0,6,103,1,
		0,0,0,8,107,1,0,0,0,10,109,1,0,0,0,12,111,1,0,0,0,14,115,1,0,0,0,16,125,
		1,0,0,0,18,127,1,0,0,0,20,154,1,0,0,0,22,162,1,0,0,0,24,172,1,0,0,0,26,
		174,1,0,0,0,28,177,1,0,0,0,30,180,1,0,0,0,32,192,1,0,0,0,34,202,1,0,0,
		0,36,217,1,0,0,0,38,237,1,0,0,0,40,248,1,0,0,0,42,251,1,0,0,0,44,267,1,
		0,0,0,46,279,1,0,0,0,48,298,1,0,0,0,50,302,1,0,0,0,52,325,1,0,0,0,54,346,
		1,0,0,0,56,370,1,0,0,0,58,386,1,0,0,0,60,388,1,0,0,0,62,396,1,0,0,0,64,
		408,1,0,0,0,66,417,1,0,0,0,68,431,1,0,0,0,70,447,1,0,0,0,72,463,1,0,0,
		0,74,466,1,0,0,0,76,474,1,0,0,0,78,485,1,0,0,0,80,495,1,0,0,0,82,505,1,
		0,0,0,84,508,1,0,0,0,86,87,7,0,0,0,87,1,1,0,0,0,88,91,3,4,2,0,89,91,3,
		0,0,0,90,88,1,0,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,93,5,35,0,0,93,95,5,
		36,0,0,94,92,1,0,0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,3,1,
		0,0,0,98,99,7,1,0,0,99,5,1,0,0,0,100,104,3,0,0,0,101,104,3,2,1,0,102,104,
		5,47,0,0,103,100,1,0,0,0,103,101,1,0,0,0,103,102,1,0,0,0,104,7,1,0,0,0,
		105,108,3,4,2,0,106,108,3,6,3,0,107,105,1,0,0,0,107,106,1,0,0,0,108,9,
		1,0,0,0,109,110,5,51,0,0,110,11,1,0,0,0,111,112,5,52,0,0,112,13,1,0,0,
		0,113,116,3,10,5,0,114,116,3,12,6,0,115,113,1,0,0,0,115,114,1,0,0,0,116,
		15,1,0,0,0,117,126,3,14,7,0,118,126,3,18,9,0,119,126,3,20,10,0,120,126,
		3,22,11,0,121,126,5,50,0,0,122,126,3,30,15,0,123,126,3,34,17,0,124,126,
		5,15,0,0,125,117,1,0,0,0,125,118,1,0,0,0,125,119,1,0,0,0,125,120,1,0,0,
		0,125,121,1,0,0,0,125,122,1,0,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,
		17,1,0,0,0,127,128,5,44,0,0,128,149,5,43,0,0,129,132,5,53,0,0,130,132,
		9,0,0,0,131,129,1,0,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,
		0,133,134,5,33,0,0,134,135,3,52,26,0,135,136,5,34,0,0,136,148,1,0,0,0,
		137,140,5,53,0,0,138,140,9,0,0,0,139,137,1,0,0,0,139,138,1,0,0,0,140,145,
		1,0,0,0,141,142,5,33,0,0,142,143,3,52,26,0,143,144,5,34,0,0,144,146,1,
		0,0,0,145,141,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,131,1,0,0,0,
		147,139,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,
		1,0,0,0,151,149,1,0,0,0,152,153,5,43,0,0,153,19,1,0,0,0,154,159,3,22,11,
		0,155,156,5,18,0,0,156,158,3,22,11,0,157,155,1,0,0,0,158,161,1,0,0,0,159,
		157,1,0,0,0,159,160,1,0,0,0,160,21,1,0,0,0,161,159,1,0,0,0,162,167,5,43,
		0,0,163,166,5,53,0,0,164,166,9,0,0,0,165,163,1,0,0,0,165,164,1,0,0,0,166,
		169,1,0,0,0,167,168,1,0,0,0,167,165,1,0,0,0,168,170,1,0,0,0,169,167,1,
		0,0,0,170,171,5,43,0,0,171,23,1,0,0,0,172,173,5,54,0,0,173,25,1,0,0,0,
		174,175,3,8,4,0,175,176,3,24,12,0,176,27,1,0,0,0,177,178,3,24,12,0,178,
		29,1,0,0,0,179,181,3,28,14,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,1,
		0,0,0,182,186,5,33,0,0,183,185,3,32,16,0,184,183,1,0,0,0,185,188,1,0,0,
		0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,
		190,5,34,0,0,190,31,1,0,0,0,191,193,5,10,0,0,192,191,1,0,0,0,192,193,1,
		0,0,0,193,195,1,0,0,0,194,196,3,8,4,0,195,194,1,0,0,0,195,196,1,0,0,0,
		196,197,1,0,0,0,197,198,3,24,12,0,198,199,5,42,0,0,199,200,3,52,26,0,200,
		201,5,37,0,0,201,33,1,0,0,0,202,213,5,35,0,0,203,208,3,52,26,0,204,205,
		5,39,0,0,205,207,3,52,26,0,206,204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,
		0,0,208,209,1,0,0,0,209,214,1,0,0,0,210,208,1,0,0,0,211,214,3,68,34,0,
		212,214,1,0,0,0,213,203,1,0,0,0,213,211,1,0,0,0,213,212,1,0,0,0,214,215,
		1,0,0,0,215,216,5,36,0,0,216,35,1,0,0,0,217,233,5,35,0,0,218,221,3,56,
		28,0,219,221,3,24,12,0,220,218,1,0,0,0,220,219,1,0,0,0,221,229,1,0,0,0,
		222,225,5,39,0,0,223,226,3,56,28,0,224,226,3,24,12,0,225,223,1,0,0,0,225,
		224,1,0,0,0,226,228,1,0,0,0,227,222,1,0,0,0,228,231,1,0,0,0,229,227,1,
		0,0,0,229,230,1,0,0,0,230,234,1,0,0,0,231,229,1,0,0,0,232,234,1,0,0,0,
		233,220,1,0,0,0,233,232,1,0,0,0,234,235,1,0,0,0,235,236,5,36,0,0,236,37,
		1,0,0,0,237,240,3,26,13,0,238,239,5,42,0,0,239,241,3,16,8,0,240,238,1,
		0,0,0,240,241,1,0,0,0,241,244,1,0,0,0,242,243,5,40,0,0,243,245,3,36,18,
		0,244,242,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,5,37,0,0,247,
		39,1,0,0,0,248,249,5,13,0,0,249,250,3,24,12,0,250,41,1,0,0,0,251,252,5,
		8,0,0,252,254,3,24,12,0,253,255,3,40,20,0,254,253,1,0,0,0,254,255,1,0,
		0,0,255,256,1,0,0,0,256,261,5,33,0,0,257,260,3,38,19,0,258,260,3,46,23,
		0,259,257,1,0,0,0,259,258,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,
		262,1,0,0,0,262,264,1,0,0,0,263,261,1,0,0,0,264,265,5,34,0,0,265,266,5,
		37,0,0,266,43,1,0,0,0,267,268,5,12,0,0,268,269,3,24,12,0,269,273,5,33,
		0,0,270,272,3,46,23,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,
		273,274,1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,5,34,0,0,277,278,
		5,37,0,0,278,45,1,0,0,0,279,280,3,26,13,0,280,290,5,31,0,0,281,286,3,26,
		13,0,282,283,5,39,0,0,283,285,3,26,13,0,284,282,1,0,0,0,285,288,1,0,0,
		0,286,284,1,0,0,0,286,287,1,0,0,0,287,291,1,0,0,0,288,286,1,0,0,0,289,
		291,1,0,0,0,290,281,1,0,0,0,290,289,1,0,0,0,291,292,1,0,0,0,292,293,5,
		32,0,0,293,294,5,33,0,0,294,295,3,70,35,0,295,296,5,34,0,0,296,297,5,37,
		0,0,297,47,1,0,0,0,298,299,3,24,12,0,299,300,5,38,0,0,300,49,1,0,0,0,301,
		303,3,48,24,0,302,301,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,
		3,24,12,0,305,315,5,31,0,0,306,311,3,52,26,0,307,308,5,39,0,0,308,310,
		3,52,26,0,309,307,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,
		0,0,312,316,1,0,0,0,313,311,1,0,0,0,314,316,1,0,0,0,315,306,1,0,0,0,315,
		314,1,0,0,0,316,317,1,0,0,0,317,318,5,32,0,0,318,51,1,0,0,0,319,320,6,
		26,-1,0,320,326,3,16,8,0,321,326,3,24,12,0,322,326,3,50,25,0,323,326,3,
		56,28,0,324,326,3,54,27,0,325,319,1,0,0,0,325,321,1,0,0,0,325,322,1,0,
		0,0,325,323,1,0,0,0,325,324,1,0,0,0,326,332,1,0,0,0,327,328,10,2,0,0,328,
		329,5,23,0,0,329,331,3,52,26,3,330,327,1,0,0,0,331,334,1,0,0,0,332,330,
		1,0,0,0,332,333,1,0,0,0,333,53,1,0,0,0,334,332,1,0,0,0,335,336,6,27,-1,
		0,336,347,3,14,7,0,337,347,5,14,0,0,338,347,3,24,12,0,339,347,3,50,25,
		0,340,341,5,19,0,0,341,347,3,54,27,4,342,343,5,31,0,0,343,344,3,54,27,
		0,344,345,5,32,0,0,345,347,1,0,0,0,346,335,1,0,0,0,346,337,1,0,0,0,346,
		338,1,0,0,0,346,339,1,0,0,0,346,340,1,0,0,0,346,342,1,0,0,0,347,356,1,
		0,0,0,348,349,10,3,0,0,349,350,7,2,0,0,350,355,3,54,27,4,351,352,10,2,
		0,0,352,353,7,3,0,0,353,355,3,54,27,3,354,348,1,0,0,0,354,351,1,0,0,0,
		355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,55,1,0,0,0,358,356,
		1,0,0,0,359,360,6,28,-1,0,360,371,5,50,0,0,361,371,5,14,0,0,362,371,3,
		24,12,0,363,371,3,50,25,0,364,365,5,29,0,0,365,371,3,52,26,0,366,367,3,
		54,27,0,367,368,3,58,29,0,368,369,3,54,27,0,369,371,1,0,0,0,370,359,1,
		0,0,0,370,361,1,0,0,0,370,362,1,0,0,0,370,363,1,0,0,0,370,364,1,0,0,0,
		370,366,1,0,0,0,371,383,1,0,0,0,372,373,10,3,0,0,373,374,5,23,0,0,374,
		382,3,56,28,4,375,376,10,2,0,0,376,377,5,21,0,0,377,382,3,56,28,3,378,
		379,10,1,0,0,379,380,5,22,0,0,380,382,3,56,28,2,381,372,1,0,0,0,381,375,
		1,0,0,0,381,378,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,
		0,384,57,1,0,0,0,385,383,1,0,0,0,386,387,7,4,0,0,387,59,1,0,0,0,388,389,
		5,3,0,0,389,390,5,31,0,0,390,391,3,56,28,0,391,392,5,32,0,0,392,393,5,
		33,0,0,393,394,3,72,36,0,394,395,5,34,0,0,395,61,1,0,0,0,396,401,3,60,
		30,0,397,398,5,4,0,0,398,400,3,60,30,0,399,397,1,0,0,0,400,403,1,0,0,0,
		401,399,1,0,0,0,401,402,1,0,0,0,402,406,1,0,0,0,403,401,1,0,0,0,404,405,
		5,4,0,0,405,407,3,72,36,0,406,404,1,0,0,0,406,407,1,0,0,0,407,63,1,0,0,
		0,408,409,5,5,0,0,409,410,5,31,0,0,410,411,3,56,28,0,411,412,5,32,0,0,
		412,413,5,33,0,0,413,414,3,72,36,0,414,415,5,34,0,0,415,416,5,37,0,0,416,
		65,1,0,0,0,417,418,5,6,0,0,418,419,5,31,0,0,419,420,3,24,12,0,420,423,
		5,9,0,0,421,424,3,34,17,0,422,424,3,50,25,0,423,421,1,0,0,0,423,422,1,
		0,0,0,424,425,1,0,0,0,425,426,5,32,0,0,426,427,5,33,0,0,427,428,3,72,36,
		0,428,429,5,34,0,0,429,430,5,37,0,0,430,67,1,0,0,0,431,432,5,6,0,0,432,
		433,5,31,0,0,433,434,3,24,12,0,434,437,5,9,0,0,435,438,3,34,17,0,436,438,
		3,50,25,0,437,435,1,0,0,0,437,436,1,0,0,0,438,439,1,0,0,0,439,440,5,32,
		0,0,440,441,5,33,0,0,441,442,3,16,8,0,442,443,5,34,0,0,443,69,1,0,0,0,
		444,446,3,72,36,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,
		448,1,0,0,0,448,71,1,0,0,0,449,447,1,0,0,0,450,464,3,62,31,0,451,464,3,
		74,37,0,452,464,3,64,32,0,453,464,3,66,33,0,454,455,3,50,25,0,455,456,
		5,37,0,0,456,464,1,0,0,0,457,464,3,46,23,0,458,464,3,32,16,0,459,460,5,
		7,0,0,460,461,3,52,26,0,461,462,5,37,0,0,462,464,1,0,0,0,463,450,1,0,0,
		0,463,451,1,0,0,0,463,452,1,0,0,0,463,453,1,0,0,0,463,454,1,0,0,0,463,
		457,1,0,0,0,463,458,1,0,0,0,463,459,1,0,0,0,464,73,1,0,0,0,465,467,3,8,
		4,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,469,3,24,12,0,
		469,470,5,42,0,0,470,471,3,52,26,0,471,472,5,37,0,0,472,75,1,0,0,0,473,
		475,5,10,0,0,474,473,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,476,478,3,
		0,0,0,477,476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,480,3,24,12,
		0,480,481,5,42,0,0,481,482,3,30,15,0,482,483,5,37,0,0,483,77,1,0,0,0,484,
		486,5,10,0,0,485,484,1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,489,3,
		2,1,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,491,3,24,12,
		0,491,492,5,42,0,0,492,493,3,34,17,0,493,494,5,37,0,0,494,79,1,0,0,0,495,
		496,3,26,13,0,496,497,5,37,0,0,497,81,1,0,0,0,498,504,3,42,21,0,499,504,
		3,76,38,0,500,504,3,78,39,0,501,504,3,44,22,0,502,504,3,32,16,0,503,498,
		1,0,0,0,503,499,1,0,0,0,503,500,1,0,0,0,503,501,1,0,0,0,503,502,1,0,0,
		0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,83,1,0,0,0,507,505,
		1,0,0,0,508,509,3,82,41,0,509,85,1,0,0,0,56,90,96,103,107,115,125,131,
		139,145,147,149,159,165,167,180,186,192,195,208,213,220,225,229,233,240,
		244,254,259,261,273,286,290,302,311,315,325,332,346,354,356,370,381,383,
		401,406,423,437,447,463,466,474,477,485,488,503,505
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
