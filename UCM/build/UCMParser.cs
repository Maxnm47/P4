//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UCM.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UCMParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, TEMPLATE_KEYWORD=8, 
		IN=9, HIDDEN_=10, OBJECT_KEYWORD=11, FUNCTIONS_KEYWORD=12, EXTENDS_KEYWORD=13, 
		THIS_KEYWORD=14, NULL=15, MULT=16, DIV=17, PLUS=18, MINUS=19, MOD=20, 
		AND=21, OR=22, EQ=23, NEQ=24, GT=25, LT=26, GTE=27, LTE=28, NOT=29, QUESTION=30, 
		LPAREN=31, RPAREN=32, LCURLY=33, RCURLY=34, LBRACKET=35, RBRACKET=36, 
		SEMI=37, DOT=38, COMMA=39, COLON=40, NEWLINE=41, ASSIGN=42, QUOTE=43, 
		DOLLAR=44, INT_T=45, FLOAT_T=46, STRING_T=47, BOOL_T=48, VOID_T=49, BOOL=50, 
		INT=51, FLOAT=52, STRING=53, ESCAPE_SEQUENCE=54, ID=55;
	public const int
		RULE_object_t = 0, RULE_array_t = 1, RULE_primitiveType = 2, RULE_complexType = 3, 
		RULE_type = 4, RULE_int = 5, RULE_float = 6, RULE_num = 7, RULE_string = 8, 
		RULE_value = 9, RULE_augmentedString = 10, RULE_concatanatedString = 11, 
		RULE_id = 12, RULE_argument = 13, RULE_adapting = 14, RULE_object = 15, 
		RULE_field = 16, RULE_array = 17, RULE_evaluaterArray = 18, RULE_templateField = 19, 
		RULE_templateExtention = 20, RULE_templateDefenition = 21, RULE_functionCollection = 22, 
		RULE_arguments = 23, RULE_method = 24, RULE_functionCollectionCall = 25, 
		RULE_methodCall = 26, RULE_expr = 27, RULE_numExpr = 28, RULE_boolExpr = 29, 
		RULE_compExpr = 30, RULE_ifStatement = 31, RULE_conditional = 32, RULE_whileLoop = 33, 
		RULE_forLoop = 34, RULE_listConstruction = 35, RULE_return_ = 36, RULE_statementList = 37, 
		RULE_statement = 38, RULE_assignment = 39, RULE_root = 40;
	public static readonly string[] ruleNames = {
		"object_t", "array_t", "primitiveType", "complexType", "type", "int", 
		"float", "num", "string", "value", "augmentedString", "concatanatedString", 
		"id", "argument", "adapting", "object", "field", "array", "evaluaterArray", 
		"templateField", "templateExtention", "templateDefenition", "functionCollection", 
		"arguments", "method", "functionCollectionCall", "methodCall", "expr", 
		"numExpr", "boolExpr", "compExpr", "ifStatement", "conditional", "whileLoop", 
		"forLoop", "listConstruction", "return_", "statementList", "statement", 
		"assignment", "root"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'if'", "'else'", "'while'", "'for'", "'return'", "'template'", 
		"'in'", "'hidden'", "'object'", "'methods'", "'extends'", "'this'", "'null'", 
		"'*'", "'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'!'", "'?'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "';'", "'.'", "','", "':'", "'\\n'", "'='", "'\"'", "'$'", "'int'", 
		"'float'", "'string'", "'bool'", "'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "IF", "ELSE", "WHILE", "FOR", "RETURN", "TEMPLATE_KEYWORD", 
		"IN", "HIDDEN_", "OBJECT_KEYWORD", "FUNCTIONS_KEYWORD", "EXTENDS_KEYWORD", 
		"THIS_KEYWORD", "NULL", "MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", 
		"OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", "QUESTION", "LPAREN", 
		"RPAREN", "LCURLY", "RCURLY", "LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", 
		"COLON", "NEWLINE", "ASSIGN", "QUOTE", "DOLLAR", "INT_T", "FLOAT_T", "STRING_T", 
		"BOOL_T", "VOID_T", "BOOL", "INT", "FLOAT", "STRING", "ESCAPE_SEQUENCE", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UCM.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UCMParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UCMParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UCMParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Object_tContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_KEYWORD() { return GetToken(UCMParser.OBJECT_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UCMParser.ID, 0); }
		public Object_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_t(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_tContext object_t() {
		Object_tContext _localctx = new Object_tContext(Context, State);
		EnterRule(_localctx, 0, RULE_object_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_la = TokenStream.LA(1);
			if ( !(_la==OBJECT_KEYWORD || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_tContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(UCMParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(UCMParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(UCMParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(UCMParser.RBRACKET, i);
		}
		public Array_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_t(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_tContext array_t() {
		Array_tContext _localctx = new Array_tContext(Context, State);
		EnterRule(_localctx, 2, RULE_array_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_T:
			case FLOAT_T:
			case BOOL_T:
			case VOID_T:
				{
				State = 84;
				primitiveType();
				}
				break;
			case OBJECT_KEYWORD:
			case ID:
				{
				State = 85;
				object_t();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 88;
				Match(LBRACKET);
				State = 89;
				Match(RBRACKET);
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LBRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_T() { return GetToken(UCMParser.INT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_T() { return GetToken(UCMParser.FLOAT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_T() { return GetToken(UCMParser.BOOL_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_T() { return GetToken(UCMParser.VOID_T, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 949978046398464L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_tContext array_t() {
			return GetRuleContext<Array_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_T() { return GetToken(UCMParser.STRING_T, 0); }
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_complexType);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				object_t();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				array_t();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				Match(STRING_T);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				complexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(UCMParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 10, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(UCMParser.FLOAT, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 12, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 14, RULE_num);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				@int();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				@float();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UCMParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 16, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugmentedStringContext augmentedString() {
			return GetRuleContext<AugmentedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatanatedStringContext concatanatedString() {
			return GetRuleContext<ConcatanatedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UCMParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(UCMParser.NULL, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_value);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 117;
				augmentedString();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 118;
				concatanatedString();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 119;
				Match(BOOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 120;
				@object();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 121;
				array();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 122;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AugmentedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(UCMParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(UCMParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(UCMParser.QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LCURLY() { return GetTokens(UCMParser.LCURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY(int i) {
			return GetToken(UCMParser.LCURLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RCURLY() { return GetTokens(UCMParser.RCURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY(int i) {
			return GetToken(UCMParser.RCURLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_SEQUENCE() { return GetTokens(UCMParser.ESCAPE_SEQUENCE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SEQUENCE(int i) {
			return GetToken(UCMParser.ESCAPE_SEQUENCE, i);
		}
		public AugmentedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_augmentedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAugmentedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AugmentedStringContext augmentedString() {
		AugmentedStringContext _localctx = new AugmentedStringContext(Context, State);
		EnterRule(_localctx, 20, RULE_augmentedString);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(DOLLAR);
			State = 126;
			Match(QUOTE);
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 145;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 129;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
						case 1:
							{
							State = 127;
							Match(ESCAPE_SEQUENCE);
							}
							break;
						case 2:
							{
							State = 128;
							MatchWildcard();
							}
							break;
						}
						{
						State = 131;
						Match(LCURLY);
						State = 132;
						expr(0);
						State = 133;
						Match(RCURLY);
						}
						}
						break;
					case 2:
						{
						State = 137;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
						case 1:
							{
							State = 135;
							Match(ESCAPE_SEQUENCE);
							}
							break;
						case 2:
							{
							State = 136;
							MatchWildcard();
							}
							break;
						}
						State = 143;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
						case 1:
							{
							State = 139;
							Match(LCURLY);
							State = 140;
							expr(0);
							State = 141;
							Match(RCURLY);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 150;
			Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatanatedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(UCMParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(UCMParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(UCMParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(UCMParser.PLUS, i);
		}
		public ConcatanatedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatanatedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatanatedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatanatedStringContext concatanatedString() {
		ConcatanatedStringContext _localctx = new ConcatanatedStringContext(Context, State);
		EnterRule(_localctx, 22, RULE_concatanatedString);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(STRING);
			State = 157;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 153;
					Match(PLUS);
					State = 154;
					Match(STRING);
					}
					} 
				}
				State = 159;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UCMParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 24, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 26, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			type();
			State = 163;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdaptingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AdaptingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adapting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdapting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdaptingContext adapting() {
		AdaptingContext _localctx = new AdaptingContext(Context, State);
		EnterRule(_localctx, 28, RULE_adapting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AdaptingContext adapting() {
			return GetRuleContext<AdaptingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 30, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 167;
				adapting();
				}
			}

			State = 170;
			Match(LCURLY);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 37119512553720832L) != 0)) {
				{
				{
				State = 171;
				field();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 177;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDDEN_() { return GetToken(UCMParser.HIDDEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 32, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HIDDEN_) {
				{
				State = 179;
				Match(HIDDEN_);
				}
			}

			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 182;
				type();
				}
				break;
			}
			State = 185;
			id();
			State = 186;
			Match(ASSIGN);
			State = 187;
			expr(0);
			State = 188;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListConstructionContext listConstruction() {
			return GetRuleContext<ListConstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 34, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(LBRACKET);
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case DOLLAR:
			case BOOL:
			case INT:
			case FLOAT:
			case STRING:
			case ID:
				{
				State = 191;
				expr(0);
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 192;
					Match(COMMA);
					State = 193;
					expr(0);
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FOR:
				{
				State = 199;
				listConstruction();
				}
				break;
			case RBRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 203;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluaterArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext[] boolExpr() {
			return GetRuleContexts<BoolExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr(int i) {
			return GetRuleContext<BoolExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public EvaluaterArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluaterArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluaterArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluaterArrayContext evaluaterArray() {
		EvaluaterArrayContext _localctx = new EvaluaterArrayContext(Context, State);
		EnterRule(_localctx, 36, RULE_evaluaterArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(LBRACKET);
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case MINUS:
			case NOT:
			case LPAREN:
			case BOOL:
			case INT:
			case FLOAT:
			case ID:
				{
				State = 208;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 206;
					boolExpr(0);
					}
					break;
				case 2:
					{
					State = 207;
					id();
					}
					break;
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 210;
					Match(COMMA);
					State = 213;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						State = 211;
						boolExpr(0);
						}
						break;
					case 2:
						{
						State = 212;
						id();
						}
						break;
					}
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 223;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UCMParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluaterArrayContext evaluaterArray() {
			return GetRuleContext<EvaluaterArrayContext>(0);
		}
		public TemplateFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateFieldContext templateField() {
		TemplateFieldContext _localctx = new TemplateFieldContext(Context, State);
		EnterRule(_localctx, 38, RULE_templateField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			type();
			State = 226;
			id();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 227;
				Match(ASSIGN);
				State = 228;
				value();
				}
			}

			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 231;
				Match(COLON);
				State = 232;
				evaluaterArray();
				}
			}

			State = 235;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateExtentionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS_KEYWORD() { return GetToken(UCMParser.EXTENDS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public TemplateExtentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateExtention; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateExtention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateExtentionContext templateExtention() {
		TemplateExtentionContext _localctx = new TemplateExtentionContext(Context, State);
		EnterRule(_localctx, 40, RULE_templateExtention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(EXTENDS_KEYWORD);
			State = 238;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefenitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE_KEYWORD() { return GetToken(UCMParser.TEMPLATE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateExtentionContext templateExtention() {
			return GetRuleContext<TemplateExtentionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateFieldContext[] templateField() {
			return GetRuleContexts<TemplateFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateFieldContext templateField(int i) {
			return GetRuleContext<TemplateFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public TemplateDefenitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefenition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefenition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefenitionContext templateDefenition() {
		TemplateDefenitionContext _localctx = new TemplateDefenitionContext(Context, State);
		EnterRule(_localctx, 42, RULE_templateDefenition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(TEMPLATE_KEYWORD);
			State = 241;
			id();
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS_KEYWORD) {
				{
				State = 242;
				templateExtention();
				}
			}

			State = 245;
			Match(LCURLY);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 37119512553719808L) != 0)) {
				{
				State = 248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 246;
					templateField();
					}
					break;
				case 2:
					{
					State = 247;
					method();
					}
					break;
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 253;
			Match(RCURLY);
			State = 254;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS_KEYWORD() { return GetToken(UCMParser.FUNCTIONS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public FunctionCollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCollectionContext functionCollection() {
		FunctionCollectionContext _localctx = new FunctionCollectionContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionCollection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(FUNCTIONS_KEYWORD);
			State = 257;
			id();
			State = 258;
			Match(LCURLY);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 37119512553719808L) != 0)) {
				{
				{
				State = 259;
				method();
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 265;
			Match(RCURLY);
			State = 266;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 46, RULE_arguments);
		int _la;
		try {
			State = 277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBJECT_KEYWORD:
			case INT_T:
			case FLOAT_T:
			case STRING_T:
			case BOOL_T:
			case VOID_T:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				argument();
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 269;
					Match(COMMA);
					State = 270;
					argument();
					}
					}
					State = 275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 48, RULE_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			type();
			State = 280;
			id();
			State = 281;
			Match(LPAREN);
			State = 282;
			arguments();
			State = 283;
			Match(RPAREN);
			State = 284;
			Match(LCURLY);
			State = 285;
			statementList();
			State = 286;
			Match(RCURLY);
			State = 287;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCollectionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(UCMParser.DOT, 0); }
		public FunctionCollectionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCollectionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCollectionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCollectionCallContext functionCollectionCall() {
		FunctionCollectionCallContext _localctx = new FunctionCollectionCallContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionCollectionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			id();
			State = 290;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionCallContext functionCollectionCall() {
			return GetRuleContext<FunctionCollectionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 52, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 292;
				functionCollectionCall();
				}
				break;
			}
			State = 295;
			id();
			State = 296;
			Match(LPAREN);
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case DOLLAR:
			case BOOL:
			case INT:
			case FLOAT:
			case STRING:
			case ID:
				{
				State = 297;
				expr(0);
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 298;
					Match(COMMA);
					State = 299;
					expr(0);
					}
					}
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 308;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr() {
			return GetRuleContext<NumExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 311;
				value();
				}
				break;
			case 2:
				{
				State = 312;
				id();
				}
				break;
			case 3:
				{
				State = 313;
				methodCall();
				}
				break;
			case 4:
				{
				State = 314;
				boolExpr(0);
				}
				break;
			case 5:
				{
				State = 315;
				numExpr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 323;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 318;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 319;
					Match(EQ);
					State = 320;
					expr(3);
					}
					} 
				}
				State = 325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_KEYWORD() { return GetToken(UCMParser.THIS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(UCMParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext[] numExpr() {
			return GetRuleContexts<NumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr(int i) {
			return GetRuleContext<NumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(UCMParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(UCMParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(UCMParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(UCMParser.PLUS, 0); }
		public NumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumExprContext numExpr() {
		return numExpr(0);
	}

	private NumExprContext numExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumExprContext _localctx = new NumExprContext(Context, _parentState);
		NumExprContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_numExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 327;
				num();
				}
				break;
			case 2:
				{
				State = 328;
				Match(THIS_KEYWORD);
				}
				break;
			case 3:
				{
				State = 329;
				id();
				}
				break;
			case 4:
				{
				State = 330;
				methodCall();
				}
				break;
			case 5:
				{
				State = 331;
				Match(MINUS);
				State = 332;
				numExpr(4);
				}
				break;
			case 6:
				{
				State = 333;
				Match(LPAREN);
				State = 334;
				numExpr(0);
				State = 335;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 347;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 345;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new NumExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numExpr);
						State = 339;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 340;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1245184L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 341;
						numExpr(4);
						}
						break;
					case 2:
						{
						_localctx = new NumExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numExpr);
						State = 342;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 343;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 344;
						numExpr(3);
						}
						break;
					}
					} 
				}
				State = 349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UCMParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_KEYWORD() { return GetToken(UCMParser.THIS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(UCMParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext[] numExpr() {
			return GetRuleContexts<NumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr(int i) {
			return GetRuleContext<NumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompExprContext compExpr() {
			return GetRuleContext<CompExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext[] boolExpr() {
			return GetRuleContexts<BoolExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr(int i) {
			return GetRuleContext<BoolExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(UCMParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(UCMParser.OR, 0); }
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		return boolExpr(0);
	}

	private BoolExprContext boolExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExprContext _localctx = new BoolExprContext(Context, _parentState);
		BoolExprContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_boolExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 351;
				Match(BOOL);
				}
				break;
			case 2:
				{
				State = 352;
				Match(THIS_KEYWORD);
				}
				break;
			case 3:
				{
				State = 353;
				id();
				}
				break;
			case 4:
				{
				State = 354;
				methodCall();
				}
				break;
			case 5:
				{
				State = 355;
				Match(NOT);
				State = 356;
				expr(0);
				}
				break;
			case 6:
				{
				State = 357;
				numExpr(0);
				State = 358;
				compExpr();
				State = 359;
				numExpr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 374;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 372;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 363;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 364;
						Match(EQ);
						State = 365;
						boolExpr(4);
						}
						break;
					case 2:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 366;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 367;
						Match(AND);
						State = 368;
						boolExpr(3);
						}
						break;
					case 3:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 369;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 370;
						Match(OR);
						State = 371;
						boolExpr(2);
						}
						break;
					}
					} 
				}
				State = 376;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UCMParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UCMParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(UCMParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(UCMParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(UCMParser.NEQ, 0); }
		public CompExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompExprContext compExpr() {
		CompExprContext _localctx = new CompExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_compExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(UCMParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(IF);
			State = 380;
			Match(LPAREN);
			State = 381;
			boolExpr(0);
			State = 382;
			Match(RPAREN);
			State = 383;
			Match(LCURLY);
			State = 384;
			statement();
			State = 385;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext[] ifStatement() {
			return GetRuleContexts<IfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement(int i) {
			return GetRuleContext<IfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(UCMParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(UCMParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 64, RULE_conditional);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			ifStatement();
			State = 392;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 388;
					Match(ELSE);
					State = 389;
					ifStatement();
					}
					} 
				}
				State = 394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 395;
				Match(ELSE);
				State = 396;
				statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(UCMParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 66, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(WHILE);
			State = 400;
			Match(LPAREN);
			State = 401;
			boolExpr(0);
			State = 402;
			Match(RPAREN);
			State = 403;
			Match(LCURLY);
			State = 404;
			statement();
			State = 405;
			Match(RCURLY);
			State = 406;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UCMParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(UCMParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 68, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			Match(FOR);
			State = 409;
			Match(LPAREN);
			State = 410;
			id();
			State = 411;
			Match(IN);
			State = 414;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				{
				State = 412;
				array();
				}
				break;
			case ID:
				{
				State = 413;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 416;
			Match(RPAREN);
			State = 417;
			Match(LCURLY);
			State = 418;
			statement();
			State = 419;
			Match(RCURLY);
			State = 420;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListConstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UCMParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(UCMParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ListConstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listConstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListConstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListConstructionContext listConstruction() {
		ListConstructionContext _localctx = new ListConstructionContext(Context, State);
		EnterRule(_localctx, 70, RULE_listConstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(FOR);
			State = 423;
			Match(LPAREN);
			State = 424;
			id();
			State = 425;
			Match(IN);
			State = 428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				{
				State = 426;
				array();
				}
				break;
			case ID:
				{
				State = 427;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 430;
			Match(RPAREN);
			State = 431;
			Match(LCURLY);
			State = 432;
			value();
			State = 433;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(UCMParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		public Return_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_Context return_() {
		Return_Context _localctx = new Return_Context(Context, State);
		EnterRule(_localctx, 72, RULE_return_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(RETURN);
			State = 436;
			expr(0);
			State = 437;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 74, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 37119512553721064L) != 0)) {
				{
				{
				State = 439;
				statement();
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_Context return_() {
			return GetRuleContext<Return_Context>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_statement);
		try {
			State = 455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445;
				conditional();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 446;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 447;
				whileLoop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 448;
				forLoop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 449;
				methodCall();
				State = 450;
				Match(SEMI);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 452;
				method();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 453;
				field();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 454;
				return_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 78, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 457;
				type();
				}
				break;
			}
			State = 460;
			id();
			State = 461;
			Match(ASSIGN);
			State = 462;
			expr(0);
			State = 463;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDefenitionContext[] templateDefenition() {
			return GetRuleContexts<TemplateDefenitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDefenitionContext templateDefenition(int i) {
			return GetRuleContext<TemplateDefenitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionContext[] functionCollection() {
			return GetRuleContexts<FunctionCollectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionContext functionCollection(int i) {
			return GetRuleContext<FunctionCollectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 80, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 37119512553725184L) != 0)) {
				{
				State = 468;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPLATE_KEYWORD:
					{
					State = 465;
					templateDefenition();
					}
					break;
				case FUNCTIONS_KEYWORD:
					{
					State = 466;
					functionCollection();
					}
					break;
				case HIDDEN_:
				case OBJECT_KEYWORD:
				case INT_T:
				case FLOAT_T:
				case STRING_T:
				case BOOL_T:
				case VOID_T:
				case ID:
					{
					State = 467;
					field();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return expr_sempred((ExprContext)_localctx, predIndex);
		case 28: return numExpr_sempred((NumExprContext)_localctx, predIndex);
		case 29: return boolExpr_sempred((BoolExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool numExpr_sempred(NumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool boolExpr_sempred(BoolExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,474,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,1,1,1,1,3,1,
		87,8,1,1,1,1,1,4,1,91,8,1,11,1,12,1,92,1,2,1,2,1,3,1,3,1,3,3,3,100,8,3,
		1,4,1,4,3,4,104,8,4,1,5,1,5,1,6,1,6,1,7,1,7,3,7,112,8,7,1,8,1,8,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,124,8,9,1,10,1,10,1,10,1,10,3,10,130,8,10,
		1,10,1,10,1,10,1,10,1,10,1,10,3,10,138,8,10,1,10,1,10,1,10,1,10,3,10,144,
		8,10,5,10,146,8,10,10,10,12,10,149,9,10,1,10,1,10,1,11,1,11,1,11,5,11,
		156,8,11,10,11,12,11,159,9,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,
		3,15,169,8,15,1,15,1,15,5,15,173,8,15,10,15,12,15,176,9,15,1,15,1,15,1,
		16,3,16,181,8,16,1,16,3,16,184,8,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
		1,17,1,17,5,17,195,8,17,10,17,12,17,198,9,17,1,17,1,17,3,17,202,8,17,1,
		17,1,17,1,18,1,18,1,18,3,18,209,8,18,1,18,1,18,1,18,3,18,214,8,18,5,18,
		216,8,18,10,18,12,18,219,9,18,1,18,3,18,222,8,18,1,18,1,18,1,19,1,19,1,
		19,1,19,3,19,230,8,19,1,19,1,19,3,19,234,8,19,1,19,1,19,1,20,1,20,1,20,
		1,21,1,21,1,21,3,21,244,8,21,1,21,1,21,1,21,5,21,249,8,21,10,21,12,21,
		252,9,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,5,22,261,8,22,10,22,12,22,
		264,9,22,1,22,1,22,1,22,1,23,1,23,1,23,5,23,272,8,23,10,23,12,23,275,9,
		23,1,23,3,23,278,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,25,1,25,1,25,1,26,3,26,294,8,26,1,26,1,26,1,26,1,26,1,26,5,26,301,8,
		26,10,26,12,26,304,9,26,1,26,3,26,307,8,26,1,26,1,26,1,27,1,27,1,27,1,
		27,1,27,1,27,3,27,317,8,27,1,27,1,27,1,27,5,27,322,8,27,10,27,12,27,325,
		9,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,338,8,
		28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,346,8,28,10,28,12,28,349,9,28,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,362,8,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,373,8,29,10,29,12,29,376,
		9,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
		5,32,391,8,32,10,32,12,32,394,9,32,1,32,1,32,3,32,398,8,32,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,3,34,415,
		8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,
		429,8,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,5,37,441,8,
		37,10,37,12,37,444,9,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
		38,3,38,456,8,38,1,39,3,39,459,8,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,
		1,40,5,40,469,8,40,10,40,12,40,472,9,40,1,40,0,3,54,56,58,41,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,0,5,2,0,11,11,55,55,2,0,45,46,48,49,
		2,0,16,17,20,20,1,0,18,19,1,0,23,28,510,0,82,1,0,0,0,2,86,1,0,0,0,4,94,
		1,0,0,0,6,99,1,0,0,0,8,103,1,0,0,0,10,105,1,0,0,0,12,107,1,0,0,0,14,111,
		1,0,0,0,16,113,1,0,0,0,18,123,1,0,0,0,20,125,1,0,0,0,22,152,1,0,0,0,24,
		160,1,0,0,0,26,162,1,0,0,0,28,165,1,0,0,0,30,168,1,0,0,0,32,180,1,0,0,
		0,34,190,1,0,0,0,36,205,1,0,0,0,38,225,1,0,0,0,40,237,1,0,0,0,42,240,1,
		0,0,0,44,256,1,0,0,0,46,277,1,0,0,0,48,279,1,0,0,0,50,289,1,0,0,0,52,293,
		1,0,0,0,54,316,1,0,0,0,56,337,1,0,0,0,58,361,1,0,0,0,60,377,1,0,0,0,62,
		379,1,0,0,0,64,387,1,0,0,0,66,399,1,0,0,0,68,408,1,0,0,0,70,422,1,0,0,
		0,72,435,1,0,0,0,74,442,1,0,0,0,76,455,1,0,0,0,78,458,1,0,0,0,80,470,1,
		0,0,0,82,83,7,0,0,0,83,1,1,0,0,0,84,87,3,4,2,0,85,87,3,0,0,0,86,84,1,0,
		0,0,86,85,1,0,0,0,87,90,1,0,0,0,88,89,5,35,0,0,89,91,5,36,0,0,90,88,1,
		0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,3,1,0,0,0,94,95,7,1,
		0,0,95,5,1,0,0,0,96,100,3,0,0,0,97,100,3,2,1,0,98,100,5,47,0,0,99,96,1,
		0,0,0,99,97,1,0,0,0,99,98,1,0,0,0,100,7,1,0,0,0,101,104,3,4,2,0,102,104,
		3,6,3,0,103,101,1,0,0,0,103,102,1,0,0,0,104,9,1,0,0,0,105,106,5,51,0,0,
		106,11,1,0,0,0,107,108,5,52,0,0,108,13,1,0,0,0,109,112,3,10,5,0,110,112,
		3,12,6,0,111,109,1,0,0,0,111,110,1,0,0,0,112,15,1,0,0,0,113,114,5,53,0,
		0,114,17,1,0,0,0,115,124,3,14,7,0,116,124,3,16,8,0,117,124,3,20,10,0,118,
		124,3,22,11,0,119,124,5,50,0,0,120,124,3,30,15,0,121,124,3,34,17,0,122,
		124,5,15,0,0,123,115,1,0,0,0,123,116,1,0,0,0,123,117,1,0,0,0,123,118,1,
		0,0,0,123,119,1,0,0,0,123,120,1,0,0,0,123,121,1,0,0,0,123,122,1,0,0,0,
		124,19,1,0,0,0,125,126,5,44,0,0,126,147,5,43,0,0,127,130,5,54,0,0,128,
		130,9,0,0,0,129,127,1,0,0,0,129,128,1,0,0,0,129,130,1,0,0,0,130,131,1,
		0,0,0,131,132,5,33,0,0,132,133,3,54,27,0,133,134,5,34,0,0,134,146,1,0,
		0,0,135,138,5,54,0,0,136,138,9,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,138,
		143,1,0,0,0,139,140,5,33,0,0,140,141,3,54,27,0,141,142,5,34,0,0,142,144,
		1,0,0,0,143,139,1,0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,129,1,0,0,
		0,145,137,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,
		150,1,0,0,0,149,147,1,0,0,0,150,151,5,43,0,0,151,21,1,0,0,0,152,157,5,
		53,0,0,153,154,5,18,0,0,154,156,5,53,0,0,155,153,1,0,0,0,156,159,1,0,0,
		0,157,155,1,0,0,0,157,158,1,0,0,0,158,23,1,0,0,0,159,157,1,0,0,0,160,161,
		5,55,0,0,161,25,1,0,0,0,162,163,3,8,4,0,163,164,3,24,12,0,164,27,1,0,0,
		0,165,166,3,24,12,0,166,29,1,0,0,0,167,169,3,28,14,0,168,167,1,0,0,0,168,
		169,1,0,0,0,169,170,1,0,0,0,170,174,5,33,0,0,171,173,3,32,16,0,172,171,
		1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,177,1,0,0,
		0,176,174,1,0,0,0,177,178,5,34,0,0,178,31,1,0,0,0,179,181,5,10,0,0,180,
		179,1,0,0,0,180,181,1,0,0,0,181,183,1,0,0,0,182,184,3,8,4,0,183,182,1,
		0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,186,3,24,12,0,186,187,5,42,0,
		0,187,188,3,54,27,0,188,189,5,37,0,0,189,33,1,0,0,0,190,201,5,35,0,0,191,
		196,3,54,27,0,192,193,5,39,0,0,193,195,3,54,27,0,194,192,1,0,0,0,195,198,
		1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,202,1,0,0,0,198,196,1,0,0,
		0,199,202,3,70,35,0,200,202,1,0,0,0,201,191,1,0,0,0,201,199,1,0,0,0,201,
		200,1,0,0,0,202,203,1,0,0,0,203,204,5,36,0,0,204,35,1,0,0,0,205,221,5,
		35,0,0,206,209,3,58,29,0,207,209,3,24,12,0,208,206,1,0,0,0,208,207,1,0,
		0,0,209,217,1,0,0,0,210,213,5,39,0,0,211,214,3,58,29,0,212,214,3,24,12,
		0,213,211,1,0,0,0,213,212,1,0,0,0,214,216,1,0,0,0,215,210,1,0,0,0,216,
		219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,222,1,0,0,0,219,217,1,
		0,0,0,220,222,1,0,0,0,221,208,1,0,0,0,221,220,1,0,0,0,222,223,1,0,0,0,
		223,224,5,36,0,0,224,37,1,0,0,0,225,226,3,8,4,0,226,229,3,24,12,0,227,
		228,5,42,0,0,228,230,3,18,9,0,229,227,1,0,0,0,229,230,1,0,0,0,230,233,
		1,0,0,0,231,232,5,40,0,0,232,234,3,36,18,0,233,231,1,0,0,0,233,234,1,0,
		0,0,234,235,1,0,0,0,235,236,5,37,0,0,236,39,1,0,0,0,237,238,5,13,0,0,238,
		239,3,24,12,0,239,41,1,0,0,0,240,241,5,8,0,0,241,243,3,24,12,0,242,244,
		3,40,20,0,243,242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,250,5,33,
		0,0,246,249,3,38,19,0,247,249,3,48,24,0,248,246,1,0,0,0,248,247,1,0,0,
		0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,
		250,1,0,0,0,253,254,5,34,0,0,254,255,5,37,0,0,255,43,1,0,0,0,256,257,5,
		12,0,0,257,258,3,24,12,0,258,262,5,33,0,0,259,261,3,48,24,0,260,259,1,
		0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,
		264,262,1,0,0,0,265,266,5,34,0,0,266,267,5,37,0,0,267,45,1,0,0,0,268,273,
		3,26,13,0,269,270,5,39,0,0,270,272,3,26,13,0,271,269,1,0,0,0,272,275,1,
		0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,278,1,0,0,0,275,273,1,0,0,0,
		276,278,1,0,0,0,277,268,1,0,0,0,277,276,1,0,0,0,278,47,1,0,0,0,279,280,
		3,8,4,0,280,281,3,24,12,0,281,282,5,31,0,0,282,283,3,46,23,0,283,284,5,
		32,0,0,284,285,5,33,0,0,285,286,3,74,37,0,286,287,5,34,0,0,287,288,5,37,
		0,0,288,49,1,0,0,0,289,290,3,24,12,0,290,291,5,38,0,0,291,51,1,0,0,0,292,
		294,3,50,25,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,
		3,24,12,0,296,306,5,31,0,0,297,302,3,54,27,0,298,299,5,39,0,0,299,301,
		3,54,27,0,300,298,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,
		0,0,303,307,1,0,0,0,304,302,1,0,0,0,305,307,1,0,0,0,306,297,1,0,0,0,306,
		305,1,0,0,0,307,308,1,0,0,0,308,309,5,32,0,0,309,53,1,0,0,0,310,311,6,
		27,-1,0,311,317,3,18,9,0,312,317,3,24,12,0,313,317,3,52,26,0,314,317,3,
		58,29,0,315,317,3,56,28,0,316,310,1,0,0,0,316,312,1,0,0,0,316,313,1,0,
		0,0,316,314,1,0,0,0,316,315,1,0,0,0,317,323,1,0,0,0,318,319,10,2,0,0,319,
		320,5,23,0,0,320,322,3,54,27,3,321,318,1,0,0,0,322,325,1,0,0,0,323,321,
		1,0,0,0,323,324,1,0,0,0,324,55,1,0,0,0,325,323,1,0,0,0,326,327,6,28,-1,
		0,327,338,3,14,7,0,328,338,5,14,0,0,329,338,3,24,12,0,330,338,3,52,26,
		0,331,332,5,19,0,0,332,338,3,56,28,4,333,334,5,31,0,0,334,335,3,56,28,
		0,335,336,5,32,0,0,336,338,1,0,0,0,337,326,1,0,0,0,337,328,1,0,0,0,337,
		329,1,0,0,0,337,330,1,0,0,0,337,331,1,0,0,0,337,333,1,0,0,0,338,347,1,
		0,0,0,339,340,10,3,0,0,340,341,7,2,0,0,341,346,3,56,28,4,342,343,10,2,
		0,0,343,344,7,3,0,0,344,346,3,56,28,3,345,339,1,0,0,0,345,342,1,0,0,0,
		346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,57,1,0,0,0,349,347,
		1,0,0,0,350,351,6,29,-1,0,351,362,5,50,0,0,352,362,5,14,0,0,353,362,3,
		24,12,0,354,362,3,52,26,0,355,356,5,29,0,0,356,362,3,54,27,0,357,358,3,
		56,28,0,358,359,3,60,30,0,359,360,3,56,28,0,360,362,1,0,0,0,361,350,1,
		0,0,0,361,352,1,0,0,0,361,353,1,0,0,0,361,354,1,0,0,0,361,355,1,0,0,0,
		361,357,1,0,0,0,362,374,1,0,0,0,363,364,10,3,0,0,364,365,5,23,0,0,365,
		373,3,58,29,4,366,367,10,2,0,0,367,368,5,21,0,0,368,373,3,58,29,3,369,
		370,10,1,0,0,370,371,5,22,0,0,371,373,3,58,29,2,372,363,1,0,0,0,372,366,
		1,0,0,0,372,369,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,
		0,375,59,1,0,0,0,376,374,1,0,0,0,377,378,7,4,0,0,378,61,1,0,0,0,379,380,
		5,3,0,0,380,381,5,31,0,0,381,382,3,58,29,0,382,383,5,32,0,0,383,384,5,
		33,0,0,384,385,3,76,38,0,385,386,5,34,0,0,386,63,1,0,0,0,387,392,3,62,
		31,0,388,389,5,4,0,0,389,391,3,62,31,0,390,388,1,0,0,0,391,394,1,0,0,0,
		392,390,1,0,0,0,392,393,1,0,0,0,393,397,1,0,0,0,394,392,1,0,0,0,395,396,
		5,4,0,0,396,398,3,76,38,0,397,395,1,0,0,0,397,398,1,0,0,0,398,65,1,0,0,
		0,399,400,5,5,0,0,400,401,5,31,0,0,401,402,3,58,29,0,402,403,5,32,0,0,
		403,404,5,33,0,0,404,405,3,76,38,0,405,406,5,34,0,0,406,407,5,37,0,0,407,
		67,1,0,0,0,408,409,5,6,0,0,409,410,5,31,0,0,410,411,3,24,12,0,411,414,
		5,9,0,0,412,415,3,34,17,0,413,415,3,52,26,0,414,412,1,0,0,0,414,413,1,
		0,0,0,415,416,1,0,0,0,416,417,5,32,0,0,417,418,5,33,0,0,418,419,3,76,38,
		0,419,420,5,34,0,0,420,421,5,37,0,0,421,69,1,0,0,0,422,423,5,6,0,0,423,
		424,5,31,0,0,424,425,3,24,12,0,425,428,5,9,0,0,426,429,3,34,17,0,427,429,
		3,52,26,0,428,426,1,0,0,0,428,427,1,0,0,0,429,430,1,0,0,0,430,431,5,32,
		0,0,431,432,5,33,0,0,432,433,3,18,9,0,433,434,5,34,0,0,434,71,1,0,0,0,
		435,436,5,7,0,0,436,437,3,54,27,0,437,438,5,37,0,0,438,73,1,0,0,0,439,
		441,3,76,38,0,440,439,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,
		1,0,0,0,443,75,1,0,0,0,444,442,1,0,0,0,445,456,3,64,32,0,446,456,3,78,
		39,0,447,456,3,66,33,0,448,456,3,68,34,0,449,450,3,52,26,0,450,451,5,37,
		0,0,451,456,1,0,0,0,452,456,3,48,24,0,453,456,3,32,16,0,454,456,3,72,36,
		0,455,445,1,0,0,0,455,446,1,0,0,0,455,447,1,0,0,0,455,448,1,0,0,0,455,
		449,1,0,0,0,455,452,1,0,0,0,455,453,1,0,0,0,455,454,1,0,0,0,456,77,1,0,
		0,0,457,459,3,8,4,0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,
		461,3,24,12,0,461,462,5,42,0,0,462,463,3,54,27,0,463,464,5,37,0,0,464,
		79,1,0,0,0,465,469,3,42,21,0,466,469,3,44,22,0,467,469,3,32,16,0,468,465,
		1,0,0,0,468,466,1,0,0,0,468,467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,
		0,470,471,1,0,0,0,471,81,1,0,0,0,472,470,1,0,0,0,50,86,92,99,103,111,123,
		129,137,143,145,147,157,168,174,180,183,196,201,208,213,217,221,229,233,
		243,248,250,262,273,277,293,302,306,316,323,337,345,347,361,372,374,392,
		397,414,428,442,455,458,468,470
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
