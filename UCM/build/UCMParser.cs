//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UCM.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UCMParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, TEMPLATE_KEYWORD=8, 
		IN=9, HIDDEN_=10, OBJECT_KEYWORD=11, FUNCTIONS_KEYWORD=12, EXTENDS_KEYWORD=13, 
		NULL=14, MULT=15, DIV=16, PLUS=17, MINUS=18, MOD=19, AND=20, OR=21, EQ=22, 
		NEQ=23, GT=24, LT=25, GTE=26, LTE=27, NOT=28, QUESTION=29, LPAREN=30, 
		RPAREN=31, LCURLY=32, RCURLY=33, LBRACKET=34, RBRACKET=35, SEMI=36, DOT=37, 
		COMMA=38, COLON=39, NEWLINE=40, ASSIGN=41, PLUSASSIGN=42, MULTASSIGN=43, 
		DIVASSIGN=44, MODASSIGN=45, MINUSASSIGN=46, QUOTE=47, DOLLAR=48, INT_T=49, 
		FLOAT_T=50, STRING_T=51, BOOL_T=52, VOID_T=53, BOOL=54, INT=55, FLOAT=56, 
		SIMPLE_STRING=57, STRING_START=58, STRING_MIDDLE=59, STRING_END=60, SPACES=61, 
		ID=62;
	public const int
		RULE_object_t = 0, RULE_array_t = 1, RULE_primitiveType = 2, RULE_complexType = 3, 
		RULE_type = 4, RULE_augmentedString = 5, RULE_string = 6, RULE_compoundasign = 7, 
		RULE_int = 8, RULE_float = 9, RULE_bool = 10, RULE_num = 11, RULE_value = 12, 
		RULE_id = 13, RULE_argument = 14, RULE_stringId = 15, RULE_fieldId = 16, 
		RULE_adapting = 17, RULE_object = 18, RULE_field = 19, RULE_arrayElement = 20, 
		RULE_array = 21, RULE_arrayAccess = 22, RULE_evaluaterArray = 23, RULE_templateField = 24, 
		RULE_templateExtention = 25, RULE_templateDefenition = 26, RULE_functionCollection = 27, 
		RULE_arguments = 28, RULE_method = 29, RULE_functionCollectionCall = 30, 
		RULE_methodCall = 31, RULE_expr = 32, RULE_stringExpr = 33, RULE_numExpr = 34, 
		RULE_boolExpr = 35, RULE_compExpr = 36, RULE_ifStatement = 37, RULE_conditional = 38, 
		RULE_whileLoop = 39, RULE_forLoop = 40, RULE_loopConstructContent = 41, 
		RULE_loopConstruction = 42, RULE_return_ = 43, RULE_statementList = 44, 
		RULE_statement = 45, RULE_assignment = 46, RULE_root = 47;
	public static readonly string[] ruleNames = {
		"object_t", "array_t", "primitiveType", "complexType", "type", "augmentedString", 
		"string", "compoundasign", "int", "float", "bool", "num", "value", "id", 
		"argument", "stringId", "fieldId", "adapting", "object", "field", "arrayElement", 
		"array", "arrayAccess", "evaluaterArray", "templateField", "templateExtention", 
		"templateDefenition", "functionCollection", "arguments", "method", "functionCollectionCall", 
		"methodCall", "expr", "stringExpr", "numExpr", "boolExpr", "compExpr", 
		"ifStatement", "conditional", "whileLoop", "forLoop", "loopConstructContent", 
		"loopConstruction", "return_", "statementList", "statement", "assignment", 
		"root"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'if'", "'else'", "'while'", "'for'", "'return'", "'template'", 
		"'in'", "'hidden'", "'object'", "'methods'", "'extends'", "'null'", "'*'", 
		"'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", "'!='", "'>'", "'<'", 
		"'>='", "'<='", "'!'", "'?'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "'.'", "','", "':'", "'\\n'", "'='", "'+='", "'*='", "'/='", "'%='", 
		"'-='", "'\"'", "'$'", "'int'", "'float'", "'string'", "'bool'", "'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "IF", "ELSE", "WHILE", "FOR", "RETURN", "TEMPLATE_KEYWORD", 
		"IN", "HIDDEN_", "OBJECT_KEYWORD", "FUNCTIONS_KEYWORD", "EXTENDS_KEYWORD", 
		"NULL", "MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", "OR", "EQ", "NEQ", 
		"GT", "LT", "GTE", "LTE", "NOT", "QUESTION", "LPAREN", "RPAREN", "LCURLY", 
		"RCURLY", "LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", "COLON", "NEWLINE", 
		"ASSIGN", "PLUSASSIGN", "MULTASSIGN", "DIVASSIGN", "MODASSIGN", "MINUSASSIGN", 
		"QUOTE", "DOLLAR", "INT_T", "FLOAT_T", "STRING_T", "BOOL_T", "VOID_T", 
		"BOOL", "INT", "FLOAT", "SIMPLE_STRING", "STRING_START", "STRING_MIDDLE", 
		"STRING_END", "SPACES", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UCM.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UCMParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UCMParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UCMParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Object_tContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_KEYWORD() { return GetToken(UCMParser.OBJECT_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UCMParser.ID, 0); }
		public Object_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_t(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_tContext object_t() {
		Object_tContext _localctx = new Object_tContext(Context, State);
		EnterRule(_localctx, 0, RULE_object_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_la = TokenStream.LA(1);
			if ( !(_la==OBJECT_KEYWORD || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_tContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_T() { return GetToken(UCMParser.STRING_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(UCMParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(UCMParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(UCMParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(UCMParser.RBRACKET, i);
		}
		public Array_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_t(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_tContext array_t() {
		Array_tContext _localctx = new Array_tContext(Context, State);
		EnterRule(_localctx, 2, RULE_array_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_T:
			case FLOAT_T:
			case BOOL_T:
			case VOID_T:
				{
				State = 98;
				primitiveType();
				}
				break;
			case OBJECT_KEYWORD:
			case ID:
				{
				State = 99;
				object_t();
				}
				break;
			case STRING_T:
				{
				State = 100;
				Match(STRING_T);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 103;
				Match(LBRACKET);
				State = 104;
				Match(RBRACKET);
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LBRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_T() { return GetToken(UCMParser.INT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_T() { return GetToken(UCMParser.FLOAT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_T() { return GetToken(UCMParser.BOOL_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_T() { return GetToken(UCMParser.VOID_T, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15199648742375424L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_tContext array_t() {
			return GetRuleContext<Array_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_T() { return GetToken(UCMParser.STRING_T, 0); }
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_complexType);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				object_t();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				array_t();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				Match(STRING_T);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				complexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AugmentedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_START() { return GetToken(UCMParser.STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_END() { return GetToken(UCMParser.STRING_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_MIDDLE() { return GetTokens(UCMParser.STRING_MIDDLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_MIDDLE(int i) {
			return GetToken(UCMParser.STRING_MIDDLE, i);
		}
		public AugmentedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_augmentedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAugmentedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AugmentedStringContext augmentedString() {
		AugmentedStringContext _localctx = new AugmentedStringContext(Context, State);
		EnterRule(_localctx, 10, RULE_augmentedString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(STRING_START);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5170132395038621696L) != 0)) {
				{
				State = 121;
				expr();
				}
			}

			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING_MIDDLE) {
				{
				{
				State = 124;
				Match(STRING_MIDDLE);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5170132395038621696L) != 0)) {
					{
					State = 125;
					expr();
					}
				}

				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 133;
			Match(STRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_STRING() { return GetToken(UCMParser.SIMPLE_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 12, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(SIMPLE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundasignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(UCMParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTASSIGN() { return GetToken(UCMParser.MULTASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVASSIGN() { return GetToken(UCMParser.DIVASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODASSIGN() { return GetToken(UCMParser.MODASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(UCMParser.MINUSASSIGN, 0); }
		public CompoundasignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundasign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundasign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundasignContext compoundasign() {
		CompoundasignContext _localctx = new CompoundasignContext(Context, State);
		EnterRule(_localctx, 14, RULE_compoundasign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 136339441844224L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(UCMParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(UCMParser.MINUS, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 16, RULE_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 139;
				Match(MINUS);
				}
			}

			State = 142;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(UCMParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(UCMParser.MINUS, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 18, RULE_float);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 144;
				Match(MINUS);
				}
			}

			State = 147;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UCMParser.BOOL, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 20, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 22, RULE_num);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				@int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				@float();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugmentedStringContext augmentedString() {
			return GetRuleContext<AugmentedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(UCMParser.NULL, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_value);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				num();
				}
				break;
			case STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				augmentedString();
				}
				break;
			case SIMPLE_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 157;
				@string();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 158;
				@bool();
				}
				break;
			case LCURLY:
			case ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 159;
				@object();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 6);
				{
				State = 160;
				array();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 161;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UCMParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 26, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 28, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			type();
			State = 167;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		public StringIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringIdContext stringId() {
		StringIdContext _localctx = new StringIdContext(Context, State);
		EnterRule(_localctx, 30, RULE_stringId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(LPAREN);
			State = 170;
			expr();
			State = 171;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringIdContext stringId() {
			return GetRuleContext<StringIdContext>(0);
		}
		public FieldIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldIdContext fieldId() {
		FieldIdContext _localctx = new FieldIdContext(Context, State);
		EnterRule(_localctx, 32, RULE_fieldId);
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				id();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174;
				stringId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdaptingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AdaptingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adapting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdapting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdaptingContext adapting() {
		AdaptingContext _localctx = new AdaptingContext(Context, State);
		EnterRule(_localctx, 34, RULE_adapting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AdaptingContext adapting() {
			return GetRuleContext<AdaptingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopConstructionContext[] loopConstruction() {
			return GetRuleContexts<LoopConstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopConstructionContext loopConstruction(int i) {
			return GetRuleContext<LoopConstructionContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 36, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 179;
				adapting();
				}
			}

			State = 182;
			Match(LCURLY);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4629137468057193536L) != 0)) {
				{
				State = 185;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HIDDEN_:
				case OBJECT_KEYWORD:
				case LPAREN:
				case INT_T:
				case FLOAT_T:
				case STRING_T:
				case BOOL_T:
				case VOID_T:
				case ID:
					{
					State = 183;
					field();
					}
					break;
				case FOR:
					{
					State = 184;
					loopConstruction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldIdContext fieldId() {
			return GetRuleContext<FieldIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundasignContext compoundasign() {
			return GetRuleContext<CompoundasignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDDEN_() { return GetToken(UCMParser.HIDDEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 38, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HIDDEN_) {
				{
				State = 192;
				Match(HIDDEN_);
				}
			}

			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 195;
				type();
				}
				break;
			}
			State = 198;
			fieldId();
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 199;
				Match(ASSIGN);
				}
				break;
			case PLUSASSIGN:
			case MULTASSIGN:
			case DIVASSIGN:
			case MODASSIGN:
			case MINUSASSIGN:
				{
				State = 200;
				compoundasign();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 203;
			expr();
			State = 204;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopConstructionContext loopConstruction() {
			return GetRuleContext<LoopConstructionContext>(0);
		}
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrayElement);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case BOOL:
			case INT:
			case FLOAT:
			case SIMPLE_STRING:
			case STRING_START:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				expr();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				loopConstruction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 42, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(LBRACKET);
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case BOOL:
			case INT:
			case FLOAT:
			case SIMPLE_STRING:
			case STRING_START:
			case ID:
				{
				State = 211;
				arrayElement();
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 212;
					Match(COMMA);
					State = 213;
					arrayElement();
					}
					}
					State = 218;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 222;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 44, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			id();
			State = 225;
			Match(LBRACKET);
			State = 226;
			expr();
			State = 227;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluaterArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public EvaluaterArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluaterArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluaterArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluaterArrayContext evaluaterArray() {
		EvaluaterArrayContext _localctx = new EvaluaterArrayContext(Context, State);
		EnterRule(_localctx, 46, RULE_evaluaterArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(LBRACKET);
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case BOOL:
			case INT:
			case FLOAT:
			case SIMPLE_STRING:
			case STRING_START:
			case ID:
				{
				State = 230;
				expr();
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 231;
					Match(COMMA);
					State = 232;
					expr();
					}
					}
					State = 237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 241;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UCMParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluaterArrayContext evaluaterArray() {
			return GetRuleContext<EvaluaterArrayContext>(0);
		}
		public TemplateFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateFieldContext templateField() {
		TemplateFieldContext _localctx = new TemplateFieldContext(Context, State);
		EnterRule(_localctx, 48, RULE_templateField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			type();
			State = 244;
			id();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 245;
				Match(ASSIGN);
				State = 246;
				expr();
				}
			}

			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 249;
				Match(COLON);
				State = 250;
				evaluaterArray();
				}
			}

			State = 253;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateExtentionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS_KEYWORD() { return GetToken(UCMParser.EXTENDS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public TemplateExtentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateExtention; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateExtention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateExtentionContext templateExtention() {
		TemplateExtentionContext _localctx = new TemplateExtentionContext(Context, State);
		EnterRule(_localctx, 50, RULE_templateExtention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(EXTENDS_KEYWORD);
			State = 256;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefenitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE_KEYWORD() { return GetToken(UCMParser.TEMPLATE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateExtentionContext templateExtention() {
			return GetRuleContext<TemplateExtentionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateFieldContext[] templateField() {
			return GetRuleContexts<TemplateFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateFieldContext templateField(int i) {
			return GetRuleContext<TemplateFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public TemplateDefenitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefenition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefenition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefenitionContext templateDefenition() {
		TemplateDefenitionContext _localctx = new TemplateDefenitionContext(Context, State);
		EnterRule(_localctx, 52, RULE_templateDefenition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(TEMPLATE_KEYWORD);
			State = 259;
			id();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS_KEYWORD) {
				{
				State = 260;
				templateExtention();
				}
			}

			State = 263;
			Match(LCURLY);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4629137466983450624L) != 0)) {
				{
				State = 266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 264;
					templateField();
					}
					break;
				case 2:
					{
					State = 265;
					method();
					}
					break;
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 271;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS_KEYWORD() { return GetToken(UCMParser.FUNCTIONS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public FunctionCollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCollectionContext functionCollection() {
		FunctionCollectionContext _localctx = new FunctionCollectionContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionCollection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(FUNCTIONS_KEYWORD);
			State = 274;
			id();
			State = 275;
			Match(LCURLY);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4629137466983450624L) != 0)) {
				{
				{
				State = 276;
				method();
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 282;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 56, RULE_arguments);
		int _la;
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBJECT_KEYWORD:
			case INT_T:
			case FLOAT_T:
			case STRING_T:
			case BOOL_T:
			case VOID_T:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284;
				argument();
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 285;
					Match(COMMA);
					State = 286;
					argument();
					}
					}
					State = 291;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 58, RULE_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			type();
			State = 296;
			id();
			State = 297;
			Match(LPAREN);
			State = 298;
			arguments();
			State = 299;
			Match(RPAREN);
			State = 300;
			Match(LCURLY);
			State = 301;
			statementList();
			State = 302;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCollectionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(UCMParser.DOT, 0); }
		public FunctionCollectionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCollectionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCollectionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCollectionCallContext functionCollectionCall() {
		FunctionCollectionCallContext _localctx = new FunctionCollectionCallContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionCollectionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			id();
			State = 305;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionCallContext functionCollectionCall() {
			return GetRuleContext<FunctionCollectionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 62, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 307;
				functionCollectionCall();
				}
				break;
			}
			State = 310;
			id();
			State = 311;
			Match(LPAREN);
			State = 321;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case BOOL:
			case INT:
			case FLOAT:
			case SIMPLE_STRING:
			case STRING_START:
			case ID:
				{
				State = 312;
				expr();
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 313;
					Match(COMMA);
					State = 314;
					expr();
					}
					}
					State = 319;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 323;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr() {
			return GetRuleContext<NumExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 64, RULE_expr);
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325;
				value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326;
				id();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 327;
				arrayAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 328;
				methodCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 329;
				boolExpr(0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 330;
				numExpr(0);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 331;
				stringExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugmentedStringContext augmentedString() {
			return GetRuleContext<AugmentedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext[] stringExpr() {
			return GetRuleContexts<StringExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr(int i) {
			return GetRuleContext<StringExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(UCMParser.PLUS, 0); }
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		return stringExpr(0);
	}

	private StringExprContext stringExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StringExprContext _localctx = new StringExprContext(Context, _parentState);
		StringExprContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_stringExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 335;
				id();
				}
				break;
			case 2:
				{
				State = 336;
				arrayAccess();
				}
				break;
			case 3:
				{
				State = 337;
				methodCall();
				}
				break;
			case 4:
				{
				State = 338;
				augmentedString();
				}
				break;
			case 5:
				{
				State = 339;
				@string();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 347;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StringExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_stringExpr);
					State = 342;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 343;
					Match(PLUS);
					State = 344;
					stringExpr(7);
					}
					} 
				}
				State = 349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(UCMParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext[] numExpr() {
			return GetRuleContexts<NumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr(int i) {
			return GetRuleContext<NumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(UCMParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(UCMParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(UCMParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(UCMParser.PLUS, 0); }
		public NumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumExprContext numExpr() {
		return numExpr(0);
	}

	private NumExprContext numExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumExprContext _localctx = new NumExprContext(Context, _parentState);
		NumExprContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_numExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 351;
				num();
				}
				break;
			case 2:
				{
				State = 352;
				id();
				}
				break;
			case 3:
				{
				State = 353;
				methodCall();
				}
				break;
			case 4:
				{
				State = 354;
				arrayAccess();
				}
				break;
			case 5:
				{
				State = 355;
				Match(MINUS);
				State = 356;
				numExpr(4);
				}
				break;
			case 6:
				{
				State = 357;
				Match(LPAREN);
				State = 358;
				numExpr(0);
				State = 359;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 369;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						_localctx = new NumExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numExpr);
						State = 363;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 364;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 622592L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 365;
						numExpr(4);
						}
						break;
					case 2:
						{
						_localctx = new NumExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numExpr);
						State = 366;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 367;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 368;
						numExpr(3);
						}
						break;
					}
					} 
				}
				State = 373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(UCMParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext[] boolExpr() {
			return GetRuleContexts<BoolExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr(int i) {
			return GetRuleContext<BoolExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompExprContext compExpr() {
			return GetRuleContext<CompExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(UCMParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(UCMParser.OR, 0); }
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		return boolExpr(0);
	}

	private BoolExprContext boolExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExprContext _localctx = new BoolExprContext(Context, _parentState);
		BoolExprContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_boolExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 375;
				value();
				}
				break;
			case 2:
				{
				State = 376;
				id();
				}
				break;
			case 3:
				{
				State = 377;
				methodCall();
				}
				break;
			case 4:
				{
				State = 378;
				Match(NOT);
				State = 379;
				boolExpr(5);
				}
				break;
			case 5:
				{
				State = 380;
				Match(LPAREN);
				State = 381;
				boolExpr(0);
				State = 382;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 398;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 396;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
					case 1:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 386;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 387;
						compExpr();
						State = 388;
						boolExpr(5);
						}
						break;
					case 2:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 390;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 391;
						Match(AND);
						State = 392;
						boolExpr(4);
						}
						break;
					case 3:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 393;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 394;
						Match(OR);
						State = 395;
						boolExpr(3);
						}
						break;
					}
					} 
				}
				State = 400;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UCMParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UCMParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(UCMParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(UCMParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(UCMParser.NEQ, 0); }
		public CompExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompExprContext compExpr() {
		CompExprContext _localctx = new CompExprContext(Context, State);
		EnterRule(_localctx, 72, RULE_compExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 264241152L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(UCMParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(IF);
			State = 404;
			Match(LPAREN);
			State = 405;
			expr();
			State = 406;
			Match(RPAREN);
			State = 407;
			Match(LCURLY);
			State = 408;
			statementList();
			State = 409;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext[] ifStatement() {
			return GetRuleContexts<IfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement(int i) {
			return GetRuleContext<IfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(UCMParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(UCMParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 76, RULE_conditional);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			ifStatement();
			State = 416;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 412;
					Match(ELSE);
					State = 413;
					ifStatement();
					}
					} 
				}
				State = 418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 419;
				Match(ELSE);
				State = 420;
				Match(LCURLY);
				State = 421;
				statementList();
				State = 422;
				Match(RCURLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(UCMParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 78, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(WHILE);
			State = 427;
			Match(LPAREN);
			State = 428;
			expr();
			State = 429;
			Match(RPAREN);
			State = 430;
			Match(LCURLY);
			State = 431;
			statementList();
			State = 432;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UCMParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(UCMParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 80, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			Match(FOR);
			State = 435;
			Match(LPAREN);
			State = 436;
			id();
			State = 437;
			Match(IN);
			State = 438;
			expr();
			State = 439;
			Match(RPAREN);
			State = 440;
			Match(LCURLY);
			State = 441;
			statementList();
			State = 442;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopConstructContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LoopConstructContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopConstructContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopConstructContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopConstructContentContext loopConstructContent() {
		LoopConstructContentContext _localctx = new LoopConstructContentContext(Context, State);
		EnterRule(_localctx, 82, RULE_loopConstructContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5187583843594685440L) != 0)) {
				{
				State = 446;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 444;
					field();
					}
					break;
				case 2:
					{
					State = 445;
					expr();
					}
					break;
				}
				}
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopConstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UCMParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(UCMParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopConstructContentContext loopConstructContent() {
			return GetRuleContext<LoopConstructContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public LoopConstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopConstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopConstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopConstructionContext loopConstruction() {
		LoopConstructionContext _localctx = new LoopConstructionContext(Context, State);
		EnterRule(_localctx, 84, RULE_loopConstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(FOR);
			State = 452;
			Match(LPAREN);
			State = 453;
			id();
			State = 454;
			Match(IN);
			State = 455;
			expr();
			State = 456;
			Match(RPAREN);
			State = 457;
			Match(LCURLY);
			State = 458;
			loopConstructContent();
			State = 459;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(UCMParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Return_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_Context return_() {
		Return_Context _localctx = new Return_Context(Context, State);
		EnterRule(_localctx, 86, RULE_return_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(RETURN);
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5170132395038621696L) != 0)) {
				{
				State = 462;
				expr();
				}
			}

			State = 465;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 88, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4629137468057193704L) != 0)) {
				{
				{
				State = 467;
				statement();
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_Context return_() {
			return GetRuleContext<Return_Context>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_statement);
		try {
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473;
				conditional();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 475;
				whileLoop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 476;
				forLoop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 477;
				methodCall();
				State = 478;
				Match(SEMI);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 480;
				method();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 481;
				field();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 482;
				return_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundasignContext compoundasign() {
			return GetRuleContext<CompoundasignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 92, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 485;
				type();
				}
				break;
			}
			State = 490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 488;
				id();
				}
				break;
			case 2:
				{
				State = 489;
				arrayAccess();
				}
				break;
			}
			State = 494;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 492;
				Match(ASSIGN);
				}
				break;
			case PLUSASSIGN:
			case MULTASSIGN:
			case DIVASSIGN:
			case MODASSIGN:
			case MINUSASSIGN:
				{
				State = 493;
				compoundasign();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 496;
			expr();
			State = 497;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDefenitionContext[] templateDefenition() {
			return GetRuleContexts<TemplateDefenitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDefenitionContext templateDefenition(int i) {
			return GetRuleContext<TemplateDefenitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionContext[] functionCollection() {
			return GetRuleContexts<FunctionCollectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionContext functionCollection(int i) {
			return GetRuleContext<FunctionCollectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopConstructionContext[] loopConstruction() {
			return GetRuleContexts<LoopConstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopConstructionContext loopConstruction(int i) {
			return GetRuleContext<LoopConstructionContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 94, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4629137468057197888L) != 0)) {
				{
				State = 503;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPLATE_KEYWORD:
					{
					State = 499;
					templateDefenition();
					}
					break;
				case FUNCTIONS_KEYWORD:
					{
					State = 500;
					functionCollection();
					}
					break;
				case HIDDEN_:
				case OBJECT_KEYWORD:
				case LPAREN:
				case INT_T:
				case FLOAT_T:
				case STRING_T:
				case BOOL_T:
				case VOID_T:
				case ID:
					{
					State = 501;
					field();
					}
					break;
				case FOR:
					{
					State = 502;
					loopConstruction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 33: return stringExpr_sempred((StringExprContext)_localctx, predIndex);
		case 34: return numExpr_sempred((NumExprContext)_localctx, predIndex);
		case 35: return boolExpr_sempred((BoolExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool stringExpr_sempred(StringExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		}
		return true;
	}
	private bool numExpr_sempred(NumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool boolExpr_sempred(BoolExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,62,509,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,1,1,
		3,1,102,8,1,1,1,1,1,4,1,106,8,1,11,1,12,1,107,1,2,1,2,1,3,1,3,1,3,3,3,
		115,8,3,1,4,1,4,3,4,119,8,4,1,5,1,5,3,5,123,8,5,1,5,1,5,3,5,127,8,5,5,
		5,129,8,5,10,5,12,5,132,9,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,3,8,141,8,8,1,
		8,1,8,1,9,3,9,146,8,9,1,9,1,9,1,10,1,10,1,11,1,11,3,11,154,8,11,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,3,12,163,8,12,1,13,1,13,1,14,1,14,1,14,1,15,
		1,15,1,15,1,15,1,16,1,16,3,16,176,8,16,1,17,1,17,1,18,3,18,181,8,18,1,
		18,1,18,1,18,5,18,186,8,18,10,18,12,18,189,9,18,1,18,1,18,1,19,3,19,194,
		8,19,1,19,3,19,197,8,19,1,19,1,19,1,19,3,19,202,8,19,1,19,1,19,1,19,1,
		20,1,20,3,20,209,8,20,1,21,1,21,1,21,1,21,5,21,215,8,21,10,21,12,21,218,
		9,21,1,21,3,21,221,8,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
		23,1,23,5,23,234,8,23,10,23,12,23,237,9,23,1,23,3,23,240,8,23,1,23,1,23,
		1,24,1,24,1,24,1,24,3,24,248,8,24,1,24,1,24,3,24,252,8,24,1,24,1,24,1,
		25,1,25,1,25,1,26,1,26,1,26,3,26,262,8,26,1,26,1,26,1,26,5,26,267,8,26,
		10,26,12,26,270,9,26,1,26,1,26,1,27,1,27,1,27,1,27,5,27,278,8,27,10,27,
		12,27,281,9,27,1,27,1,27,1,28,1,28,1,28,5,28,288,8,28,10,28,12,28,291,
		9,28,1,28,3,28,294,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
		30,1,30,1,30,1,31,3,31,309,8,31,1,31,1,31,1,31,1,31,1,31,5,31,316,8,31,
		10,31,12,31,319,9,31,1,31,3,31,322,8,31,1,31,1,31,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,3,32,333,8,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,341,8,
		33,1,33,1,33,1,33,5,33,346,8,33,10,33,12,33,349,9,33,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,362,8,34,1,34,1,34,1,34,1,34,
		1,34,1,34,5,34,370,8,34,10,34,12,34,373,9,34,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,3,35,385,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,5,35,397,8,35,10,35,12,35,400,9,35,1,36,1,36,1,37,1,
		37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,5,38,415,8,38,10,38,12,
		38,418,9,38,1,38,1,38,1,38,1,38,1,38,3,38,425,8,38,1,39,1,39,1,39,1,39,
		1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
		1,41,1,41,5,41,447,8,41,10,41,12,41,450,9,41,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,1,42,1,42,1,43,1,43,3,43,464,8,43,1,43,1,43,1,44,5,44,469,
		8,44,10,44,12,44,472,9,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
		1,45,3,45,484,8,45,1,46,3,46,487,8,46,1,46,1,46,3,46,491,8,46,1,46,1,46,
		3,46,495,8,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,504,8,47,10,47,12,
		47,507,9,47,1,47,0,3,66,68,70,48,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		76,78,80,82,84,86,88,90,92,94,0,6,2,0,11,11,62,62,2,0,49,50,52,53,1,0,
		42,46,2,0,15,16,19,19,1,0,17,18,1,0,22,27,546,0,96,1,0,0,0,2,101,1,0,0,
		0,4,109,1,0,0,0,6,114,1,0,0,0,8,118,1,0,0,0,10,120,1,0,0,0,12,135,1,0,
		0,0,14,137,1,0,0,0,16,140,1,0,0,0,18,145,1,0,0,0,20,149,1,0,0,0,22,153,
		1,0,0,0,24,162,1,0,0,0,26,164,1,0,0,0,28,166,1,0,0,0,30,169,1,0,0,0,32,
		175,1,0,0,0,34,177,1,0,0,0,36,180,1,0,0,0,38,193,1,0,0,0,40,208,1,0,0,
		0,42,210,1,0,0,0,44,224,1,0,0,0,46,229,1,0,0,0,48,243,1,0,0,0,50,255,1,
		0,0,0,52,258,1,0,0,0,54,273,1,0,0,0,56,293,1,0,0,0,58,295,1,0,0,0,60,304,
		1,0,0,0,62,308,1,0,0,0,64,332,1,0,0,0,66,340,1,0,0,0,68,361,1,0,0,0,70,
		384,1,0,0,0,72,401,1,0,0,0,74,403,1,0,0,0,76,411,1,0,0,0,78,426,1,0,0,
		0,80,434,1,0,0,0,82,448,1,0,0,0,84,451,1,0,0,0,86,461,1,0,0,0,88,470,1,
		0,0,0,90,483,1,0,0,0,92,486,1,0,0,0,94,505,1,0,0,0,96,97,7,0,0,0,97,1,
		1,0,0,0,98,102,3,4,2,0,99,102,3,0,0,0,100,102,5,51,0,0,101,98,1,0,0,0,
		101,99,1,0,0,0,101,100,1,0,0,0,102,105,1,0,0,0,103,104,5,34,0,0,104,106,
		5,35,0,0,105,103,1,0,0,0,106,107,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,
		0,108,3,1,0,0,0,109,110,7,1,0,0,110,5,1,0,0,0,111,115,3,0,0,0,112,115,
		3,2,1,0,113,115,5,51,0,0,114,111,1,0,0,0,114,112,1,0,0,0,114,113,1,0,0,
		0,115,7,1,0,0,0,116,119,3,4,2,0,117,119,3,6,3,0,118,116,1,0,0,0,118,117,
		1,0,0,0,119,9,1,0,0,0,120,122,5,58,0,0,121,123,3,64,32,0,122,121,1,0,0,
		0,122,123,1,0,0,0,123,130,1,0,0,0,124,126,5,59,0,0,125,127,3,64,32,0,126,
		125,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,124,1,0,0,0,129,132,1,
		0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,
		133,134,5,60,0,0,134,11,1,0,0,0,135,136,5,57,0,0,136,13,1,0,0,0,137,138,
		7,2,0,0,138,15,1,0,0,0,139,141,5,18,0,0,140,139,1,0,0,0,140,141,1,0,0,
		0,141,142,1,0,0,0,142,143,5,55,0,0,143,17,1,0,0,0,144,146,5,18,0,0,145,
		144,1,0,0,0,145,146,1,0,0,0,146,147,1,0,0,0,147,148,5,56,0,0,148,19,1,
		0,0,0,149,150,5,54,0,0,150,21,1,0,0,0,151,154,3,16,8,0,152,154,3,18,9,
		0,153,151,1,0,0,0,153,152,1,0,0,0,154,23,1,0,0,0,155,163,3,22,11,0,156,
		163,3,10,5,0,157,163,3,12,6,0,158,163,3,20,10,0,159,163,3,36,18,0,160,
		163,3,42,21,0,161,163,5,14,0,0,162,155,1,0,0,0,162,156,1,0,0,0,162,157,
		1,0,0,0,162,158,1,0,0,0,162,159,1,0,0,0,162,160,1,0,0,0,162,161,1,0,0,
		0,163,25,1,0,0,0,164,165,5,62,0,0,165,27,1,0,0,0,166,167,3,8,4,0,167,168,
		3,26,13,0,168,29,1,0,0,0,169,170,5,30,0,0,170,171,3,64,32,0,171,172,5,
		31,0,0,172,31,1,0,0,0,173,176,3,26,13,0,174,176,3,30,15,0,175,173,1,0,
		0,0,175,174,1,0,0,0,176,33,1,0,0,0,177,178,3,26,13,0,178,35,1,0,0,0,179,
		181,3,34,17,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,187,
		5,32,0,0,183,186,3,38,19,0,184,186,3,84,42,0,185,183,1,0,0,0,185,184,1,
		0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,
		189,187,1,0,0,0,190,191,5,33,0,0,191,37,1,0,0,0,192,194,5,10,0,0,193,192,
		1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,197,3,8,4,0,196,195,1,0,0,
		0,196,197,1,0,0,0,197,198,1,0,0,0,198,201,3,32,16,0,199,202,5,41,0,0,200,
		202,3,14,7,0,201,199,1,0,0,0,201,200,1,0,0,0,202,203,1,0,0,0,203,204,3,
		64,32,0,204,205,5,36,0,0,205,39,1,0,0,0,206,209,3,64,32,0,207,209,3,84,
		42,0,208,206,1,0,0,0,208,207,1,0,0,0,209,41,1,0,0,0,210,220,5,34,0,0,211,
		216,3,40,20,0,212,213,5,38,0,0,213,215,3,40,20,0,214,212,1,0,0,0,215,218,
		1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,221,1,0,0,0,218,216,1,0,0,
		0,219,221,1,0,0,0,220,211,1,0,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,
		223,5,35,0,0,223,43,1,0,0,0,224,225,3,26,13,0,225,226,5,34,0,0,226,227,
		3,64,32,0,227,228,5,35,0,0,228,45,1,0,0,0,229,239,5,34,0,0,230,235,3,64,
		32,0,231,232,5,38,0,0,232,234,3,64,32,0,233,231,1,0,0,0,234,237,1,0,0,
		0,235,233,1,0,0,0,235,236,1,0,0,0,236,240,1,0,0,0,237,235,1,0,0,0,238,
		240,1,0,0,0,239,230,1,0,0,0,239,238,1,0,0,0,240,241,1,0,0,0,241,242,5,
		35,0,0,242,47,1,0,0,0,243,244,3,8,4,0,244,247,3,26,13,0,245,246,5,41,0,
		0,246,248,3,64,32,0,247,245,1,0,0,0,247,248,1,0,0,0,248,251,1,0,0,0,249,
		250,5,39,0,0,250,252,3,46,23,0,251,249,1,0,0,0,251,252,1,0,0,0,252,253,
		1,0,0,0,253,254,5,36,0,0,254,49,1,0,0,0,255,256,5,13,0,0,256,257,3,26,
		13,0,257,51,1,0,0,0,258,259,5,8,0,0,259,261,3,26,13,0,260,262,3,50,25,
		0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,268,5,32,0,0,264,
		267,3,48,24,0,265,267,3,58,29,0,266,264,1,0,0,0,266,265,1,0,0,0,267,270,
		1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,
		0,271,272,5,33,0,0,272,53,1,0,0,0,273,274,5,12,0,0,274,275,3,26,13,0,275,
		279,5,32,0,0,276,278,3,58,29,0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,
		1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,5,33,0,
		0,283,55,1,0,0,0,284,289,3,28,14,0,285,286,5,38,0,0,286,288,3,28,14,0,
		287,285,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,294,
		1,0,0,0,291,289,1,0,0,0,292,294,1,0,0,0,293,284,1,0,0,0,293,292,1,0,0,
		0,294,57,1,0,0,0,295,296,3,8,4,0,296,297,3,26,13,0,297,298,5,30,0,0,298,
		299,3,56,28,0,299,300,5,31,0,0,300,301,5,32,0,0,301,302,3,88,44,0,302,
		303,5,33,0,0,303,59,1,0,0,0,304,305,3,26,13,0,305,306,5,37,0,0,306,61,
		1,0,0,0,307,309,3,60,30,0,308,307,1,0,0,0,308,309,1,0,0,0,309,310,1,0,
		0,0,310,311,3,26,13,0,311,321,5,30,0,0,312,317,3,64,32,0,313,314,5,38,
		0,0,314,316,3,64,32,0,315,313,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,
		317,318,1,0,0,0,318,322,1,0,0,0,319,317,1,0,0,0,320,322,1,0,0,0,321,312,
		1,0,0,0,321,320,1,0,0,0,322,323,1,0,0,0,323,324,5,31,0,0,324,63,1,0,0,
		0,325,333,3,24,12,0,326,333,3,26,13,0,327,333,3,44,22,0,328,333,3,62,31,
		0,329,333,3,70,35,0,330,333,3,68,34,0,331,333,3,66,33,0,332,325,1,0,0,
		0,332,326,1,0,0,0,332,327,1,0,0,0,332,328,1,0,0,0,332,329,1,0,0,0,332,
		330,1,0,0,0,332,331,1,0,0,0,333,65,1,0,0,0,334,335,6,33,-1,0,335,341,3,
		26,13,0,336,341,3,44,22,0,337,341,3,62,31,0,338,341,3,10,5,0,339,341,3,
		12,6,0,340,334,1,0,0,0,340,336,1,0,0,0,340,337,1,0,0,0,340,338,1,0,0,0,
		340,339,1,0,0,0,341,347,1,0,0,0,342,343,10,6,0,0,343,344,5,17,0,0,344,
		346,3,66,33,7,345,342,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,
		1,0,0,0,348,67,1,0,0,0,349,347,1,0,0,0,350,351,6,34,-1,0,351,362,3,22,
		11,0,352,362,3,26,13,0,353,362,3,62,31,0,354,362,3,44,22,0,355,356,5,18,
		0,0,356,362,3,68,34,4,357,358,5,30,0,0,358,359,3,68,34,0,359,360,5,31,
		0,0,360,362,1,0,0,0,361,350,1,0,0,0,361,352,1,0,0,0,361,353,1,0,0,0,361,
		354,1,0,0,0,361,355,1,0,0,0,361,357,1,0,0,0,362,371,1,0,0,0,363,364,10,
		3,0,0,364,365,7,3,0,0,365,370,3,68,34,4,366,367,10,2,0,0,367,368,7,4,0,
		0,368,370,3,68,34,3,369,363,1,0,0,0,369,366,1,0,0,0,370,373,1,0,0,0,371,
		369,1,0,0,0,371,372,1,0,0,0,372,69,1,0,0,0,373,371,1,0,0,0,374,375,6,35,
		-1,0,375,385,3,24,12,0,376,385,3,26,13,0,377,385,3,62,31,0,378,379,5,28,
		0,0,379,385,3,70,35,5,380,381,5,30,0,0,381,382,3,70,35,0,382,383,5,31,
		0,0,383,385,1,0,0,0,384,374,1,0,0,0,384,376,1,0,0,0,384,377,1,0,0,0,384,
		378,1,0,0,0,384,380,1,0,0,0,385,398,1,0,0,0,386,387,10,4,0,0,387,388,3,
		72,36,0,388,389,3,70,35,5,389,397,1,0,0,0,390,391,10,3,0,0,391,392,5,20,
		0,0,392,397,3,70,35,4,393,394,10,2,0,0,394,395,5,21,0,0,395,397,3,70,35,
		3,396,386,1,0,0,0,396,390,1,0,0,0,396,393,1,0,0,0,397,400,1,0,0,0,398,
		396,1,0,0,0,398,399,1,0,0,0,399,71,1,0,0,0,400,398,1,0,0,0,401,402,7,5,
		0,0,402,73,1,0,0,0,403,404,5,3,0,0,404,405,5,30,0,0,405,406,3,64,32,0,
		406,407,5,31,0,0,407,408,5,32,0,0,408,409,3,88,44,0,409,410,5,33,0,0,410,
		75,1,0,0,0,411,416,3,74,37,0,412,413,5,4,0,0,413,415,3,74,37,0,414,412,
		1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,424,1,0,0,
		0,418,416,1,0,0,0,419,420,5,4,0,0,420,421,5,32,0,0,421,422,3,88,44,0,422,
		423,5,33,0,0,423,425,1,0,0,0,424,419,1,0,0,0,424,425,1,0,0,0,425,77,1,
		0,0,0,426,427,5,5,0,0,427,428,5,30,0,0,428,429,3,64,32,0,429,430,5,31,
		0,0,430,431,5,32,0,0,431,432,3,88,44,0,432,433,5,33,0,0,433,79,1,0,0,0,
		434,435,5,6,0,0,435,436,5,30,0,0,436,437,3,26,13,0,437,438,5,9,0,0,438,
		439,3,64,32,0,439,440,5,31,0,0,440,441,5,32,0,0,441,442,3,88,44,0,442,
		443,5,33,0,0,443,81,1,0,0,0,444,447,3,38,19,0,445,447,3,64,32,0,446,444,
		1,0,0,0,446,445,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,
		0,449,83,1,0,0,0,450,448,1,0,0,0,451,452,5,6,0,0,452,453,5,30,0,0,453,
		454,3,26,13,0,454,455,5,9,0,0,455,456,3,64,32,0,456,457,5,31,0,0,457,458,
		5,32,0,0,458,459,3,82,41,0,459,460,5,33,0,0,460,85,1,0,0,0,461,463,5,7,
		0,0,462,464,3,64,32,0,463,462,1,0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,
		465,466,5,36,0,0,466,87,1,0,0,0,467,469,3,90,45,0,468,467,1,0,0,0,469,
		472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,89,1,0,0,0,472,470,1,0,
		0,0,473,484,3,76,38,0,474,484,3,92,46,0,475,484,3,78,39,0,476,484,3,80,
		40,0,477,478,3,62,31,0,478,479,5,36,0,0,479,484,1,0,0,0,480,484,3,58,29,
		0,481,484,3,38,19,0,482,484,3,86,43,0,483,473,1,0,0,0,483,474,1,0,0,0,
		483,475,1,0,0,0,483,476,1,0,0,0,483,477,1,0,0,0,483,480,1,0,0,0,483,481,
		1,0,0,0,483,482,1,0,0,0,484,91,1,0,0,0,485,487,3,8,4,0,486,485,1,0,0,0,
		486,487,1,0,0,0,487,490,1,0,0,0,488,491,3,26,13,0,489,491,3,44,22,0,490,
		488,1,0,0,0,490,489,1,0,0,0,491,494,1,0,0,0,492,495,5,41,0,0,493,495,3,
		14,7,0,494,492,1,0,0,0,494,493,1,0,0,0,495,496,1,0,0,0,496,497,3,64,32,
		0,497,498,5,36,0,0,498,93,1,0,0,0,499,504,3,52,26,0,500,504,3,54,27,0,
		501,504,3,38,19,0,502,504,3,84,42,0,503,499,1,0,0,0,503,500,1,0,0,0,503,
		501,1,0,0,0,503,502,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,1,
		0,0,0,506,95,1,0,0,0,507,505,1,0,0,0,55,101,107,114,118,122,126,130,140,
		145,153,162,175,180,185,187,193,196,201,208,216,220,235,239,247,251,261,
		266,268,279,289,293,308,317,321,332,340,347,361,369,371,384,396,398,416,
		424,446,448,463,470,483,486,490,494,503,505
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
