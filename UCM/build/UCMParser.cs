//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UCM.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UCMParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, TEMPLATE_KEYWORD=8, 
		IN=9, HIDDEN_=10, OBJECT_KEYWORD=11, FUNCTIONS_KEYWORD=12, EXTENDS_KEYWORD=13, 
		THIS_KEYWORD=14, NULL=15, MULT=16, DIV=17, PLUS=18, MINUS=19, MOD=20, 
		AND=21, OR=22, EQ=23, NEQ=24, GT=25, LT=26, GTE=27, LTE=28, NOT=29, QUESTION=30, 
		LPAREN=31, RPAREN=32, LCURLY=33, RCURLY=34, LBRACKET=35, RBRACKET=36, 
		SEMI=37, DOT=38, COMMA=39, COLON=40, NEWLINE=41, ASSIGN=42, PLUSASSIGN=43, 
		MULTASSIGN=44, DIVASSIGN=45, MODASSIGN=46, MINUSASSIGN=47, QUOTE=48, DOLLAR=49, 
		INT_T=50, FLOAT_T=51, STRING_T=52, BOOL_T=53, VOID_T=54, BOOL=55, INT=56, 
		FLOAT=57, SIMPLE_STRING=58, STRING_START=59, STRING_MIDDLE=60, STRING_END=61, 
		SPACES=62, ID=63;
	public const int
		RULE_object_t = 0, RULE_array_t = 1, RULE_primitiveType = 2, RULE_complexType = 3, 
		RULE_type = 4, RULE_augmentedString = 5, RULE_string = 6, RULE_compoundasign = 7, 
		RULE_int = 8, RULE_float = 9, RULE_num = 10, RULE_value = 11, RULE_id = 12, 
		RULE_argument = 13, RULE_adapting = 14, RULE_object = 15, RULE_field = 16, 
		RULE_array = 17, RULE_arrayAccess = 18, RULE_evaluaterArray = 19, RULE_templateField = 20, 
		RULE_templateExtention = 21, RULE_templateDefenition = 22, RULE_functionCollection = 23, 
		RULE_arguments = 24, RULE_method = 25, RULE_functionCollectionCall = 26, 
		RULE_methodCall = 27, RULE_expr = 28, RULE_stringExpr = 29, RULE_numExpr = 30, 
		RULE_boolExpr = 31, RULE_compExpr = 32, RULE_ifStatement = 33, RULE_conditional = 34, 
		RULE_whileLoop = 35, RULE_forLoop = 36, RULE_listConstruction = 37, RULE_return_ = 38, 
		RULE_statementList = 39, RULE_statement = 40, RULE_assignment = 41, RULE_root = 42;
	public static readonly string[] ruleNames = {
		"object_t", "array_t", "primitiveType", "complexType", "type", "augmentedString", 
		"string", "compoundasign", "int", "float", "num", "value", "id", "argument", 
		"adapting", "object", "field", "array", "arrayAccess", "evaluaterArray", 
		"templateField", "templateExtention", "templateDefenition", "functionCollection", 
		"arguments", "method", "functionCollectionCall", "methodCall", "expr", 
		"stringExpr", "numExpr", "boolExpr", "compExpr", "ifStatement", "conditional", 
		"whileLoop", "forLoop", "listConstruction", "return_", "statementList", 
		"statement", "assignment", "root"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'if'", "'else'", "'while'", "'for'", "'return'", "'template'", 
		"'in'", "'hidden'", "'object'", "'methods'", "'extends'", "'this'", "'null'", 
		"'*'", "'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'!'", "'?'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "';'", "'.'", "','", "':'", "'\\n'", "'='", "'+='", "'*='", "'/='", 
		"'%='", "'-='", "'\"'", "'$'", "'int'", "'float'", "'string'", "'bool'", 
		"'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "IF", "ELSE", "WHILE", "FOR", "RETURN", "TEMPLATE_KEYWORD", 
		"IN", "HIDDEN_", "OBJECT_KEYWORD", "FUNCTIONS_KEYWORD", "EXTENDS_KEYWORD", 
		"THIS_KEYWORD", "NULL", "MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", 
		"OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", "QUESTION", "LPAREN", 
		"RPAREN", "LCURLY", "RCURLY", "LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", 
		"COLON", "NEWLINE", "ASSIGN", "PLUSASSIGN", "MULTASSIGN", "DIVASSIGN", 
		"MODASSIGN", "MINUSASSIGN", "QUOTE", "DOLLAR", "INT_T", "FLOAT_T", "STRING_T", 
		"BOOL_T", "VOID_T", "BOOL", "INT", "FLOAT", "SIMPLE_STRING", "STRING_START", 
		"STRING_MIDDLE", "STRING_END", "SPACES", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UCM.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UCMParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UCMParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UCMParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Object_tContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_KEYWORD() { return GetToken(UCMParser.OBJECT_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UCMParser.ID, 0); }
		public Object_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_t(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_tContext object_t() {
		Object_tContext _localctx = new Object_tContext(Context, State);
		EnterRule(_localctx, 0, RULE_object_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( !(_la==OBJECT_KEYWORD || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_tContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(UCMParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(UCMParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(UCMParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(UCMParser.RBRACKET, i);
		}
		public Array_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_t(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_tContext array_t() {
		Array_tContext _localctx = new Array_tContext(Context, State);
		EnterRule(_localctx, 2, RULE_array_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_T:
			case FLOAT_T:
			case BOOL_T:
			case VOID_T:
				{
				State = 88;
				primitiveType();
				}
				break;
			case OBJECT_KEYWORD:
			case ID:
				{
				State = 89;
				object_t();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 92;
				Match(LBRACKET);
				State = 93;
				Match(RBRACKET);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LBRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_T() { return GetToken(UCMParser.INT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_T() { return GetToken(UCMParser.FLOAT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_T() { return GetToken(UCMParser.BOOL_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_T() { return GetToken(UCMParser.VOID_T, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30399297484750848L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_tContext array_t() {
			return GetRuleContext<Array_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_T() { return GetToken(UCMParser.STRING_T, 0); }
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_complexType);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				object_t();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				array_t();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				Match(STRING_T);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				complexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AugmentedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_START() { return GetToken(UCMParser.STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_END() { return GetToken(UCMParser.STRING_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_MIDDLE() { return GetTokens(UCMParser.STRING_MIDDLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_MIDDLE(int i) {
			return GetToken(UCMParser.STRING_MIDDLE, i);
		}
		public AugmentedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_augmentedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAugmentedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AugmentedStringContext augmentedString() {
		AugmentedStringContext _localctx = new AugmentedStringContext(Context, State);
		EnterRule(_localctx, 10, RULE_augmentedString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(STRING_START);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8106479283632291840L) != 0)) {
				{
				State = 110;
				expr(0);
				}
			}

			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING_MIDDLE) {
				{
				{
				State = 113;
				Match(STRING_MIDDLE);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8106479283632291840L) != 0)) {
					{
					State = 114;
					expr(0);
					}
				}

				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 122;
			Match(STRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_STRING() { return GetToken(UCMParser.SIMPLE_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 12, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(SIMPLE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundasignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(UCMParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTASSIGN() { return GetToken(UCMParser.MULTASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVASSIGN() { return GetToken(UCMParser.DIVASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODASSIGN() { return GetToken(UCMParser.MODASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(UCMParser.MINUSASSIGN, 0); }
		public CompoundasignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundasign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundasign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundasignContext compoundasign() {
		CompoundasignContext _localctx = new CompoundasignContext(Context, State);
		EnterRule(_localctx, 14, RULE_compoundasign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 272678883688448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(UCMParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 16, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(UCMParser.FLOAT, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 18, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 20, RULE_num);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				@int();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				@float();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugmentedStringContext augmentedString() {
			return GetRuleContext<AugmentedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UCMParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(UCMParser.NULL, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				num();
				}
				break;
			case STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				augmentedString();
				}
				break;
			case SIMPLE_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138;
				@string();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 139;
				Match(BOOL);
				}
				break;
			case LCURLY:
			case ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 140;
				@object();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 6);
				{
				State = 141;
				array();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 142;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UCMParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 24, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 26, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			type();
			State = 148;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdaptingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AdaptingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adapting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdapting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdaptingContext adapting() {
		AdaptingContext _localctx = new AdaptingContext(Context, State);
		EnterRule(_localctx, 28, RULE_adapting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AdaptingContext adapting() {
			return GetRuleContext<AdaptingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 30, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 152;
				adapting();
				}
			}

			State = 155;
			Match(LCURLY);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9188469139742651392L) != 0)) {
				{
				{
				State = 156;
				field();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 162;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundasignContext compoundasign() {
			return GetRuleContext<CompoundasignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDDEN_() { return GetToken(UCMParser.HIDDEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 32, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HIDDEN_) {
				{
				State = 164;
				Match(HIDDEN_);
				}
			}

			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 167;
				type();
				}
				break;
			}
			State = 170;
			id();
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 171;
				Match(ASSIGN);
				}
				break;
			case PLUSASSIGN:
			case MULTASSIGN:
			case DIVASSIGN:
			case MODASSIGN:
			case MINUSASSIGN:
				{
				State = 172;
				compoundasign();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 175;
			expr(0);
			State = 176;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListConstructionContext listConstruction() {
			return GetRuleContext<ListConstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 34, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(LBRACKET);
			State = 189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case BOOL:
			case INT:
			case FLOAT:
			case SIMPLE_STRING:
			case STRING_START:
			case ID:
				{
				State = 179;
				expr(0);
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 180;
					Match(COMMA);
					State = 181;
					expr(0);
					}
					}
					State = 186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FOR:
				{
				State = 187;
				listConstruction();
				}
				break;
			case RBRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 191;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 36, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			id();
			State = 194;
			Match(LBRACKET);
			State = 195;
			expr(0);
			State = 196;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluaterArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext[] boolExpr() {
			return GetRuleContexts<BoolExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr(int i) {
			return GetRuleContext<BoolExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public EvaluaterArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluaterArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluaterArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluaterArrayContext evaluaterArray() {
		EvaluaterArrayContext _localctx = new EvaluaterArrayContext(Context, State);
		EnterRule(_localctx, 38, RULE_evaluaterArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(LBRACKET);
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case MINUS:
			case NOT:
			case LPAREN:
			case BOOL:
			case INT:
			case FLOAT:
			case ID:
				{
				State = 201;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 199;
					boolExpr(0);
					}
					break;
				case 2:
					{
					State = 200;
					id();
					}
					break;
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 203;
					Match(COMMA);
					State = 206;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						State = 204;
						boolExpr(0);
						}
						break;
					case 2:
						{
						State = 205;
						id();
						}
						break;
					}
					}
					}
					State = 212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 216;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UCMParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluaterArrayContext evaluaterArray() {
			return GetRuleContext<EvaluaterArrayContext>(0);
		}
		public TemplateFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateFieldContext templateField() {
		TemplateFieldContext _localctx = new TemplateFieldContext(Context, State);
		EnterRule(_localctx, 40, RULE_templateField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			type();
			State = 219;
			id();
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 220;
				Match(ASSIGN);
				State = 221;
				value();
				}
			}

			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 224;
				Match(COLON);
				State = 225;
				evaluaterArray();
				}
			}

			State = 228;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateExtentionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS_KEYWORD() { return GetToken(UCMParser.EXTENDS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public TemplateExtentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateExtention; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateExtention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateExtentionContext templateExtention() {
		TemplateExtentionContext _localctx = new TemplateExtentionContext(Context, State);
		EnterRule(_localctx, 42, RULE_templateExtention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(EXTENDS_KEYWORD);
			State = 231;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefenitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE_KEYWORD() { return GetToken(UCMParser.TEMPLATE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateExtentionContext templateExtention() {
			return GetRuleContext<TemplateExtentionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateFieldContext[] templateField() {
			return GetRuleContexts<TemplateFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateFieldContext templateField(int i) {
			return GetRuleContext<TemplateFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public TemplateDefenitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefenition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefenition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefenitionContext templateDefenition() {
		TemplateDefenitionContext _localctx = new TemplateDefenitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_templateDefenition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(TEMPLATE_KEYWORD);
			State = 234;
			id();
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS_KEYWORD) {
				{
				State = 235;
				templateExtention();
				}
			}

			State = 238;
			Match(LCURLY);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9188469139742652416L) != 0)) {
				{
				State = 241;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 239;
					templateField();
					}
					break;
				case 2:
					{
					State = 240;
					method();
					}
					break;
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			Match(RCURLY);
			State = 247;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS_KEYWORD() { return GetToken(UCMParser.FUNCTIONS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public FunctionCollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCollectionContext functionCollection() {
		FunctionCollectionContext _localctx = new FunctionCollectionContext(Context, State);
		EnterRule(_localctx, 46, RULE_functionCollection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(FUNCTIONS_KEYWORD);
			State = 250;
			id();
			State = 251;
			Match(LCURLY);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9188469139742652416L) != 0)) {
				{
				{
				State = 252;
				method();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 258;
			Match(RCURLY);
			State = 259;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 48, RULE_arguments);
		int _la;
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBJECT_KEYWORD:
			case INT_T:
			case FLOAT_T:
			case STRING_T:
			case BOOL_T:
			case VOID_T:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				argument();
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 262;
					Match(COMMA);
					State = 263;
					argument();
					}
					}
					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 50, RULE_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			type();
			State = 273;
			id();
			State = 274;
			Match(LPAREN);
			State = 275;
			arguments();
			State = 276;
			Match(RPAREN);
			State = 277;
			Match(LCURLY);
			State = 278;
			statementList();
			State = 279;
			Match(RCURLY);
			State = 280;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCollectionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(UCMParser.DOT, 0); }
		public FunctionCollectionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCollectionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCollectionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCollectionCallContext functionCollectionCall() {
		FunctionCollectionCallContext _localctx = new FunctionCollectionCallContext(Context, State);
		EnterRule(_localctx, 52, RULE_functionCollectionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			id();
			State = 283;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionCallContext functionCollectionCall() {
			return GetRuleContext<FunctionCollectionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 54, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 285;
				functionCollectionCall();
				}
				break;
			}
			State = 288;
			id();
			State = 289;
			Match(LPAREN);
			State = 299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case BOOL:
			case INT:
			case FLOAT:
			case SIMPLE_STRING:
			case STRING_START:
			case ID:
				{
				State = 290;
				expr(0);
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 291;
					Match(COMMA);
					State = 292;
					expr(0);
					}
					}
					State = 297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 301;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr() {
			return GetRuleContext<NumExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 304;
				value();
				}
				break;
			case 2:
				{
				State = 305;
				id();
				}
				break;
			case 3:
				{
				State = 306;
				arrayAccess();
				}
				break;
			case 4:
				{
				State = 307;
				methodCall();
				}
				break;
			case 5:
				{
				State = 308;
				boolExpr(0);
				}
				break;
			case 6:
				{
				State = 309;
				numExpr(0);
				}
				break;
			case 7:
				{
				State = 310;
				stringExpr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 313;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 314;
					Match(EQ);
					State = 315;
					expr(4);
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AugmentedStringContext augmentedString() {
			return GetRuleContext<AugmentedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext[] stringExpr() {
			return GetRuleContexts<StringExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr(int i) {
			return GetRuleContext<StringExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(UCMParser.PLUS, 0); }
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		return stringExpr(0);
	}

	private StringExprContext stringExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StringExprContext _localctx = new StringExprContext(Context, _parentState);
		StringExprContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_stringExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_START:
				{
				State = 322;
				augmentedString();
				}
				break;
			case SIMPLE_STRING:
				{
				State = 323;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StringExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_stringExpr);
					State = 326;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 327;
					Match(PLUS);
					State = 328;
					stringExpr(4);
					}
					} 
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_KEYWORD() { return GetToken(UCMParser.THIS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(UCMParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext[] numExpr() {
			return GetRuleContexts<NumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr(int i) {
			return GetRuleContext<NumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(UCMParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(UCMParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(UCMParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(UCMParser.PLUS, 0); }
		public NumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumExprContext numExpr() {
		return numExpr(0);
	}

	private NumExprContext numExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumExprContext _localctx = new NumExprContext(Context, _parentState);
		NumExprContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_numExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 335;
				num();
				}
				break;
			case 2:
				{
				State = 336;
				Match(THIS_KEYWORD);
				}
				break;
			case 3:
				{
				State = 337;
				id();
				}
				break;
			case 4:
				{
				State = 338;
				methodCall();
				}
				break;
			case 5:
				{
				State = 339;
				Match(MINUS);
				State = 340;
				numExpr(4);
				}
				break;
			case 6:
				{
				State = 341;
				Match(LPAREN);
				State = 342;
				numExpr(0);
				State = 343;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 355;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 353;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new NumExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numExpr);
						State = 347;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 348;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1245184L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 349;
						numExpr(4);
						}
						break;
					case 2:
						{
						_localctx = new NumExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numExpr);
						State = 350;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 351;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 352;
						numExpr(3);
						}
						break;
					}
					} 
				}
				State = 357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UCMParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_KEYWORD() { return GetToken(UCMParser.THIS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(UCMParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext[] numExpr() {
			return GetRuleContexts<NumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr(int i) {
			return GetRuleContext<NumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompExprContext compExpr() {
			return GetRuleContext<CompExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext[] boolExpr() {
			return GetRuleContexts<BoolExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr(int i) {
			return GetRuleContext<BoolExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(UCMParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(UCMParser.OR, 0); }
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		return boolExpr(0);
	}

	private BoolExprContext boolExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExprContext _localctx = new BoolExprContext(Context, _parentState);
		BoolExprContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_boolExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 359;
				Match(BOOL);
				}
				break;
			case 2:
				{
				State = 360;
				Match(THIS_KEYWORD);
				}
				break;
			case 3:
				{
				State = 361;
				id();
				}
				break;
			case 4:
				{
				State = 362;
				methodCall();
				}
				break;
			case 5:
				{
				State = 363;
				Match(NOT);
				State = 364;
				expr(0);
				}
				break;
			case 6:
				{
				State = 365;
				numExpr(0);
				State = 366;
				compExpr();
				State = 367;
				numExpr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 382;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 380;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 371;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 372;
						Match(EQ);
						State = 373;
						boolExpr(4);
						}
						break;
					case 2:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 374;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 375;
						Match(AND);
						State = 376;
						boolExpr(3);
						}
						break;
					case 3:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 377;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 378;
						Match(OR);
						State = 379;
						boolExpr(2);
						}
						break;
					}
					} 
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UCMParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UCMParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(UCMParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(UCMParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(UCMParser.NEQ, 0); }
		public CompExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompExprContext compExpr() {
		CompExprContext _localctx = new CompExprContext(Context, State);
		EnterRule(_localctx, 64, RULE_compExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(UCMParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(IF);
			State = 388;
			Match(LPAREN);
			State = 389;
			boolExpr(0);
			State = 390;
			Match(RPAREN);
			State = 391;
			Match(LCURLY);
			State = 392;
			statementList();
			State = 393;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext[] ifStatement() {
			return GetRuleContexts<IfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement(int i) {
			return GetRuleContext<IfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(UCMParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(UCMParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 68, RULE_conditional);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			ifStatement();
			State = 400;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 396;
					Match(ELSE);
					State = 397;
					ifStatement();
					}
					} 
				}
				State = 402;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 403;
				Match(ELSE);
				State = 404;
				Match(LCURLY);
				State = 405;
				statementList();
				State = 406;
				Match(RCURLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(UCMParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 70, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(WHILE);
			State = 411;
			Match(LPAREN);
			State = 412;
			boolExpr(0);
			State = 413;
			Match(RPAREN);
			State = 414;
			Match(LCURLY);
			State = 415;
			statementList();
			State = 416;
			Match(RCURLY);
			State = 417;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UCMParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(UCMParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 72, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(FOR);
			State = 420;
			Match(LPAREN);
			State = 421;
			id();
			State = 422;
			Match(IN);
			State = 425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				{
				State = 423;
				array();
				}
				break;
			case ID:
				{
				State = 424;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 427;
			Match(RPAREN);
			State = 428;
			Match(LCURLY);
			State = 429;
			statementList();
			State = 430;
			Match(RCURLY);
			State = 431;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListConstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UCMParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(UCMParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ListConstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listConstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListConstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListConstructionContext listConstruction() {
		ListConstructionContext _localctx = new ListConstructionContext(Context, State);
		EnterRule(_localctx, 74, RULE_listConstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(FOR);
			State = 434;
			Match(LPAREN);
			State = 435;
			id();
			State = 436;
			Match(IN);
			State = 439;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				{
				State = 437;
				array();
				}
				break;
			case ID:
				{
				State = 438;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 441;
			Match(RPAREN);
			State = 442;
			Match(LCURLY);
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 443;
				expr(0);
				}
				break;
			case 2:
				{
				State = 444;
				assignment();
				}
				break;
			}
			State = 447;
			Match(RCURLY);
			State = 448;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(UCMParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Return_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_Context return_() {
		Return_Context _localctx = new Return_Context(Context, State);
		EnterRule(_localctx, 76, RULE_return_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(RETURN);
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8106479283632291840L) != 0)) {
				{
				State = 451;
				expr(0);
				}
			}

			State = 454;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 78, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9188469139742651160L) != 0)) {
				{
				{
				State = 456;
				statement();
				}
				}
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_Context return_() {
			return GetRuleContext<Return_Context>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_statement);
		try {
			State = 472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462;
				conditional();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 464;
				whileLoop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 465;
				forLoop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 466;
				methodCall();
				State = 467;
				Match(SEMI);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 469;
				method();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 470;
				field();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 471;
				return_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundasignContext compoundasign() {
			return GetRuleContext<CompoundasignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 82, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 474;
				type();
				}
				break;
			}
			State = 479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 477;
				id();
				}
				break;
			case 2:
				{
				State = 478;
				arrayAccess();
				}
				break;
			}
			State = 483;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 481;
				Match(ASSIGN);
				}
				break;
			case PLUSASSIGN:
			case MULTASSIGN:
			case DIVASSIGN:
			case MODASSIGN:
			case MINUSASSIGN:
				{
				State = 482;
				compoundasign();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 485;
			expr(0);
			State = 486;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDefenitionContext[] templateDefenition() {
			return GetRuleContexts<TemplateDefenitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDefenitionContext templateDefenition(int i) {
			return GetRuleContext<TemplateDefenitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionContext[] functionCollection() {
			return GetRuleContexts<FunctionCollectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionContext functionCollection(int i) {
			return GetRuleContext<FunctionCollectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 84, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9188469139742647040L) != 0)) {
				{
				State = 491;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPLATE_KEYWORD:
					{
					State = 488;
					templateDefenition();
					}
					break;
				case FUNCTIONS_KEYWORD:
					{
					State = 489;
					functionCollection();
					}
					break;
				case HIDDEN_:
				case OBJECT_KEYWORD:
				case INT_T:
				case FLOAT_T:
				case STRING_T:
				case BOOL_T:
				case VOID_T:
				case ID:
					{
					State = 490;
					field();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return expr_sempred((ExprContext)_localctx, predIndex);
		case 29: return stringExpr_sempred((StringExprContext)_localctx, predIndex);
		case 30: return numExpr_sempred((NumExprContext)_localctx, predIndex);
		case 31: return boolExpr_sempred((BoolExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool stringExpr_sempred(StringExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool numExpr_sempred(NumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool boolExpr_sempred(BoolExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,63,497,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,1,0,1,1,1,1,3,1,91,8,1,1,1,1,1,4,1,95,8,1,11,1,12,1,96,1,2,1,2,1,3,
		1,3,1,3,3,3,104,8,3,1,4,1,4,3,4,108,8,4,1,5,1,5,3,5,112,8,5,1,5,1,5,3,
		5,116,8,5,5,5,118,8,5,10,5,12,5,121,9,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
		8,1,9,1,9,1,10,1,10,3,10,135,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,
		11,144,8,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,3,15,154,8,15,1,15,
		1,15,5,15,158,8,15,10,15,12,15,161,9,15,1,15,1,15,1,16,3,16,166,8,16,1,
		16,3,16,169,8,16,1,16,1,16,1,16,3,16,174,8,16,1,16,1,16,1,16,1,17,1,17,
		1,17,1,17,5,17,183,8,17,10,17,12,17,186,9,17,1,17,1,17,3,17,190,8,17,1,
		17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,3,19,202,8,19,1,19,1,19,
		1,19,3,19,207,8,19,5,19,209,8,19,10,19,12,19,212,9,19,1,19,3,19,215,8,
		19,1,19,1,19,1,20,1,20,1,20,1,20,3,20,223,8,20,1,20,1,20,3,20,227,8,20,
		1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,3,22,237,8,22,1,22,1,22,1,22,5,
		22,242,8,22,10,22,12,22,245,9,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,5,
		23,254,8,23,10,23,12,23,257,9,23,1,23,1,23,1,23,1,24,1,24,1,24,5,24,265,
		8,24,10,24,12,24,268,9,24,1,24,3,24,271,8,24,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,3,27,287,8,27,1,27,1,27,1,
		27,1,27,1,27,5,27,294,8,27,10,27,12,27,297,9,27,1,27,3,27,300,8,27,1,27,
		1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,312,8,28,1,28,1,28,1,
		28,5,28,317,8,28,10,28,12,28,320,9,28,1,29,1,29,1,29,3,29,325,8,29,1,29,
		1,29,1,29,5,29,330,8,29,10,29,12,29,333,9,29,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,3,30,346,8,30,1,30,1,30,1,30,1,30,1,30,1,
		30,5,30,354,8,30,10,30,12,30,357,9,30,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,3,31,370,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,5,31,381,8,31,10,31,12,31,384,9,31,1,32,1,32,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,5,34,399,8,34,10,34,12,34,402,
		9,34,1,34,1,34,1,34,1,34,1,34,3,34,409,8,34,1,35,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,426,8,36,1,36,1,36,
		1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,440,8,37,1,37,1,
		37,1,37,1,37,3,37,446,8,37,1,37,1,37,1,37,1,38,1,38,3,38,453,8,38,1,38,
		1,38,1,39,5,39,458,8,39,10,39,12,39,461,9,39,1,40,1,40,1,40,1,40,1,40,
		1,40,1,40,1,40,1,40,1,40,3,40,473,8,40,1,41,3,41,476,8,41,1,41,1,41,3,
		41,480,8,41,1,41,1,41,3,41,484,8,41,1,41,1,41,1,41,1,42,1,42,1,42,5,42,
		492,8,42,10,42,12,42,495,9,42,1,42,0,4,56,58,60,62,43,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,64,66,68,70,72,74,76,78,80,82,84,0,6,2,0,11,11,63,63,2,0,50,51,53,54,
		1,0,43,47,2,0,16,17,20,20,1,0,18,19,1,0,23,28,535,0,86,1,0,0,0,2,90,1,
		0,0,0,4,98,1,0,0,0,6,103,1,0,0,0,8,107,1,0,0,0,10,109,1,0,0,0,12,124,1,
		0,0,0,14,126,1,0,0,0,16,128,1,0,0,0,18,130,1,0,0,0,20,134,1,0,0,0,22,143,
		1,0,0,0,24,145,1,0,0,0,26,147,1,0,0,0,28,150,1,0,0,0,30,153,1,0,0,0,32,
		165,1,0,0,0,34,178,1,0,0,0,36,193,1,0,0,0,38,198,1,0,0,0,40,218,1,0,0,
		0,42,230,1,0,0,0,44,233,1,0,0,0,46,249,1,0,0,0,48,270,1,0,0,0,50,272,1,
		0,0,0,52,282,1,0,0,0,54,286,1,0,0,0,56,311,1,0,0,0,58,324,1,0,0,0,60,345,
		1,0,0,0,62,369,1,0,0,0,64,385,1,0,0,0,66,387,1,0,0,0,68,395,1,0,0,0,70,
		410,1,0,0,0,72,419,1,0,0,0,74,433,1,0,0,0,76,450,1,0,0,0,78,459,1,0,0,
		0,80,472,1,0,0,0,82,475,1,0,0,0,84,493,1,0,0,0,86,87,7,0,0,0,87,1,1,0,
		0,0,88,91,3,4,2,0,89,91,3,0,0,0,90,88,1,0,0,0,90,89,1,0,0,0,91,94,1,0,
		0,0,92,93,5,35,0,0,93,95,5,36,0,0,94,92,1,0,0,0,95,96,1,0,0,0,96,94,1,
		0,0,0,96,97,1,0,0,0,97,3,1,0,0,0,98,99,7,1,0,0,99,5,1,0,0,0,100,104,3,
		0,0,0,101,104,3,2,1,0,102,104,5,52,0,0,103,100,1,0,0,0,103,101,1,0,0,0,
		103,102,1,0,0,0,104,7,1,0,0,0,105,108,3,4,2,0,106,108,3,6,3,0,107,105,
		1,0,0,0,107,106,1,0,0,0,108,9,1,0,0,0,109,111,5,59,0,0,110,112,3,56,28,
		0,111,110,1,0,0,0,111,112,1,0,0,0,112,119,1,0,0,0,113,115,5,60,0,0,114,
		116,3,56,28,0,115,114,1,0,0,0,115,116,1,0,0,0,116,118,1,0,0,0,117,113,
		1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,122,1,0,0,
		0,121,119,1,0,0,0,122,123,5,61,0,0,123,11,1,0,0,0,124,125,5,58,0,0,125,
		13,1,0,0,0,126,127,7,2,0,0,127,15,1,0,0,0,128,129,5,56,0,0,129,17,1,0,
		0,0,130,131,5,57,0,0,131,19,1,0,0,0,132,135,3,16,8,0,133,135,3,18,9,0,
		134,132,1,0,0,0,134,133,1,0,0,0,135,21,1,0,0,0,136,144,3,20,10,0,137,144,
		3,10,5,0,138,144,3,12,6,0,139,144,5,55,0,0,140,144,3,30,15,0,141,144,3,
		34,17,0,142,144,5,15,0,0,143,136,1,0,0,0,143,137,1,0,0,0,143,138,1,0,0,
		0,143,139,1,0,0,0,143,140,1,0,0,0,143,141,1,0,0,0,143,142,1,0,0,0,144,
		23,1,0,0,0,145,146,5,63,0,0,146,25,1,0,0,0,147,148,3,8,4,0,148,149,3,24,
		12,0,149,27,1,0,0,0,150,151,3,24,12,0,151,29,1,0,0,0,152,154,3,28,14,0,
		153,152,1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,0,155,159,5,33,0,0,156,158,
		3,32,16,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,
		0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,163,5,34,0,0,163,31,1,0,0,0,164,
		166,5,10,0,0,165,164,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,169,3,
		8,4,0,168,167,1,0,0,0,168,169,1,0,0,0,169,170,1,0,0,0,170,173,3,24,12,
		0,171,174,5,42,0,0,172,174,3,14,7,0,173,171,1,0,0,0,173,172,1,0,0,0,174,
		175,1,0,0,0,175,176,3,56,28,0,176,177,5,37,0,0,177,33,1,0,0,0,178,189,
		5,35,0,0,179,184,3,56,28,0,180,181,5,39,0,0,181,183,3,56,28,0,182,180,
		1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,190,1,0,0,
		0,186,184,1,0,0,0,187,190,3,74,37,0,188,190,1,0,0,0,189,179,1,0,0,0,189,
		187,1,0,0,0,189,188,1,0,0,0,190,191,1,0,0,0,191,192,5,36,0,0,192,35,1,
		0,0,0,193,194,3,24,12,0,194,195,5,35,0,0,195,196,3,56,28,0,196,197,5,36,
		0,0,197,37,1,0,0,0,198,214,5,35,0,0,199,202,3,62,31,0,200,202,3,24,12,
		0,201,199,1,0,0,0,201,200,1,0,0,0,202,210,1,0,0,0,203,206,5,39,0,0,204,
		207,3,62,31,0,205,207,3,24,12,0,206,204,1,0,0,0,206,205,1,0,0,0,207,209,
		1,0,0,0,208,203,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,
		0,211,215,1,0,0,0,212,210,1,0,0,0,213,215,1,0,0,0,214,201,1,0,0,0,214,
		213,1,0,0,0,215,216,1,0,0,0,216,217,5,36,0,0,217,39,1,0,0,0,218,219,3,
		8,4,0,219,222,3,24,12,0,220,221,5,42,0,0,221,223,3,22,11,0,222,220,1,0,
		0,0,222,223,1,0,0,0,223,226,1,0,0,0,224,225,5,40,0,0,225,227,3,38,19,0,
		226,224,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,229,5,37,0,0,229,41,
		1,0,0,0,230,231,5,13,0,0,231,232,3,24,12,0,232,43,1,0,0,0,233,234,5,8,
		0,0,234,236,3,24,12,0,235,237,3,42,21,0,236,235,1,0,0,0,236,237,1,0,0,
		0,237,238,1,0,0,0,238,243,5,33,0,0,239,242,3,40,20,0,240,242,3,50,25,0,
		241,239,1,0,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,
		1,0,0,0,244,246,1,0,0,0,245,243,1,0,0,0,246,247,5,34,0,0,247,248,5,37,
		0,0,248,45,1,0,0,0,249,250,5,12,0,0,250,251,3,24,12,0,251,255,5,33,0,0,
		252,254,3,50,25,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,
		256,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,259,5,34,0,0,259,260,5,
		37,0,0,260,47,1,0,0,0,261,266,3,26,13,0,262,263,5,39,0,0,263,265,3,26,
		13,0,264,262,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,
		271,1,0,0,0,268,266,1,0,0,0,269,271,1,0,0,0,270,261,1,0,0,0,270,269,1,
		0,0,0,271,49,1,0,0,0,272,273,3,8,4,0,273,274,3,24,12,0,274,275,5,31,0,
		0,275,276,3,48,24,0,276,277,5,32,0,0,277,278,5,33,0,0,278,279,3,78,39,
		0,279,280,5,34,0,0,280,281,5,37,0,0,281,51,1,0,0,0,282,283,3,24,12,0,283,
		284,5,38,0,0,284,53,1,0,0,0,285,287,3,52,26,0,286,285,1,0,0,0,286,287,
		1,0,0,0,287,288,1,0,0,0,288,289,3,24,12,0,289,299,5,31,0,0,290,295,3,56,
		28,0,291,292,5,39,0,0,292,294,3,56,28,0,293,291,1,0,0,0,294,297,1,0,0,
		0,295,293,1,0,0,0,295,296,1,0,0,0,296,300,1,0,0,0,297,295,1,0,0,0,298,
		300,1,0,0,0,299,290,1,0,0,0,299,298,1,0,0,0,300,301,1,0,0,0,301,302,5,
		32,0,0,302,55,1,0,0,0,303,304,6,28,-1,0,304,312,3,22,11,0,305,312,3,24,
		12,0,306,312,3,36,18,0,307,312,3,54,27,0,308,312,3,62,31,0,309,312,3,60,
		30,0,310,312,3,58,29,0,311,303,1,0,0,0,311,305,1,0,0,0,311,306,1,0,0,0,
		311,307,1,0,0,0,311,308,1,0,0,0,311,309,1,0,0,0,311,310,1,0,0,0,312,318,
		1,0,0,0,313,314,10,3,0,0,314,315,5,23,0,0,315,317,3,56,28,4,316,313,1,
		0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,57,1,0,0,0,320,
		318,1,0,0,0,321,322,6,29,-1,0,322,325,3,10,5,0,323,325,3,12,6,0,324,321,
		1,0,0,0,324,323,1,0,0,0,325,331,1,0,0,0,326,327,10,3,0,0,327,328,5,18,
		0,0,328,330,3,58,29,4,329,326,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,
		331,332,1,0,0,0,332,59,1,0,0,0,333,331,1,0,0,0,334,335,6,30,-1,0,335,346,
		3,20,10,0,336,346,5,14,0,0,337,346,3,24,12,0,338,346,3,54,27,0,339,340,
		5,19,0,0,340,346,3,60,30,4,341,342,5,31,0,0,342,343,3,60,30,0,343,344,
		5,32,0,0,344,346,1,0,0,0,345,334,1,0,0,0,345,336,1,0,0,0,345,337,1,0,0,
		0,345,338,1,0,0,0,345,339,1,0,0,0,345,341,1,0,0,0,346,355,1,0,0,0,347,
		348,10,3,0,0,348,349,7,3,0,0,349,354,3,60,30,4,350,351,10,2,0,0,351,352,
		7,4,0,0,352,354,3,60,30,3,353,347,1,0,0,0,353,350,1,0,0,0,354,357,1,0,
		0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,61,1,0,0,0,357,355,1,0,0,0,358,
		359,6,31,-1,0,359,370,5,55,0,0,360,370,5,14,0,0,361,370,3,24,12,0,362,
		370,3,54,27,0,363,364,5,29,0,0,364,370,3,56,28,0,365,366,3,60,30,0,366,
		367,3,64,32,0,367,368,3,60,30,0,368,370,1,0,0,0,369,358,1,0,0,0,369,360,
		1,0,0,0,369,361,1,0,0,0,369,362,1,0,0,0,369,363,1,0,0,0,369,365,1,0,0,
		0,370,382,1,0,0,0,371,372,10,3,0,0,372,373,5,23,0,0,373,381,3,62,31,4,
		374,375,10,2,0,0,375,376,5,21,0,0,376,381,3,62,31,3,377,378,10,1,0,0,378,
		379,5,22,0,0,379,381,3,62,31,2,380,371,1,0,0,0,380,374,1,0,0,0,380,377,
		1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,63,1,0,0,0,
		384,382,1,0,0,0,385,386,7,5,0,0,386,65,1,0,0,0,387,388,5,3,0,0,388,389,
		5,31,0,0,389,390,3,62,31,0,390,391,5,32,0,0,391,392,5,33,0,0,392,393,3,
		78,39,0,393,394,5,34,0,0,394,67,1,0,0,0,395,400,3,66,33,0,396,397,5,4,
		0,0,397,399,3,66,33,0,398,396,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,
		400,401,1,0,0,0,401,408,1,0,0,0,402,400,1,0,0,0,403,404,5,4,0,0,404,405,
		5,33,0,0,405,406,3,78,39,0,406,407,5,34,0,0,407,409,1,0,0,0,408,403,1,
		0,0,0,408,409,1,0,0,0,409,69,1,0,0,0,410,411,5,5,0,0,411,412,5,31,0,0,
		412,413,3,62,31,0,413,414,5,32,0,0,414,415,5,33,0,0,415,416,3,78,39,0,
		416,417,5,34,0,0,417,418,5,37,0,0,418,71,1,0,0,0,419,420,5,6,0,0,420,421,
		5,31,0,0,421,422,3,24,12,0,422,425,5,9,0,0,423,426,3,34,17,0,424,426,3,
		54,27,0,425,423,1,0,0,0,425,424,1,0,0,0,426,427,1,0,0,0,427,428,5,32,0,
		0,428,429,5,33,0,0,429,430,3,78,39,0,430,431,5,34,0,0,431,432,5,37,0,0,
		432,73,1,0,0,0,433,434,5,6,0,0,434,435,5,31,0,0,435,436,3,24,12,0,436,
		439,5,9,0,0,437,440,3,34,17,0,438,440,3,54,27,0,439,437,1,0,0,0,439,438,
		1,0,0,0,440,441,1,0,0,0,441,442,5,32,0,0,442,445,5,33,0,0,443,446,3,56,
		28,0,444,446,3,82,41,0,445,443,1,0,0,0,445,444,1,0,0,0,446,447,1,0,0,0,
		447,448,5,34,0,0,448,449,5,37,0,0,449,75,1,0,0,0,450,452,5,7,0,0,451,453,
		3,56,28,0,452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,455,5,37,
		0,0,455,77,1,0,0,0,456,458,3,80,40,0,457,456,1,0,0,0,458,461,1,0,0,0,459,
		457,1,0,0,0,459,460,1,0,0,0,460,79,1,0,0,0,461,459,1,0,0,0,462,473,3,68,
		34,0,463,473,3,82,41,0,464,473,3,70,35,0,465,473,3,72,36,0,466,467,3,54,
		27,0,467,468,5,37,0,0,468,473,1,0,0,0,469,473,3,50,25,0,470,473,3,32,16,
		0,471,473,3,76,38,0,472,462,1,0,0,0,472,463,1,0,0,0,472,464,1,0,0,0,472,
		465,1,0,0,0,472,466,1,0,0,0,472,469,1,0,0,0,472,470,1,0,0,0,472,471,1,
		0,0,0,473,81,1,0,0,0,474,476,3,8,4,0,475,474,1,0,0,0,475,476,1,0,0,0,476,
		479,1,0,0,0,477,480,3,24,12,0,478,480,3,36,18,0,479,477,1,0,0,0,479,478,
		1,0,0,0,480,483,1,0,0,0,481,484,5,42,0,0,482,484,3,14,7,0,483,481,1,0,
		0,0,483,482,1,0,0,0,484,485,1,0,0,0,485,486,3,56,28,0,486,487,5,37,0,0,
		487,83,1,0,0,0,488,492,3,44,22,0,489,492,3,46,23,0,490,492,3,32,16,0,491,
		488,1,0,0,0,491,489,1,0,0,0,491,490,1,0,0,0,492,495,1,0,0,0,493,491,1,
		0,0,0,493,494,1,0,0,0,494,85,1,0,0,0,495,493,1,0,0,0,54,90,96,103,107,
		111,115,119,134,143,153,159,165,168,173,184,189,201,206,210,214,222,226,
		236,241,243,255,266,270,286,295,299,311,318,324,331,345,353,355,369,380,
		382,400,408,425,439,445,452,459,472,475,479,483,491,493
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
