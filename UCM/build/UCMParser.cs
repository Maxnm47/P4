//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from UCM.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class UCMParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, IF=3, ELSE=4, WHILE=5, FOR=6, RETURN=7, TEMPLATE_KEYWORD=8, 
		IN=9, HIDDEN_=10, OBJECT_KEYWORD=11, FUNCTIONS_KEYWORD=12, EXTENDS_KEYWORD=13, 
		THIS_KEYWORD=14, NULL=15, MULT=16, DIV=17, PLUS=18, MINUS=19, MOD=20, 
		AND=21, OR=22, EQ=23, NEQ=24, GT=25, LT=26, GTE=27, LTE=28, NOT=29, QUESTION=30, 
		LPAREN=31, RPAREN=32, LCURLY=33, RCURLY=34, LBRACKET=35, RBRACKET=36, 
		SEMI=37, DOT=38, COMMA=39, COLON=40, NEWLINE=41, ASSIGN=42, PLUSASSIGN=43, 
		MULTASSIGN=44, DIVASSIGN=45, MODASSIGN=46, MINUSASSIGN=47, QUOTE=48, DOLLAR=49, 
		INT_T=50, FLOAT_T=51, STRING_T=52, BOOL_T=53, VOID_T=54, BOOL=55, INT=56, 
		FLOAT=57, SIMPLE_STRING=58, STRING_START=59, STRING_MIDDLE=60, STRING_END=61, 
		SPACES=62, ID=63;
	public const int
		RULE_object_t = 0, RULE_array_t = 1, RULE_primitiveType = 2, RULE_complexType = 3, 
		RULE_type = 4, RULE_augmentedString = 5, RULE_string = 6, RULE_compoundasign = 7, 
		RULE_int = 8, RULE_float = 9, RULE_num = 10, RULE_value = 11, RULE_id = 12, 
		RULE_argument = 13, RULE_stringId = 14, RULE_fieldId = 15, RULE_adapting = 16, 
		RULE_object = 17, RULE_field = 18, RULE_array = 19, RULE_arrayAccess = 20, 
		RULE_evaluaterArray = 21, RULE_templateField = 22, RULE_templateExtention = 23, 
		RULE_templateDefenition = 24, RULE_functionCollection = 25, RULE_arguments = 26, 
		RULE_method = 27, RULE_functionCollectionCall = 28, RULE_methodCall = 29, 
		RULE_expr = 30, RULE_stringExpr = 31, RULE_numExpr = 32, RULE_boolExpr = 33, 
		RULE_compExpr = 34, RULE_ifStatement = 35, RULE_conditional = 36, RULE_whileLoop = 37, 
		RULE_forLoop = 38, RULE_listConstruction = 39, RULE_return_ = 40, RULE_statementList = 41, 
		RULE_statement = 42, RULE_assignment = 43, RULE_root = 44;
	public static readonly string[] ruleNames = {
		"object_t", "array_t", "primitiveType", "complexType", "type", "augmentedString", 
		"string", "compoundasign", "int", "float", "num", "value", "id", "argument", 
		"stringId", "fieldId", "adapting", "object", "field", "array", "arrayAccess", 
		"evaluaterArray", "templateField", "templateExtention", "templateDefenition", 
		"functionCollection", "arguments", "method", "functionCollectionCall", 
		"methodCall", "expr", "stringExpr", "numExpr", "boolExpr", "compExpr", 
		"ifStatement", "conditional", "whileLoop", "forLoop", "listConstruction", 
		"return_", "statementList", "statement", "assignment", "root"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'if'", "'else'", "'while'", "'for'", "'return'", "'template'", 
		"'in'", "'hidden'", "'object'", "'methods'", "'extends'", "'this'", "'null'", 
		"'*'", "'/'", "'+'", "'-'", "'%'", "'&&'", "'||'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'!'", "'?'", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "';'", "'.'", "','", "':'", "'\\n'", "'='", "'+='", "'*='", "'/='", 
		"'%='", "'-='", "'\"'", "'$'", "'int'", "'float'", "'string'", "'bool'", 
		"'void'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "IF", "ELSE", "WHILE", "FOR", "RETURN", "TEMPLATE_KEYWORD", 
		"IN", "HIDDEN_", "OBJECT_KEYWORD", "FUNCTIONS_KEYWORD", "EXTENDS_KEYWORD", 
		"THIS_KEYWORD", "NULL", "MULT", "DIV", "PLUS", "MINUS", "MOD", "AND", 
		"OR", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "NOT", "QUESTION", "LPAREN", 
		"RPAREN", "LCURLY", "RCURLY", "LBRACKET", "RBRACKET", "SEMI", "DOT", "COMMA", 
		"COLON", "NEWLINE", "ASSIGN", "PLUSASSIGN", "MULTASSIGN", "DIVASSIGN", 
		"MODASSIGN", "MINUSASSIGN", "QUOTE", "DOLLAR", "INT_T", "FLOAT_T", "STRING_T", 
		"BOOL_T", "VOID_T", "BOOL", "INT", "FLOAT", "SIMPLE_STRING", "STRING_START", 
		"STRING_MIDDLE", "STRING_END", "SPACES", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UCM.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UCMParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UCMParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UCMParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Object_tContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_KEYWORD() { return GetToken(UCMParser.OBJECT_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UCMParser.ID, 0); }
		public Object_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_t(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_tContext object_t() {
		Object_tContext _localctx = new Object_tContext(Context, State);
		EnterRule(_localctx, 0, RULE_object_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_la = TokenStream.LA(1);
			if ( !(_la==OBJECT_KEYWORD || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_tContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(UCMParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(UCMParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(UCMParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(UCMParser.RBRACKET, i);
		}
		public Array_tContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_t; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_t(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_tContext array_t() {
		Array_tContext _localctx = new Array_tContext(Context, State);
		EnterRule(_localctx, 2, RULE_array_t);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_T:
			case FLOAT_T:
			case BOOL_T:
			case VOID_T:
				{
				State = 92;
				primitiveType();
				}
				break;
			case OBJECT_KEYWORD:
			case ID:
				{
				State = 93;
				object_t();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 96;
				Match(LBRACKET);
				State = 97;
				Match(RBRACKET);
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LBRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_T() { return GetToken(UCMParser.INT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_T() { return GetToken(UCMParser.FLOAT_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_T() { return GetToken(UCMParser.BOOL_T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID_T() { return GetToken(UCMParser.VOID_T, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30399297484750848L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_tContext object_t() {
			return GetRuleContext<Object_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_tContext array_t() {
			return GetRuleContext<Array_tContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_T() { return GetToken(UCMParser.STRING_T, 0); }
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_complexType);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				object_t();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				array_t();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106;
				Match(STRING_T);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				complexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AugmentedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_START() { return GetToken(UCMParser.STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_END() { return GetToken(UCMParser.STRING_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_MIDDLE() { return GetTokens(UCMParser.STRING_MIDDLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_MIDDLE(int i) {
			return GetToken(UCMParser.STRING_MIDDLE, i);
		}
		public AugmentedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_augmentedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAugmentedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AugmentedStringContext augmentedString() {
		AugmentedStringContext _localctx = new AugmentedStringContext(Context, State);
		EnterRule(_localctx, 10, RULE_augmentedString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(STRING_START);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8106479283632291840L) != 0)) {
				{
				State = 114;
				expr(0);
				}
			}

			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING_MIDDLE) {
				{
				{
				State = 117;
				Match(STRING_MIDDLE);
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8106479283632291840L) != 0)) {
					{
					State = 118;
					expr(0);
					}
				}

				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126;
			Match(STRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_STRING() { return GetToken(UCMParser.SIMPLE_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 12, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(SIMPLE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundasignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(UCMParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTASSIGN() { return GetToken(UCMParser.MULTASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVASSIGN() { return GetToken(UCMParser.DIVASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODASSIGN() { return GetToken(UCMParser.MODASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(UCMParser.MINUSASSIGN, 0); }
		public CompoundasignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundasign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundasign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundasignContext compoundasign() {
		CompoundasignContext _localctx = new CompoundasignContext(Context, State);
		EnterRule(_localctx, 14, RULE_compoundasign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 272678883688448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(UCMParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 16, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(UCMParser.FLOAT, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 18, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 20, RULE_num);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				@int();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				@float();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugmentedStringContext augmentedString() {
			return GetRuleContext<AugmentedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UCMParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(UCMParser.NULL, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				num();
				}
				break;
			case STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				augmentedString();
				}
				break;
			case SIMPLE_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 142;
				@string();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 143;
				Match(BOOL);
				}
				break;
			case LCURLY:
			case ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 144;
				@object();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 6);
				{
				State = 145;
				array();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 146;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UCMParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 24, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 26, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			type();
			State = 152;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		public StringIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringIdContext stringId() {
		StringIdContext _localctx = new StringIdContext(Context, State);
		EnterRule(_localctx, 28, RULE_stringId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(LPAREN);
			State = 155;
			expr(0);
			State = 156;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringIdContext stringId() {
			return GetRuleContext<StringIdContext>(0);
		}
		public FieldIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldIdContext fieldId() {
		FieldIdContext _localctx = new FieldIdContext(Context, State);
		EnterRule(_localctx, 30, RULE_fieldId);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				id();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				stringId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdaptingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AdaptingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adapting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdapting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdaptingContext adapting() {
		AdaptingContext _localctx = new AdaptingContext(Context, State);
		EnterRule(_localctx, 32, RULE_adapting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AdaptingContext adapting() {
			return GetRuleContext<AdaptingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 34, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 164;
				adapting();
				}
			}

			State = 167;
			Match(LCURLY);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9188469137595167744L) != 0)) {
				{
				{
				State = 168;
				field();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldIdContext fieldId() {
			return GetRuleContext<FieldIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundasignContext compoundasign() {
			return GetRuleContext<CompoundasignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIDDEN_() { return GetToken(UCMParser.HIDDEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 36, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HIDDEN_) {
				{
				State = 176;
				Match(HIDDEN_);
				}
			}

			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 179;
				type();
				}
				break;
			}
			State = 182;
			fieldId();
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 183;
				Match(ASSIGN);
				}
				break;
			case PLUSASSIGN:
			case MULTASSIGN:
			case DIVASSIGN:
			case MODASSIGN:
			case MINUSASSIGN:
				{
				State = 184;
				compoundasign();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 187;
			expr(0);
			State = 188;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListConstructionContext listConstruction() {
			return GetRuleContext<ListConstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 38, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(LBRACKET);
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case BOOL:
			case INT:
			case FLOAT:
			case SIMPLE_STRING:
			case STRING_START:
			case ID:
				{
				State = 191;
				expr(0);
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 192;
					Match(COMMA);
					State = 193;
					expr(0);
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FOR:
				{
				State = 199;
				listConstruction();
				}
				break;
			case RBRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 203;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			id();
			State = 206;
			Match(LBRACKET);
			State = 207;
			expr(0);
			State = 208;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluaterArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(UCMParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(UCMParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext[] boolExpr() {
			return GetRuleContexts<BoolExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr(int i) {
			return GetRuleContext<BoolExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public EvaluaterArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluaterArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluaterArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluaterArrayContext evaluaterArray() {
		EvaluaterArrayContext _localctx = new EvaluaterArrayContext(Context, State);
		EnterRule(_localctx, 42, RULE_evaluaterArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(LBRACKET);
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case MINUS:
			case NOT:
			case LPAREN:
			case BOOL:
			case INT:
			case FLOAT:
			case ID:
				{
				State = 213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 211;
					boolExpr(0);
					}
					break;
				case 2:
					{
					State = 212;
					id();
					}
					break;
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 215;
					Match(COMMA);
					State = 218;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						State = 216;
						boolExpr(0);
						}
						break;
					case 2:
						{
						State = 217;
						id();
						}
						break;
					}
					}
					}
					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACKET:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 228;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UCMParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluaterArrayContext evaluaterArray() {
			return GetRuleContext<EvaluaterArrayContext>(0);
		}
		public TemplateFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateFieldContext templateField() {
		TemplateFieldContext _localctx = new TemplateFieldContext(Context, State);
		EnterRule(_localctx, 44, RULE_templateField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			type();
			State = 231;
			id();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 232;
				Match(ASSIGN);
				State = 233;
				value();
				}
			}

			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 236;
				Match(COLON);
				State = 237;
				evaluaterArray();
				}
			}

			State = 240;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateExtentionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS_KEYWORD() { return GetToken(UCMParser.EXTENDS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public TemplateExtentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateExtention; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateExtention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateExtentionContext templateExtention() {
		TemplateExtentionContext _localctx = new TemplateExtentionContext(Context, State);
		EnterRule(_localctx, 46, RULE_templateExtention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(EXTENDS_KEYWORD);
			State = 243;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDefenitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE_KEYWORD() { return GetToken(UCMParser.TEMPLATE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateExtentionContext templateExtention() {
			return GetRuleContext<TemplateExtentionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateFieldContext[] templateField() {
			return GetRuleContexts<TemplateFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateFieldContext templateField(int i) {
			return GetRuleContext<TemplateFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public TemplateDefenitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDefenition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateDefenition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDefenitionContext templateDefenition() {
		TemplateDefenitionContext _localctx = new TemplateDefenitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_templateDefenition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(TEMPLATE_KEYWORD);
			State = 246;
			id();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS_KEYWORD) {
				{
				State = 247;
				templateExtention();
				}
			}

			State = 250;
			Match(LCURLY);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9188469139742652416L) != 0)) {
				{
				State = 253;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 251;
					templateField();
					}
					break;
				case 2:
					{
					State = 252;
					method();
					}
					break;
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 258;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS_KEYWORD() { return GetToken(UCMParser.FUNCTIONS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public FunctionCollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCollectionContext functionCollection() {
		FunctionCollectionContext _localctx = new FunctionCollectionContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionCollection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(FUNCTIONS_KEYWORD);
			State = 261;
			id();
			State = 262;
			Match(LCURLY);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9188469139742652416L) != 0)) {
				{
				{
				State = 263;
				method();
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 269;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 52, RULE_arguments);
		int _la;
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBJECT_KEYWORD:
			case INT_T:
			case FLOAT_T:
			case STRING_T:
			case BOOL_T:
			case VOID_T:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				argument();
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 272;
					Match(COMMA);
					State = 273;
					argument();
					}
					}
					State = 278;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 54, RULE_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			type();
			State = 283;
			id();
			State = 284;
			Match(LPAREN);
			State = 285;
			arguments();
			State = 286;
			Match(RPAREN);
			State = 287;
			Match(LCURLY);
			State = 288;
			statementList();
			State = 289;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCollectionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(UCMParser.DOT, 0); }
		public FunctionCollectionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCollectionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCollectionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCollectionCallContext functionCollectionCall() {
		FunctionCollectionCallContext _localctx = new FunctionCollectionCallContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionCollectionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			id();
			State = 292;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionCallContext functionCollectionCall() {
			return GetRuleContext<FunctionCollectionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UCMParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UCMParser.COMMA, i);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 58, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 294;
				functionCollectionCall();
				}
				break;
			}
			State = 297;
			id();
			State = 298;
			Match(LPAREN);
			State = 308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_KEYWORD:
			case NULL:
			case MINUS:
			case NOT:
			case LPAREN:
			case LCURLY:
			case LBRACKET:
			case BOOL:
			case INT:
			case FLOAT:
			case SIMPLE_STRING:
			case STRING_START:
			case ID:
				{
				State = 299;
				expr(0);
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 300;
					Match(COMMA);
					State = 301;
					expr(0);
					}
					}
					State = 306;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 310;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr() {
			return GetRuleContext<NumExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 313;
				value();
				}
				break;
			case 2:
				{
				State = 314;
				id();
				}
				break;
			case 3:
				{
				State = 315;
				arrayAccess();
				}
				break;
			case 4:
				{
				State = 316;
				methodCall();
				}
				break;
			case 5:
				{
				State = 317;
				boolExpr(0);
				}
				break;
			case 6:
				{
				State = 318;
				numExpr(0);
				}
				break;
			case 7:
				{
				State = 319;
				stringExpr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 322;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 323;
					Match(EQ);
					State = 324;
					expr(4);
					}
					} 
				}
				State = 329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugmentedStringContext augmentedString() {
			return GetRuleContext<AugmentedStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext[] stringExpr() {
			return GetRuleContexts<StringExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr(int i) {
			return GetRuleContext<StringExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(UCMParser.PLUS, 0); }
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		return stringExpr(0);
	}

	private StringExprContext stringExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StringExprContext _localctx = new StringExprContext(Context, _parentState);
		StringExprContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_stringExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 331;
				id();
				}
				break;
			case 2:
				{
				State = 332;
				arrayAccess();
				}
				break;
			case 3:
				{
				State = 333;
				methodCall();
				}
				break;
			case 4:
				{
				State = 334;
				augmentedString();
				}
				break;
			case 5:
				{
				State = 335;
				@string();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 343;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StringExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_stringExpr);
					State = 338;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 339;
					Match(PLUS);
					State = 340;
					stringExpr(7);
					}
					} 
				}
				State = 345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_KEYWORD() { return GetToken(UCMParser.THIS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(UCMParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext[] numExpr() {
			return GetRuleContexts<NumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr(int i) {
			return GetRuleContext<NumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(UCMParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(UCMParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(UCMParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(UCMParser.PLUS, 0); }
		public NumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumExprContext numExpr() {
		return numExpr(0);
	}

	private NumExprContext numExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumExprContext _localctx = new NumExprContext(Context, _parentState);
		NumExprContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_numExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 347;
				num();
				}
				break;
			case 2:
				{
				State = 348;
				Match(THIS_KEYWORD);
				}
				break;
			case 3:
				{
				State = 349;
				id();
				}
				break;
			case 4:
				{
				State = 350;
				methodCall();
				}
				break;
			case 5:
				{
				State = 351;
				arrayAccess();
				}
				break;
			case 6:
				{
				State = 352;
				Match(MINUS);
				State = 353;
				numExpr(4);
				}
				break;
			case 7:
				{
				State = 354;
				Match(LPAREN);
				State = 355;
				numExpr(0);
				State = 356;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 368;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 366;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
					case 1:
						{
						_localctx = new NumExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numExpr);
						State = 360;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 361;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1245184L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 362;
						numExpr(4);
						}
						break;
					case 2:
						{
						_localctx = new NumExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numExpr);
						State = 363;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 364;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 365;
						numExpr(3);
						}
						break;
					}
					} 
				}
				State = 370;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UCMParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_KEYWORD() { return GetToken(UCMParser.THIS_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(UCMParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext[] numExpr() {
			return GetRuleContexts<NumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumExprContext numExpr(int i) {
			return GetRuleContext<NumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompExprContext compExpr() {
			return GetRuleContext<CompExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext[] boolExpr() {
			return GetRuleContexts<BoolExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr(int i) {
			return GetRuleContext<BoolExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(UCMParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(UCMParser.OR, 0); }
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		return boolExpr(0);
	}

	private BoolExprContext boolExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolExprContext _localctx = new BoolExprContext(Context, _parentState);
		BoolExprContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_boolExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 372;
				Match(BOOL);
				}
				break;
			case 2:
				{
				State = 373;
				Match(THIS_KEYWORD);
				}
				break;
			case 3:
				{
				State = 374;
				id();
				}
				break;
			case 4:
				{
				State = 375;
				methodCall();
				}
				break;
			case 5:
				{
				State = 376;
				Match(NOT);
				State = 377;
				expr(0);
				}
				break;
			case 6:
				{
				State = 378;
				numExpr(0);
				State = 379;
				compExpr();
				State = 380;
				numExpr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 395;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 393;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
					case 1:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 384;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 385;
						Match(EQ);
						State = 386;
						boolExpr(4);
						}
						break;
					case 2:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 387;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 388;
						Match(AND);
						State = 389;
						boolExpr(3);
						}
						break;
					case 3:
						{
						_localctx = new BoolExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolExpr);
						State = 390;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 391;
						Match(OR);
						State = 392;
						boolExpr(2);
						}
						break;
					}
					} 
				}
				State = 397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UCMParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UCMParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(UCMParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(UCMParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(UCMParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(UCMParser.NEQ, 0); }
		public CompExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompExprContext compExpr() {
		CompExprContext _localctx = new CompExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_compExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(UCMParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(IF);
			State = 401;
			Match(LPAREN);
			State = 402;
			boolExpr(0);
			State = 403;
			Match(RPAREN);
			State = 404;
			Match(LCURLY);
			State = 405;
			statementList();
			State = 406;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext[] ifStatement() {
			return GetRuleContexts<IfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement(int i) {
			return GetRuleContext<IfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(UCMParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(UCMParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 72, RULE_conditional);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ifStatement();
			State = 413;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 409;
					Match(ELSE);
					State = 410;
					ifStatement();
					}
					} 
				}
				State = 415;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 416;
				Match(ELSE);
				State = 417;
				Match(LCURLY);
				State = 418;
				statementList();
				State = 419;
				Match(RCURLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(UCMParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 74, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(WHILE);
			State = 424;
			Match(LPAREN);
			State = 425;
			boolExpr(0);
			State = 426;
			Match(RPAREN);
			State = 427;
			Match(LCURLY);
			State = 428;
			statementList();
			State = 429;
			Match(RCURLY);
			State = 430;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UCMParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(UCMParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 76, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			Match(FOR);
			State = 433;
			Match(LPAREN);
			State = 434;
			id();
			State = 435;
			Match(IN);
			State = 438;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				{
				State = 436;
				array();
				}
				break;
			case ID:
				{
				State = 437;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 440;
			Match(RPAREN);
			State = 441;
			Match(LCURLY);
			State = 442;
			statementList();
			State = 443;
			Match(RCURLY);
			State = 444;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListConstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UCMParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(UCMParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(UCMParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(UCMParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(UCMParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(UCMParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ListConstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listConstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListConstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListConstructionContext listConstruction() {
		ListConstructionContext _localctx = new ListConstructionContext(Context, State);
		EnterRule(_localctx, 78, RULE_listConstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(FOR);
			State = 447;
			Match(LPAREN);
			State = 448;
			id();
			State = 449;
			Match(IN);
			State = 452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				{
				State = 450;
				array();
				}
				break;
			case ID:
				{
				State = 451;
				methodCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 454;
			Match(RPAREN);
			State = 455;
			Match(LCURLY);
			State = 458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 456;
				expr(0);
				}
				break;
			case 2:
				{
				State = 457;
				assignment();
				}
				break;
			}
			State = 460;
			Match(RCURLY);
			State = 461;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(UCMParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Return_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_Context return_() {
		Return_Context _localctx = new Return_Context(Context, State);
		EnterRule(_localctx, 80, RULE_return_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(RETURN);
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8106479283632291840L) != 0)) {
				{
				State = 464;
				expr(0);
				}
			}

			State = 467;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 82, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9188469137595167512L) != 0)) {
				{
				{
				State = 469;
				statement();
				}
				}
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_Context return_() {
			return GetRuleContext<Return_Context>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_statement);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				conditional();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 477;
				whileLoop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 478;
				forLoop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 479;
				methodCall();
				State = 480;
				Match(SEMI);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 482;
				method();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 483;
				field();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 484;
				return_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(UCMParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(UCMParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundasignContext compoundasign() {
			return GetRuleContext<CompoundasignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 86, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 487;
				type();
				}
				break;
			}
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 490;
				id();
				}
				break;
			case 2:
				{
				State = 491;
				arrayAccess();
				}
				break;
			}
			State = 496;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 494;
				Match(ASSIGN);
				}
				break;
			case PLUSASSIGN:
			case MULTASSIGN:
			case DIVASSIGN:
			case MODASSIGN:
			case MINUSASSIGN:
				{
				State = 495;
				compoundasign();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 498;
			expr(0);
			State = 499;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDefenitionContext[] templateDefenition() {
			return GetRuleContexts<TemplateDefenitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateDefenitionContext templateDefenition(int i) {
			return GetRuleContext<TemplateDefenitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionContext[] functionCollection() {
			return GetRuleContexts<FunctionCollectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCollectionContext functionCollection(int i) {
			return GetRuleContext<FunctionCollectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUCMVisitor<TResult> typedVisitor = visitor as IUCMVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 88, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9188469137595163392L) != 0)) {
				{
				State = 504;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPLATE_KEYWORD:
					{
					State = 501;
					templateDefenition();
					}
					break;
				case FUNCTIONS_KEYWORD:
					{
					State = 502;
					functionCollection();
					}
					break;
				case HIDDEN_:
				case OBJECT_KEYWORD:
				case LPAREN:
				case INT_T:
				case FLOAT_T:
				case STRING_T:
				case BOOL_T:
				case VOID_T:
				case ID:
					{
					State = 503;
					field();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return expr_sempred((ExprContext)_localctx, predIndex);
		case 31: return stringExpr_sempred((StringExprContext)_localctx, predIndex);
		case 32: return numExpr_sempred((NumExprContext)_localctx, predIndex);
		case 33: return boolExpr_sempred((BoolExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool stringExpr_sempred(StringExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 6);
		}
		return true;
	}
	private bool numExpr_sempred(NumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool boolExpr_sempred(BoolExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,63,510,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,1,0,1,0,1,1,1,1,3,1,95,8,1,1,1,1,1,4,1,99,8,1,11,1,
		12,1,100,1,2,1,2,1,3,1,3,1,3,3,3,108,8,3,1,4,1,4,3,4,112,8,4,1,5,1,5,3,
		5,116,8,5,1,5,1,5,3,5,120,8,5,5,5,122,8,5,10,5,12,5,125,9,5,1,5,1,5,1,
		6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,3,10,139,8,10,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,3,11,148,8,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,
		1,14,1,15,1,15,3,15,161,8,15,1,16,1,16,1,17,3,17,166,8,17,1,17,1,17,5,
		17,170,8,17,10,17,12,17,173,9,17,1,17,1,17,1,18,3,18,178,8,18,1,18,3,18,
		181,8,18,1,18,1,18,1,18,3,18,186,8,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
		19,5,19,195,8,19,10,19,12,19,198,9,19,1,19,1,19,3,19,202,8,19,1,19,1,19,
		1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,3,21,214,8,21,1,21,1,21,1,21,3,
		21,219,8,21,5,21,221,8,21,10,21,12,21,224,9,21,1,21,3,21,227,8,21,1,21,
		1,21,1,22,1,22,1,22,1,22,3,22,235,8,22,1,22,1,22,3,22,239,8,22,1,22,1,
		22,1,23,1,23,1,23,1,24,1,24,1,24,3,24,249,8,24,1,24,1,24,1,24,5,24,254,
		8,24,10,24,12,24,257,9,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,265,8,25,
		10,25,12,25,268,9,25,1,25,1,25,1,26,1,26,1,26,5,26,275,8,26,10,26,12,26,
		278,9,26,1,26,3,26,281,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,28,1,28,1,28,1,29,3,29,296,8,29,1,29,1,29,1,29,1,29,1,29,5,29,303,
		8,29,10,29,12,29,306,9,29,1,29,3,29,309,8,29,1,29,1,29,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,3,30,321,8,30,1,30,1,30,1,30,5,30,326,8,30,10,
		30,12,30,329,9,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,337,8,31,1,31,1,31,
		1,31,5,31,342,8,31,10,31,12,31,345,9,31,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,3,32,359,8,32,1,32,1,32,1,32,1,32,1,32,1,
		32,5,32,367,8,32,10,32,12,32,370,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,3,33,383,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,5,33,394,8,33,10,33,12,33,397,9,33,1,34,1,34,1,35,1,35,1,35,
		1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,5,36,412,8,36,10,36,12,36,415,
		9,36,1,36,1,36,1,36,1,36,1,36,3,36,422,8,36,1,37,1,37,1,37,1,37,1,37,1,
		37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,3,38,439,8,38,1,38,1,38,
		1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,453,8,39,1,39,1,
		39,1,39,1,39,3,39,459,8,39,1,39,1,39,1,39,1,40,1,40,3,40,466,8,40,1,40,
		1,40,1,41,5,41,471,8,41,10,41,12,41,474,9,41,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,1,42,1,42,3,42,486,8,42,1,43,3,43,489,8,43,1,43,1,43,3,
		43,493,8,43,1,43,1,43,3,43,497,8,43,1,43,1,43,1,43,1,44,1,44,1,44,5,44,
		505,8,44,10,44,12,44,508,9,44,1,44,0,4,60,62,64,66,45,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,64,66,68,70,72,74,76,78,80,82,84,86,88,0,6,2,0,11,11,63,63,2,0,50,51,
		53,54,1,0,43,47,2,0,16,17,20,20,1,0,18,19,1,0,23,28,551,0,90,1,0,0,0,2,
		94,1,0,0,0,4,102,1,0,0,0,6,107,1,0,0,0,8,111,1,0,0,0,10,113,1,0,0,0,12,
		128,1,0,0,0,14,130,1,0,0,0,16,132,1,0,0,0,18,134,1,0,0,0,20,138,1,0,0,
		0,22,147,1,0,0,0,24,149,1,0,0,0,26,151,1,0,0,0,28,154,1,0,0,0,30,160,1,
		0,0,0,32,162,1,0,0,0,34,165,1,0,0,0,36,177,1,0,0,0,38,190,1,0,0,0,40,205,
		1,0,0,0,42,210,1,0,0,0,44,230,1,0,0,0,46,242,1,0,0,0,48,245,1,0,0,0,50,
		260,1,0,0,0,52,280,1,0,0,0,54,282,1,0,0,0,56,291,1,0,0,0,58,295,1,0,0,
		0,60,320,1,0,0,0,62,336,1,0,0,0,64,358,1,0,0,0,66,382,1,0,0,0,68,398,1,
		0,0,0,70,400,1,0,0,0,72,408,1,0,0,0,74,423,1,0,0,0,76,432,1,0,0,0,78,446,
		1,0,0,0,80,463,1,0,0,0,82,472,1,0,0,0,84,485,1,0,0,0,86,488,1,0,0,0,88,
		506,1,0,0,0,90,91,7,0,0,0,91,1,1,0,0,0,92,95,3,4,2,0,93,95,3,0,0,0,94,
		92,1,0,0,0,94,93,1,0,0,0,95,98,1,0,0,0,96,97,5,35,0,0,97,99,5,36,0,0,98,
		96,1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,3,1,0,0,0,
		102,103,7,1,0,0,103,5,1,0,0,0,104,108,3,0,0,0,105,108,3,2,1,0,106,108,
		5,52,0,0,107,104,1,0,0,0,107,105,1,0,0,0,107,106,1,0,0,0,108,7,1,0,0,0,
		109,112,3,4,2,0,110,112,3,6,3,0,111,109,1,0,0,0,111,110,1,0,0,0,112,9,
		1,0,0,0,113,115,5,59,0,0,114,116,3,60,30,0,115,114,1,0,0,0,115,116,1,0,
		0,0,116,123,1,0,0,0,117,119,5,60,0,0,118,120,3,60,30,0,119,118,1,0,0,0,
		119,120,1,0,0,0,120,122,1,0,0,0,121,117,1,0,0,0,122,125,1,0,0,0,123,121,
		1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,5,61,0,
		0,127,11,1,0,0,0,128,129,5,58,0,0,129,13,1,0,0,0,130,131,7,2,0,0,131,15,
		1,0,0,0,132,133,5,56,0,0,133,17,1,0,0,0,134,135,5,57,0,0,135,19,1,0,0,
		0,136,139,3,16,8,0,137,139,3,18,9,0,138,136,1,0,0,0,138,137,1,0,0,0,139,
		21,1,0,0,0,140,148,3,20,10,0,141,148,3,10,5,0,142,148,3,12,6,0,143,148,
		5,55,0,0,144,148,3,34,17,0,145,148,3,38,19,0,146,148,5,15,0,0,147,140,
		1,0,0,0,147,141,1,0,0,0,147,142,1,0,0,0,147,143,1,0,0,0,147,144,1,0,0,
		0,147,145,1,0,0,0,147,146,1,0,0,0,148,23,1,0,0,0,149,150,5,63,0,0,150,
		25,1,0,0,0,151,152,3,8,4,0,152,153,3,24,12,0,153,27,1,0,0,0,154,155,5,
		31,0,0,155,156,3,60,30,0,156,157,5,32,0,0,157,29,1,0,0,0,158,161,3,24,
		12,0,159,161,3,28,14,0,160,158,1,0,0,0,160,159,1,0,0,0,161,31,1,0,0,0,
		162,163,3,24,12,0,163,33,1,0,0,0,164,166,3,32,16,0,165,164,1,0,0,0,165,
		166,1,0,0,0,166,167,1,0,0,0,167,171,5,33,0,0,168,170,3,36,18,0,169,168,
		1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,
		0,173,171,1,0,0,0,174,175,5,34,0,0,175,35,1,0,0,0,176,178,5,10,0,0,177,
		176,1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,179,181,3,8,4,0,180,179,1,
		0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,185,3,30,15,0,183,186,5,42,0,
		0,184,186,3,14,7,0,185,183,1,0,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,
		188,3,60,30,0,188,189,5,37,0,0,189,37,1,0,0,0,190,201,5,35,0,0,191,196,
		3,60,30,0,192,193,5,39,0,0,193,195,3,60,30,0,194,192,1,0,0,0,195,198,1,
		0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,202,1,0,0,0,198,196,1,0,0,0,
		199,202,3,78,39,0,200,202,1,0,0,0,201,191,1,0,0,0,201,199,1,0,0,0,201,
		200,1,0,0,0,202,203,1,0,0,0,203,204,5,36,0,0,204,39,1,0,0,0,205,206,3,
		24,12,0,206,207,5,35,0,0,207,208,3,60,30,0,208,209,5,36,0,0,209,41,1,0,
		0,0,210,226,5,35,0,0,211,214,3,66,33,0,212,214,3,24,12,0,213,211,1,0,0,
		0,213,212,1,0,0,0,214,222,1,0,0,0,215,218,5,39,0,0,216,219,3,66,33,0,217,
		219,3,24,12,0,218,216,1,0,0,0,218,217,1,0,0,0,219,221,1,0,0,0,220,215,
		1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,227,1,0,0,
		0,224,222,1,0,0,0,225,227,1,0,0,0,226,213,1,0,0,0,226,225,1,0,0,0,227,
		228,1,0,0,0,228,229,5,36,0,0,229,43,1,0,0,0,230,231,3,8,4,0,231,234,3,
		24,12,0,232,233,5,42,0,0,233,235,3,22,11,0,234,232,1,0,0,0,234,235,1,0,
		0,0,235,238,1,0,0,0,236,237,5,40,0,0,237,239,3,42,21,0,238,236,1,0,0,0,
		238,239,1,0,0,0,239,240,1,0,0,0,240,241,5,37,0,0,241,45,1,0,0,0,242,243,
		5,13,0,0,243,244,3,24,12,0,244,47,1,0,0,0,245,246,5,8,0,0,246,248,3,24,
		12,0,247,249,3,46,23,0,248,247,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,
		250,255,5,33,0,0,251,254,3,44,22,0,252,254,3,54,27,0,253,251,1,0,0,0,253,
		252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,
		0,0,0,257,255,1,0,0,0,258,259,5,34,0,0,259,49,1,0,0,0,260,261,5,12,0,0,
		261,262,3,24,12,0,262,266,5,33,0,0,263,265,3,54,27,0,264,263,1,0,0,0,265,
		268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,266,1,
		0,0,0,269,270,5,34,0,0,270,51,1,0,0,0,271,276,3,26,13,0,272,273,5,39,0,
		0,273,275,3,26,13,0,274,272,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,
		277,1,0,0,0,277,281,1,0,0,0,278,276,1,0,0,0,279,281,1,0,0,0,280,271,1,
		0,0,0,280,279,1,0,0,0,281,53,1,0,0,0,282,283,3,8,4,0,283,284,3,24,12,0,
		284,285,5,31,0,0,285,286,3,52,26,0,286,287,5,32,0,0,287,288,5,33,0,0,288,
		289,3,82,41,0,289,290,5,34,0,0,290,55,1,0,0,0,291,292,3,24,12,0,292,293,
		5,38,0,0,293,57,1,0,0,0,294,296,3,56,28,0,295,294,1,0,0,0,295,296,1,0,
		0,0,296,297,1,0,0,0,297,298,3,24,12,0,298,308,5,31,0,0,299,304,3,60,30,
		0,300,301,5,39,0,0,301,303,3,60,30,0,302,300,1,0,0,0,303,306,1,0,0,0,304,
		302,1,0,0,0,304,305,1,0,0,0,305,309,1,0,0,0,306,304,1,0,0,0,307,309,1,
		0,0,0,308,299,1,0,0,0,308,307,1,0,0,0,309,310,1,0,0,0,310,311,5,32,0,0,
		311,59,1,0,0,0,312,313,6,30,-1,0,313,321,3,22,11,0,314,321,3,24,12,0,315,
		321,3,40,20,0,316,321,3,58,29,0,317,321,3,66,33,0,318,321,3,64,32,0,319,
		321,3,62,31,0,320,312,1,0,0,0,320,314,1,0,0,0,320,315,1,0,0,0,320,316,
		1,0,0,0,320,317,1,0,0,0,320,318,1,0,0,0,320,319,1,0,0,0,321,327,1,0,0,
		0,322,323,10,3,0,0,323,324,5,23,0,0,324,326,3,60,30,4,325,322,1,0,0,0,
		326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,61,1,0,0,0,329,327,
		1,0,0,0,330,331,6,31,-1,0,331,337,3,24,12,0,332,337,3,40,20,0,333,337,
		3,58,29,0,334,337,3,10,5,0,335,337,3,12,6,0,336,330,1,0,0,0,336,332,1,
		0,0,0,336,333,1,0,0,0,336,334,1,0,0,0,336,335,1,0,0,0,337,343,1,0,0,0,
		338,339,10,6,0,0,339,340,5,18,0,0,340,342,3,62,31,7,341,338,1,0,0,0,342,
		345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,63,1,0,0,0,345,343,1,0,
		0,0,346,347,6,32,-1,0,347,359,3,20,10,0,348,359,5,14,0,0,349,359,3,24,
		12,0,350,359,3,58,29,0,351,359,3,40,20,0,352,353,5,19,0,0,353,359,3,64,
		32,4,354,355,5,31,0,0,355,356,3,64,32,0,356,357,5,32,0,0,357,359,1,0,0,
		0,358,346,1,0,0,0,358,348,1,0,0,0,358,349,1,0,0,0,358,350,1,0,0,0,358,
		351,1,0,0,0,358,352,1,0,0,0,358,354,1,0,0,0,359,368,1,0,0,0,360,361,10,
		3,0,0,361,362,7,3,0,0,362,367,3,64,32,4,363,364,10,2,0,0,364,365,7,4,0,
		0,365,367,3,64,32,3,366,360,1,0,0,0,366,363,1,0,0,0,367,370,1,0,0,0,368,
		366,1,0,0,0,368,369,1,0,0,0,369,65,1,0,0,0,370,368,1,0,0,0,371,372,6,33,
		-1,0,372,383,5,55,0,0,373,383,5,14,0,0,374,383,3,24,12,0,375,383,3,58,
		29,0,376,377,5,29,0,0,377,383,3,60,30,0,378,379,3,64,32,0,379,380,3,68,
		34,0,380,381,3,64,32,0,381,383,1,0,0,0,382,371,1,0,0,0,382,373,1,0,0,0,
		382,374,1,0,0,0,382,375,1,0,0,0,382,376,1,0,0,0,382,378,1,0,0,0,383,395,
		1,0,0,0,384,385,10,3,0,0,385,386,5,23,0,0,386,394,3,66,33,4,387,388,10,
		2,0,0,388,389,5,21,0,0,389,394,3,66,33,3,390,391,10,1,0,0,391,392,5,22,
		0,0,392,394,3,66,33,2,393,384,1,0,0,0,393,387,1,0,0,0,393,390,1,0,0,0,
		394,397,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,67,1,0,0,0,397,395,
		1,0,0,0,398,399,7,5,0,0,399,69,1,0,0,0,400,401,5,3,0,0,401,402,5,31,0,
		0,402,403,3,66,33,0,403,404,5,32,0,0,404,405,5,33,0,0,405,406,3,82,41,
		0,406,407,5,34,0,0,407,71,1,0,0,0,408,413,3,70,35,0,409,410,5,4,0,0,410,
		412,3,70,35,0,411,409,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,414,
		1,0,0,0,414,421,1,0,0,0,415,413,1,0,0,0,416,417,5,4,0,0,417,418,5,33,0,
		0,418,419,3,82,41,0,419,420,5,34,0,0,420,422,1,0,0,0,421,416,1,0,0,0,421,
		422,1,0,0,0,422,73,1,0,0,0,423,424,5,5,0,0,424,425,5,31,0,0,425,426,3,
		66,33,0,426,427,5,32,0,0,427,428,5,33,0,0,428,429,3,82,41,0,429,430,5,
		34,0,0,430,431,5,37,0,0,431,75,1,0,0,0,432,433,5,6,0,0,433,434,5,31,0,
		0,434,435,3,24,12,0,435,438,5,9,0,0,436,439,3,38,19,0,437,439,3,58,29,
		0,438,436,1,0,0,0,438,437,1,0,0,0,439,440,1,0,0,0,440,441,5,32,0,0,441,
		442,5,33,0,0,442,443,3,82,41,0,443,444,5,34,0,0,444,445,5,37,0,0,445,77,
		1,0,0,0,446,447,5,6,0,0,447,448,5,31,0,0,448,449,3,24,12,0,449,452,5,9,
		0,0,450,453,3,38,19,0,451,453,3,58,29,0,452,450,1,0,0,0,452,451,1,0,0,
		0,453,454,1,0,0,0,454,455,5,32,0,0,455,458,5,33,0,0,456,459,3,60,30,0,
		457,459,3,86,43,0,458,456,1,0,0,0,458,457,1,0,0,0,459,460,1,0,0,0,460,
		461,5,34,0,0,461,462,5,37,0,0,462,79,1,0,0,0,463,465,5,7,0,0,464,466,3,
		60,30,0,465,464,1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,5,37,0,
		0,468,81,1,0,0,0,469,471,3,84,42,0,470,469,1,0,0,0,471,474,1,0,0,0,472,
		470,1,0,0,0,472,473,1,0,0,0,473,83,1,0,0,0,474,472,1,0,0,0,475,486,3,72,
		36,0,476,486,3,86,43,0,477,486,3,74,37,0,478,486,3,76,38,0,479,480,3,58,
		29,0,480,481,5,37,0,0,481,486,1,0,0,0,482,486,3,54,27,0,483,486,3,36,18,
		0,484,486,3,80,40,0,485,475,1,0,0,0,485,476,1,0,0,0,485,477,1,0,0,0,485,
		478,1,0,0,0,485,479,1,0,0,0,485,482,1,0,0,0,485,483,1,0,0,0,485,484,1,
		0,0,0,486,85,1,0,0,0,487,489,3,8,4,0,488,487,1,0,0,0,488,489,1,0,0,0,489,
		492,1,0,0,0,490,493,3,24,12,0,491,493,3,40,20,0,492,490,1,0,0,0,492,491,
		1,0,0,0,493,496,1,0,0,0,494,497,5,42,0,0,495,497,3,14,7,0,496,494,1,0,
		0,0,496,495,1,0,0,0,497,498,1,0,0,0,498,499,3,60,30,0,499,500,5,37,0,0,
		500,87,1,0,0,0,501,505,3,48,24,0,502,505,3,50,25,0,503,505,3,36,18,0,504,
		501,1,0,0,0,504,502,1,0,0,0,504,503,1,0,0,0,505,508,1,0,0,0,506,504,1,
		0,0,0,506,507,1,0,0,0,507,89,1,0,0,0,508,506,1,0,0,0,55,94,100,107,111,
		115,119,123,138,147,160,165,171,177,180,185,196,201,213,218,222,226,234,
		238,248,253,255,266,276,280,295,304,308,320,327,336,343,358,366,368,382,
		393,395,413,421,438,452,458,465,472,485,488,492,496,504,506
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
