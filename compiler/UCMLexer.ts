// Generated from UCM.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class UCMLexer extends Lexer {
	public static readonly INT_T = 1;
	public static readonly FLOAT_T = 2;
	public static readonly STRING_T = 3;
	public static readonly INT = 4;
	public static readonly FLOAT = 5;
	public static readonly STRING = 6;
	public static readonly WS = 7;
	public static readonly COMMENT = 8;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"INT_T", "FLOAT_T", "STRING_T", "INT", "FLOAT", "ASCII", "STRING", "WS", 
		"COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'int'", "'float'", "'string'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INT_T", "FLOAT_T", "STRING_T", "INT", "FLOAT", "STRING", "WS", 
		"COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(UCMLexer._LITERAL_NAMES, UCMLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return UCMLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(UCMLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "UCM.g4"; }

	// @Override
	public get ruleNames(): string[] { return UCMLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return UCMLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return UCMLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return UCMLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\nd\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x06\x05(\n\x05\r\x05\x0E\x05" +
		")\x03\x06\x07\x06-\n\x06\f\x06\x0E\x060\v\x06\x03\x06\x03\x06\x06\x06" +
		"4\n\x06\r\x06\x0E\x065\x03\x06\x06\x069\n\x06\r\x06\x0E\x06:\x03\x06\x03" +
		"\x06\x07\x06?\n\x06\f\x06\x0E\x06B\v\x06\x05\x06D\n\x06\x03\x07\x03\x07" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x07\bN\n\b\f\b\x0E\bQ\v\b\x03\b\x03" +
		"\b\x03\t\x06\tV\n\t\r\t\x0E\tW\x03\t\x03\t\x03\n\x03\n\x07\n^\n\n\f\n" +
		"\x0E\na\v\n\x03\n\x03\n\x02\x02\x02\v\x03\x02\x03\x05\x02\x04\x07\x02" +
		"\x05\t\x02\x06\v\x02\x07\r\x02\x02\x0F\x02\b\x11\x02\t\x13\x02\n\x03\x02" +
		"\x07\x03\x022;\x03\x02\x02\x81\x06\x02\f\f\x0F\x0F$$^^\x05\x02\v\f\x0F" +
		"\x0F\"\"\x04\x02\f\f\x0F\x0F\x02m\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02" +
		"\x02\x02\x03\x15\x03\x02\x02\x02\x05\x19\x03\x02\x02\x02\x07\x1F\x03\x02" +
		"\x02\x02\t\'\x03\x02\x02\x02\vC\x03\x02\x02\x02\rE\x03\x02\x02\x02\x0F" +
		"G\x03\x02\x02\x02\x11U\x03\x02\x02\x02\x13[\x03\x02\x02\x02\x15\x16\x07" +
		"k\x02\x02\x16\x17\x07p\x02\x02\x17\x18\x07v\x02\x02\x18\x04\x03\x02\x02" +
		"\x02\x19\x1A\x07h\x02\x02\x1A\x1B\x07n\x02\x02\x1B\x1C\x07q\x02\x02\x1C" +
		"\x1D\x07c\x02\x02\x1D\x1E\x07v\x02\x02\x1E\x06\x03\x02\x02\x02\x1F \x07" +
		"u\x02\x02 !\x07v\x02\x02!\"\x07t\x02\x02\"#\x07k\x02\x02#$\x07p\x02\x02" +
		"$%\x07i\x02\x02%\b\x03\x02\x02\x02&(\t\x02\x02\x02\'&\x03\x02\x02\x02" +
		"()\x03\x02\x02\x02)\'\x03\x02\x02\x02)*\x03\x02\x02\x02*\n\x03\x02\x02" +
		"\x02+-\t\x02\x02\x02,+\x03\x02\x02\x02-0\x03\x02\x02\x02.,\x03\x02\x02" +
		"\x02./\x03\x02\x02\x02/1\x03\x02\x02\x020.\x03\x02\x02\x0213\x070\x02" +
		"\x0224\t\x02\x02\x0232\x03\x02\x02\x0245\x03\x02\x02\x0253\x03\x02\x02" +
		"\x0256\x03\x02\x02\x026D\x03\x02\x02\x0279\t\x02\x02\x0287\x03\x02\x02" +
		"\x029:\x03\x02\x02\x02:8\x03\x02\x02\x02:;\x03\x02\x02\x02;<\x03\x02\x02" +
		"\x02<@\x070\x02\x02=?\t\x02\x02\x02>=\x03\x02\x02\x02?B\x03\x02\x02\x02" +
		"@>\x03\x02\x02\x02@A\x03\x02\x02\x02AD\x03\x02\x02\x02B@\x03\x02\x02\x02" +
		"C.\x03\x02\x02\x02C8\x03\x02\x02\x02D\f\x03\x02\x02\x02EF\t\x03\x02\x02" +
		"F\x0E\x03\x02\x02\x02GO\x07$\x02\x02HI\x07^\x02\x02IN\x07^\x02\x02JK\x07" +
		"^\x02\x02KN\x07$\x02\x02LN\n\x04\x02\x02MH\x03\x02\x02\x02MJ\x03\x02\x02" +
		"\x02ML\x03\x02\x02\x02NQ\x03\x02\x02\x02OM\x03\x02\x02\x02OP\x03\x02\x02" +
		"\x02PR\x03\x02\x02\x02QO\x03\x02\x02\x02RS\x07$\x02\x02S\x10\x03\x02\x02" +
		"\x02TV\t\x05\x02\x02UT\x03\x02\x02\x02VW\x03\x02\x02\x02WU\x03\x02\x02" +
		"\x02WX\x03\x02\x02\x02XY\x03\x02\x02\x02YZ\b\t\x02\x02Z\x12\x03\x02\x02" +
		"\x02[_\x07%\x02\x02\\^\n\x06\x02\x02]\\\x03\x02\x02\x02^a\x03\x02\x02" +
		"\x02_]\x03\x02\x02\x02_`\x03\x02\x02\x02`b\x03\x02\x02\x02a_\x03\x02\x02" +
		"\x02bc\b\n\x02\x02c\x14\x03\x02\x02\x02\r\x02).5:@CMOW_\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!UCMLexer.__ATN) {
			UCMLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(UCMLexer._serializedATN));
		}

		return UCMLexer.__ATN;
	}

}

